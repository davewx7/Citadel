{

	"Temple of Triumph": {
		name: "Temple of Triumph",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval AETHER",
		portrait: "dawn-obelisk.png",
		portrait_focus: [385,497],
		portrait_focus_width: 200,
		hue_shift: 0.5,
		creature: {
			is_land: true,
			portrait_y_offset: 80,
			passive_abilities: [{
				name: "Triumph",
				rules: "Nearby allies have +1/+1",

				effect: 'radial_influence_effect',
				effect_args: {
					color_dark: [0.2,0.2,0.3],
					color_mid: [0.7,0.7,0.7],
					color_light: [1.0,1.0,1.0],
				},

				static_effect: "def(class game_state game, class creature creature) ->commands
				[[
				  target.apply_static_effect('attack', 1),
				  target.apply_static_effect('life_shield', 1),
				 ]
				  | target <- game.creatures,
				    target.is_building = false,
					target.controller = creature.controller,
					game.locs_adjacent(target.loc, creature.loc) or target.loc = creature.loc
				]
				"
            }],
		}
	},

	"Kala's Faithful": {
		name: "Kala's Faithful",
		type: "creature",
		set: "core",
		portrait: "sul-dahl-devout.png",
		hue_shift: 0.3,
		cost: 4,
		school: "@eval AETHER",

		creature: {
			game_sounds: "warrior_female",
			attack: 5,
			life: 4,

			triggered_abilities: [{
				name: "Deliverance",
				rules: "When targeted by a spell, gets +2/+2 until end of turn",
				on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(info.card != null and info.card.type = 'spell' and (creature.loc in info.targets), [
						creature.apply_effect_until_end_of_turn('attack', 2),
						creature.apply_effect_until_end_of_turn('life_shield', 2),
					])
				",
			}],
		},
	},

	"Counter Spell": {
		name: "Counter Spell",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval AETHER",
		portrait: "counter-spell.png",
		artist: "lisanguyen",
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		rules: "Target spell fizzles",
		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  	if(targets = [],
				map(filter(game.stack, value.card != null and value.card.type = 'spell'), [-2, value.stack_id])
			)
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
			set(find_or_die(game.stack, value.stack_id = info.targets[0][1]).force_fizzle, true)
		",
	},

	"Cleric of the Vanguard": {
		name: "Cleric of the Vanguard",
		type: "creature",
		set: "core",
		portrait: "cleric-of-the-vanguard.png",
		artist: "lisanguyen",
		cost: 5,
		school: "@eval FAITH",
		rarity: 0,
		creature: {
			game_sounds: "warrior_female",
			attack: 7,
			life: 6,
		},
	},

	"Devout Priest": {
		name: "Devout Priest",
		type: "creature",
		set: "core",
		portrait: "devout-priest.png",
		artist: "lordbob",
		cost: 4,
		school: "@eval FAITH",
		rarity: 0,
		help_strings: ['Restore'],
		creature: {
			game_sounds: "warrior_aether",
			attack: 4,
			life: 4,
			activated_abilities: [{
				name: "Restore",
				school: "@eval FAITH",
				help_strings: ['Restore'],
				is_response: true,
				rules: "Sacrifice self, target ally is <i>Restored</i>.",
				cost: 1,
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(size(targets) > 0, null,
						[c.loc | c <- game.creatures, c.controller = creature.controller and c != creature]
					)
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands [
					game.creature_at_loc_or_die(info.targets[0]).restore(game),
					set(creature.destroyed, true),
				] where creature = info.get_creature(game)",
			}],

		},
	},

	"Ardent Defender": {
		name: "Ardent Defender",
		type: "creature",
		set: "core",
		portrait: "ardent-defender.png",
		artist: "lisanguyen",
		cost: 4,
		school: "@eval FAITH",
		rarity: 0,
		creature: {
			game_sounds: "warrior_aether",
			attack: 4,
			life: 4,
            passive_abilities: [ {
				name: "Righteous Defender",
				rules: "Has +3/+3 when on an &AElig;ther land.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(land and (AETHER in land.school), [
					creature.apply_static_effect('attack', 3),
					creature.apply_static_effect('life_shield', 3),
				]) where land = game.land_at_loc(creature.loc)",
			}]
		},

	},

	"Liana, the Lost Saint": {
		name: "Liana, the Lost Saint",
		type: "creature",
		set: "core",
		portrait: "liana-the-lost-saint.png",
		cost: 8,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 2,
		hero: true,
		creature: {
			attack: 9,
			life: 9,
			abilities: ['Cover'],

			activated_abilities: [{
				name: 'Sacrifice',
				once_per_turn: false,
				is_response: true,
				school: "@eval FAITH",
				rules: "Sacrifice self, your other creatures are <i>Indestructible</i> this turn.",
				cost: 0,
				//possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null null",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					set(creature.destroyed, true),
					[c.add_ability_until_end_of_turn('Indestructible') | c <- game.creatures, c.controller = creature.controller, not c.is_building, c != creature],
				] where creature = info.get_creature(game)
				",

			}],
		}
	},

	"Blessed Lance": {
		name: "Blessed Lance",
		type: "spell",
		is_response: true,
		cost: 2,
		loyalty_cost: 2,
		set: "core",
		rarity: 0,
		tags: [],
		school: "@eval FAITH",
		portrait: "blessed-lance.png",
		artist: "lordbob",
		sound_resolve: "gameplay/spell_bless",
		help_strings: ["First Strike"],
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_ENEMIES"],
		rules: "Target creature gains <i>First Strike</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['First Strike'])
					asserting size(info.targets) = 1",
	},

	"Oil of Anointing": {
		name: "Oil of Anointing",
		type: "spell",
		is_response: false,
		cost: 2,
		loyalty_cost: 2,
		set: "core",
		rarity: 0,
		school: "@eval FAITH",
		portrait: "oil-of-anointing.png",
		artist: "lordbob",
		sound_resolve: "gameplay/spell_bless",
		resolve_delay: 12,
		resolve_effect: 'impact_no_shake',
		resolve_impact: {
			type: 'endurance_impact',
			custom_color: [1.0, 1.0, 0.0],
		},
		resolve_launch: { type: 'endurance_launch' },
		help_strings: ["Cover"],
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_ENEMIES"],
		rules: "Target creature gains +0/+2 and <i>Cover</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		  add(creature.abilities, ['Cover']),
		  add(creature.life, 2),
		] where creature = game.creature_at_loc_or_die(info.targets[0])",

	},

	"Divine Restoration": {
		name: "Divine Restoration",
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 3,
		set: "core",
		rarity: 0,
		school: "@eval FAITH",
		help_strings: ["Restore"],
		portrait: "divine-restoration.png",
		portrait_focus: [487,484],
		portrait_focus_width: 300,
		sound_resolve: "gameplay/spell_bless",
		resolve_delay: 12,
		resolve_effect: 'impact_no_shake',
		resolve_impact: { type: 'endurance_impact' },
		resolve_launch: { type: 'endurance_launch' },
		resolve_projectile: { type: 'endurance_projectile' },
		artist: "lisanguyen",
		rules: "Target creature is <i>Restored</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			target.restore(game)
		]
			where target = game.creature_at_loc_or_die(info.targets[0])
		",

	},

	"Silence": {
		name: "Silence",
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "silence.png",
		portrait_focus: [387,317],
		portrait_focus_height: 240,
		artist: "lucy",
		set: "core",
		rarity: 1,
		rules: "Target creature is Silenced.",
		help_strings: ["Silence"],

		//Silence can technically be used for benefit on friends,
		//but the AI isn't near smart enough to do this reliably.
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		target.silence(game) where target = game.creature_at_loc_or_die(info.targets[0])
		",
		target_particles: [{
				effect: 'sil_zero',
				pos: [32, 40],
				start_anim: {
					delay: 0.233,
					duration: .5,
					attr: {
//						emission_rate: ?,
						scale_time: 0.2,
//						time_to_live: ?,
					},
				},
				end_anim: {
					delay: 1,
					duration: 2,
					attr: {
//						emission_rate: ?,
						scale_time: 3,
//						time_to_live: ?,
					},
				},
				fade_time: 2.1,
			},
		],

	},

	"Hymn to the Goddess": {
		name: "Hymn to the Goddess",
		type: "spell",
		is_response: true,
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		portrait: "hymn-to-the-goddess.png",
		portrait_focus: [200,187],
		portrait_focus_height: 120,
		artist: "stephenwang",
		set: "core",
		rarity: 2,
		rules: "All enemy creatures are <i>Silenced</i>.",
		help_strings: ["Silence"],
		on_play: "def(class game_state game, class message.play_card info) ->commands
			[
				target.silence(game)
			|
			target <- game.creatures,
			info.player_index != target.controller,
			target.is_building = false
			]
		",

	},

    "Radient Guardian": "Radiant Guardian",
    
    "Radiant Guardian": {
		name: "Radiant Guardian",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "radient-guardian.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval FAITH",
        is_response: true,
		creature: {
			game_sounds: "warrior_aether",
			attack: 4,
			life: 4,
            passive_abilities: [{
				name: "Radiant Aura",
				rules: "Adjacent Allies have <i>Cover</i>",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller and game.locs_adjacent(creature.loc, target.loc),
				    [target.add_ability_static_duration('Cover')])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		},
	},
    
    "Orin's Phalanx": {
		name: "Orin's Phalanx",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "orins-phalanx.png",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			game_sounds: "warrior_aether",
			tags: ['Human', 'Warrior'],
			image_num: 51,
			abilities: ['First Strike'],
			attack: 8,
			life: 4,
		},
	},
    
	"Inquisition": {
		name: "Inquisition",
		set: "core",
		rarity: 1,
		type: "spell",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FAITH",
        is_instant: true,
		portrait: "inquisition.png",
		artist: "eleazzaar",
		rules: "Select a card from your opponent's hand. That card is discarded.",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		if(info.choices,
		([
			game.opponent_obj.discard_visible(game, game.opponent_obj.hand[info.choices[0]]),
			set(game.opponent_obj.hand, filter(game.opponent_obj.hand, index != info.choices[0])),
		]
			asserting size(info.choices) = 1, info.choices[0] >= 0, info.choices[0] < size(game.opponent_obj.hand) | [info.choices, game.opponent_obj.hand]),

		if(game.opponent_obj.hand, game.set_current_choice({
			card: me,
			info: info,
			text: 'Choose which card your opponent will discard',
			options: map(game.opponent_obj.hand, construct('choice.card', {
				card: value,
				tag: index,
			}))
		}))
		)",
	},
	"Heal": "Blessing of Endurance",

	"Blessing of Endurance": {
		name: "Blessing of Endurance",
		set: "core",
		rarity: 0,
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		sound_resolve: "gameplay/spell_bless",
		resolve_delay: 12,
		resolve_effect: 'impact_no_shake',
		resolve_impact: { type: 'endurance_impact' },
		resolve_launch: { type: 'endurance_launch' },
		resolve_projectile: { type: 'endurance_projectile' },
		school: "@eval AETHER",
		portrait: "blessing-of-endurance.png",
		portrait_focus: [234,133],
		portrait_focus_height: 120,
		artist: "lisanguyen",
		rules: "Target creature gets +0/+3.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).life, 3)
					asserting size(info.targets) = 1",
	},
    
    "Prayer of the Valorous": {
		name: "Prayer of the Valorous",
		set: "core",
		rarity: 0,
		type: "spell",
		cost: 3,
		loyalty_cost: 0,
		portrait: "prayer-of-the-valorous.png",
		school: "@eval FAITH",
		is_response: true,
		sound_resolve: "gameplay/spell_bless",
		rules: "Your creatures gain attack equal to your &AElig;ther level until end of turn.",
		on_play: "def(class game_state game, class message.play_card info) ->commands map(game.creatures, creature, if(info.player_index = creature.controller and (not creature.is_land) and (not creature.is_building), 
        [
			creature.apply_effect_until_end_of_turn('attack', game.players[info.player_index].get_resource_level(FAITH))
		]))",
	},
    
	"Rihn, Incarnate": {
		name: "Rihn, Incarnate",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "rihn-incarnate.png",
		portrait_focus: [387,317],
		portrait_focus_height: 240,
		artist: "lucy",
		cost: 10,
		loyalty_cost: 4,
		school: "@eval FAITH",
		hero: true,
		creature: {
			tags: ['Goddess', 'Avatar'],
			abilities: ['Indestructible'],
			attack: 15,
			life: 15,
			triggered_abilities: [{
				name: "Obliteration",
                rules: "When Rihn deals damage to a creature, that creature is obliterated.",
				on_deal_damage: "def(class creature creature, class game_state game, class creature target, int damage, null|class animation.creature_attack_hint hint=null) ->commands
					if(damage > 0 and target.is_building = false, set(target.obliterated, true))
				",
			}],
		}
	},

	"Inquisitor": {
		name: "Inquisitor",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "inquisitor.png",
		portrait_focus: [355,213],
		portrait_focus_height: 240,
		artist: "lucy",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval FAITH",
		help_strings: ["Silence"],
		creature: {
			game_sounds: "soldier_mace",
			tags: ['Human'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			portrait_y_offset: 20,
			image_num: 25,
			attack: 5,
			life: 6,
			move: 1,
            triggered_abilities: [{
				name: "Silence Heretic",
				rules: "When Inquisitor deals damage to a creature, that creature is Silenced.",
				on_deal_damage: "def(class creature creature, class game_state game, class creature target, int damage, null|class animation.creature_attack_hint hint=null) ->commands
                if(not target.is_building and damage>0,
			    [
				target.silence(game),
				])",
			}],
		}
	},
    
    "Rihn's Crusader": {
		name: "Rihn's Crusader",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "rihns-crusader.png",
		portrait_focus: [355,213],
		portrait_focus_height: 240,
		cost: 6,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			game_sounds: "warrior_female",
			tags: ['Human', 'Warrior'],
			attack: 8,
			life: 6,
            passive_abilities: [{
				name: "Holyland Zeal",
				rules: "Rihn's Crusader has +1/+1 for each &AElig;ther land in the lane.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[  
                    creature.apply_static_effect('attack', count(game.lands, value.loc[0] = creature.loc[0] and (5 in value.school))),
                    creature.apply_static_effect('life_shield', count(game.lands, value.loc[0] = creature.loc[0] and (5 in value.school)))
                ]"
			}],
		}
	},

	"Rihn's Anointed": {
		name: "Rihn's Anointed",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "rihns-anointed.png",
		artist: "lucy",
		portrait_focus: [355,462],
		portrait_focus_width: 80,
		portrait_focus_height: 120,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		flavor_text: "For no harm shall befall the
devout followers of Rihn;
naught shall touch her chosen ones.",
		creature: {
			game_sounds: "magic_user",
			tags: ['Human'],
			abilities: ['Cover'],
			portrait_y_offset: 160,
			portrait_scale: 0.4,
			attack: 4,
			life: 3,
		}
	},
    
    "Tulnun Friar": {
		name: "Tulnun Friar",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "tulnun-friar.png",
		portrait_focus: [355,462],
		portrait_focus_width: 80,
		portrait_focus_height: 120,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
        creature:{
			tags: ['Human', 'Cleric'],
			image_num: 38,
			portrait_y_offset: 160,
			portrait_scale: 0.4,
			attack: 4,
			life: 3,
			move: 1,
            triggered_abilities: [{
				name: "Recall Prayer",
				rules: "When you summon Tulnun Friar, gain a copy of the topmost &AElig;ther spell in your crypt.",
				hidden_on_creature: true,
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(find(game.players[game.current_player_index].discard_pile, value.type = 'spell' and (5 in value.school)), 
                    add(game.players[(creature.controller)].hand, [(find_or_die(reverse(crypt), value.type = 'spell' and (5 in value.school))).name]) where crypt =game.players[game.current_player_index].discard_pile, 
                    null),
                ]",
            }],
		}
	},

	"Rihn's Anointed#premium": {
		name: "Rihn's Anointed",
		_internal_id: "Rihn's Anointed#premium",
//		set: "core",
		rarity: 2,

		animation_sequence: [
			{start_focus: [0.447,0.475], end_focus: [0.447,0.475], start_zoom: 0.0, end_zoom: 0.8, cycles: 1600},
			{start_focus: [0.447,0.812], end_focus: [0.447,0.35], start_zoom: 0.75, end_zoom: 0.75, cycles: 1600},
			{start_focus: [0.8,0.3], end_focus: [0.2,0.45], start_zoom: 0.75, end_zoom: 0.75, cycles: 1600},
		],
	},

	"Sul-Dahl Devout": "Disciple",

	"Disciple": {
		name: "Disciple",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "sul-dahl-devout.png",
		artist: "lisanguyen",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human'],
			game_sounds: "warrior_female",
			attack: 5,
			life: 3,
			move: 1,
		}
	},
    
    "Farmlands": "Pasture",
	
	"Pasture": {
		name: "Pasture",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FAITH",
		portrait: "farmlands.png",
		portrait_focus: [436,571],
		portrait_focus_width: 250,
		artist: "stephenwang",
		rules: "Creatures in this tile have +0/+2",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",

		creature: {
			tags: ["Terrain"],
			is_land: true,
            portrait: "farmlands.png",

			static_ability_effect: "if(creature.loc = target.loc and not target.is_land, target.apply_static_effect('life_shield', 2))",
		},
	},

	"Shrine of Peace": "Dawn Obelisk",
	
	"Dawn Obelisk": {
		name: "Dawn Obelisk",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "dawn-obelisk.png",
		portrait_focus: [381,541],
		portrait_focus_height: 60,
		artist: "lucy",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FAITH",
		help_strings: ['Temporary Lifegain'],
		creature: {
			tags: ["Shrine"],
			abilities: ["Fragile"],
			life: 8,
			level: 2,
			is_land: true,
			portrait_y_offset: 80,
			image_num: 4,
            passive_abilities: [{
				name: "Focused Light",
				rules: "Your creatures in this lane have +3 life.",
				effect: 'lane_influence_effect',
				effect_args: {
					color_dark: [0.0,0.0,0.2],
					color_mid: [0.7,0.7,0.9],
					color_light: [1.0,1.0,0.9],
					brighten: true,
					alpha: 72,
				},
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller and creature.loc[0]=target.loc[0],
				    [target.apply_static_effect('life_shield', 3)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	},
    
    "Active Temple": "Temple of Many Blessings",
	
	"Temple of Many Blessings": {
		name: "Temple of Many Blessings",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "active-temple.png",
		cost: 6,
        loyalty_cost: 2,
		school: "@eval FAITH",
		creature: {
			tags: ["Temple"],
			is_land: true,
			image_num: 4,
            triggered_abilities: [{
				name: "Constant Devotion",
				rules: "At the start of your turn, you and your creatures gain 1 life.",

                on_begin_turn: "def(class creature creature, class game_state game) ->commands
				[
			    if(game.current_player = creature.controller, [
					add(game.players[creature.controller].life, 1),
					[add(c.life,1) | c <- game.creatures, c.is_building = false, c.controller = creature.controller],
					]),
//					add(game.animation_hints, [construct('animation.creature_effect_hint', { type: 'creature_effect_hint', creature: creature, effect: 'temple_mb_zero' })]), // FIXME no `anim_type` in `creature_effect_hint` and passing the name of a particle into `effect` will not work now.
				]",
			}],
		}
	},

	"Deep Water": {
		name: "Deep Water",
		type: "creature",
//		set: "core",
		portrait: "deepwater.png",
//		artist: "kwandulin",
		rarity: 0,
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FAITH",
		stretch_image_edges: false,
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Terrain"],
			is_land: true,
			passive_abilities: [{
				name: "Stopswift",
				rules: "Creatures, except for <i>Flying</i> ones, lose <i>Swift</i> ability in this land and the tile preceding it.",
				static_effect: "def(class game_state game, class creature land) ->commands
				[[
					target.apply_creature_effect(game, apply_fcn, remove_fcn, {old_abilities: target.abilities}, duration)
					where apply_fcn = def(class game_state game, class creature creature, map info)->commands [
						set(creature.abilities, filter(creature.abilities, value != 'Swift'))
					]
					where remove_fcn = def(class game_state game, class creature creature, map info)->commands [
						add(creature.abilities, [string] <- filter(info.old_abilities, value = 'Swift'))
					]
					where duration = if(target.loc = land.loc, DURATION_BEGINNING_NEXT_TURN, DURATION_STATIC)					
				]| target <- game.creatures,
					target.loc in [land.loc, preceding_loc]
						where preceding_loc = [land.loc.x, land.loc.y + switch(target.controller, 0, -1, 1)],
					'Swift' in target.abilities,
					'Flying' not in target.tags
				]"
			}]
		}
	},

	"Flash Flood": {
		name: "Flash Flood",
		type: "spell",
		set: "core",
		portrait: "deepwater.png",
		artist: "kwandulin",
		rarity: 1,
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FAITH",
		is_response: true,
		subcard_tips: ["Deep Water"],
		target_particles: [
			{
				effect: 'rain_one_droplets',
				pos: [32, 0],
				zorder: 1,
			}, {
				effect: 'rain_one_clouds',
				pos: [32, 0],
				zorder: 2,

				// immediately after starting, over 1 seconds scale time to '0.08'.
				// note this start_anim attribute is optional
				start_anim: {
					delay: 0.0,
					duration: 1.0,
					attr: {
						scale_time: 0.08,
					},
				},

				// 3 seconds after ending, over 1.8 seconds scale time to '0.889'.
				// note this end_anim attribute is optional
				end_anim:

				{
					delay: 3.0,
					duration: 1.8,
					attr: {
//						emission_rate: 14,
						scale_time: 0.889,
//						time_to_live: 2,
					},
				},

// 				// `end_anim` is currently typed PlayCardParticlesAnim, in the future
// 				// it could be interesting to have the possibility of having it typed
// 				// [PlayCardParticlesAnim] as well, or allowing it to perform as
// 				// non-step non-linear easeInOut.
// 				[
// 					{
// 						delay: 0.0,
// 						duration: 2.0,
// 						attr: {
// 							scale_time: 1.0,
// 						},
// 					},
// 					{
// 						delay: 2.0,
// 						duration: 2.0,
// 						attr: {
// 							scale_time: 8.0,
// 						},
// 					},
// 				],

				// system still emitting 2.35s after the card dies?
				fade_time: 2.35,
			},
		],
		sound_resolve: 'gameplay/spell_lightning_strike',

		rules: "Place a neutral <i>Deep Water</i> terrain in target tile, destroying any existing land in the tile. Any building or creature present takes 1 damage or, if Armored, loses 1 life for each point of armor.",
		possible_targets: "all_tiles_as_possible_targets",
// If we want to prevent targetting locations where a creature has Cover:

//		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
//			if(size(targets) > 0, null, filter(game.all_locs, 'loc',
//				(creature = null) or creature.is_valid_target(game, avatar.controller, me)
//				where creature = game.creature_at_loc(loc)))"
//		)",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			if(target_construct, [set(target_construct.destroyed, true),
			add(game.animation_hints, [construct('animation.creature_particle_hint', {
				type: 'creature_particle_hint', particle_type: 'rain_one_fog',
				creature: target_construct, target: target_construct, sound: null, delay: 0,
				reverse_path: false, zorder: 0,
			})])]);
			game.summon_land(lib.citadel.create_creature('Deep Water', { loc: info.targets[0] })),
			if(creature,
				if(creature.armor < 1, creature.inflict_damage(game, 1),
					creature.direct_life_loss(creature.armor))),
		] where target_construct = game.land_at_loc(info.targets[0])
		  where creature = game.creature_at_loc(info.targets[0])",
	},

	"High Guard": {
		name: "High Guard",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "high-guard.png",
		artist: "lisanguyen",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			game_sounds: "warrior_aether",
			tags: ['Human'],
			abilities: ['First Strike'],
			attack: 4,
			life: 5,
			move: 1
		}
	},

	"Rihn's Martyr": {
		name: "Rihn's Martyr",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "rihns-martyr.png",
		portrait_focus: [563,521],
		portrait_focus_width: 250,
		artist: "stephenwang",
		subcard_tips: ["Monument"],
		tips: [{
			title: "Monument",
			text: "The <i>Monument</i> created upon the Martyr's death is a land which has no abilities, but offers devotion to (Aether)&AElig;ther.",
		}],
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human'],
			image_num: 25,
			attack: 3,
			life: 3,
			move: 1,
                
                triggered_abilities: [{
				name: "Canonization ",
				rules: "When Rihn's Martyr dies, an (Aether)&AElig;ther Monument Land is summoned in the lane she was in.",

				on_die: "def(class creature creature, class game_state game) ->commands
				if(game.is_loc_on_board(target_loc),
				game.summon_land(lib.citadel.create_creature('Monument', { controller: creature.controller, loc: target_loc, card_name: 'Monument' }))
			)
				where target_loc = game.players[creature.controller].free_construct_loc_in_row(game, creature.loc[0])",
			}],
		}
	},

	"Temple Guard": {
		name: "Temple Guard",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "temple-guard.png",
		artist: "lucy",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human'],
			game_sounds: "soldier_blade",
			abilities: ['First Strike'],
			image_num: 26,
			attack: 3,
			life: 4,
			move: 1
		}
	},
	
	"Weakness": {
		name: "Weakness",
		set: "core",
		rarity: 0,
		type: "spell",
        tags: ['Curse'],
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "weakness.png",
		artist: "lordbob",
		rules: "Target enemy creature gets -3/-0.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, -3)
					asserting size(info.targets) = 1",

	},
	
	"Rokh": {
		name: "Rokh",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "rokh.png",
		portrait_focus: [405,189],
		portrait_focus_height: 290,
		cost: 5,
		loyalty_cost: 2,
		school: "@eval FAITH",
		artist: "lucy",
		text_color: [0,0,0],
		creature: {
			portrait_y_offset: 20,
			tags: ['Flying'],
			image_num: 44,	// placeholder
			attack: 7,
			life: 5,
			abilities: ['Swift'],
			sound_walk: "creatures/move-wings.wav",
			sound_summoned: "creatures/roc-screech.wav",
		}
	},
    "Rider of the Thorn": {
		name: "Rider of the Thorn",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "rider-of-the-thorn.png",
		cost: 4,
		school: "@eval FAITH",
		creature: {
			tags: ['Mounted'],
			abilities: ['Swift'],
			attack: 5,
			life: 3,
		}
	},

	"Smite the Defilers": {
		name: "Smite the Defilers",
		set: "core",
		rarity: 1,
		type: "spell",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "smite-the-defilers.png",
		portrait_focus: [200,187],
		portrait_focus_height: 120,
		artist: "stephenwang",
		sound_resolve: 'gameplay/spell_lightning_strike',
		resolve_launch: { type: "entropia_launch" },
		resolve_impact: { type: "lightning_impact" },
		resolve_effect: "impact",
		is_response: true,
		rules: "Destroy target enemy creature in the same lane as an Aether land you control.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		 if(size(targets) > 0, null,
		  [target.loc | target <- game.creatures,
		                target.controller != game.current_player_index,
						target.is_building = false,
						target.is_valid_target(game, avatar.controller, me),
						target.loc[0] in lanes]
			where lanes = [construct.loc[0] |
			               construct <- game.lands,
						   construct.controller = game.current_player_index,
						   5 in construct.school
                           ]
		)",

		_invalid_target_reason: "def(class game_state game, class creature avatar, [Loc] targets, class creature target) -> null|string
			if(find(game.lands, value.controller = game.current_player_index and (5 in value.school) and value.loc[0] = target.loc[0]) = null,
				'You must control an &AElig;ther land in this lane to cast this spell here'
			)
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		  set(victim.destroyed, true)
		  where victim = game.creature_at_loc_or_die(info.targets[0])"
	},

	"Tree of Life": {
		name: "Tree of Life",
		type: "creature",
		set: "core",
		rarity: 1,
		cost: 4,
		school: "@eval FAITH",
		portrait: "tree-of-life.png",
		artist: "stephenwang",
		creature: {
			is_land: true,
			abilities: ['Fragile'],
			triggered_abilities: [{
				name: "Gift of Life",
				rules: "You have +8 life. This life is lost when Tree of Life is destroyed.",

				on_summoned: "def(class creature creature, class game_state game) ->commands [
					if(creature.controller >= 0, add(game.players[creature.controller].life, 8))
				]",

				on_die: "def(class creature creature, class game_state game) ->commands [
					if(creature.controller >= 0, add(game.players[creature.controller].life, -8))
				]",
			}],

		},
	},





	"Crusader of Rihn": {
		name: "Crusader of Rihn",
		type: "creature",
		portrait: "crusader-of-rihn.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 0,
			attack: 8,
			life: 10,
			move: 2,
		}
	},

	"Cleric": {
		name: "Cleric",
		type: "creature",
		portrait: "cleric.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 0,
		rules: "At the start of each turn, each creature you control in this lane gains one life.",
		creature: {
			tags: ['Human'],
			image_num: 26,
			attack: 2,
			life: 4,
			move: 1,
			overlays: [ { image_num: 21 } ],
			on_begin_turn: "def(class game_state game) ->commands
			  [add(creature.life, 1)
			   | creature <- game.creatures,
			     creature.controller = controller,
				 creature.loc[0] = loc[0]]",
		}
	},

	"Temple of the Blessed": {
		name: "Temple of the Blessed",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		portrait: "temple-of-the-blessed.png",
		rarity: 2,
		rules: "Creatures you control have +1 life.",
		creature: {
			tags: ["Temple"],
			life: 6,
			is_land: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building), target.apply_static_effect('life_shield', 1))"
		}
	},
	
	"In the Blink of an Eye": {
		name: "In the Blink of an Eye",
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 1,
		school: "@eval FAITH",
		rarity: 1,
		rules: "Target creature gains +2 life.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).life, 2)
					asserting size(info.targets) = 1",
	},
	
	"Repentance": {
		name: "Repentance",
		type: "spell",
		is_response: true,
		cost: 2,
		loyalty_cost: 1,
		school: "@eval FAITH",
		rarity: 0,
		rules: "All creatures get -2 attack this turn.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  map(game.creatures, creature, if(not creature.is_building, creature.apply_effect_until_end_of_turn('attack', -2)))",
	},
	
	"Shrine of the Blessed": {
		name: "Shrine of the Blessed",
		type: "Shrine",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Creatures you control in this lane have +1 life.",
		creature: {
			tags: ["Shrine"],
			life: 6,
			is_land: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.apply_static_effect('life_shield', 1))",
		}
	},

	"Shrine of Sanctity": {
		name: "Shrine of Sanctity",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Creatures you control in this lane have Cover.",
		creature: {
			tags: ["Shrine"],
			life: 6,
			is_land: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.add_ability_static_duration('Cover'))"
		}
	},

	"Shrine of the Devout": {
		name: "Shrine of the Devout",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Creatures you control in this lane have First Strike.",
		creature: {
			tags: ["Shrine"],
			life: 6,
			is_land: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.add_ability_static_duration('First Strike'))"
		}
	},

	"Sanctuary of the Faithful": {
		name: "Sanctuary of the Faithful",
		type: "creature",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval FAITH",
		rarity: 0,
		rules: "When a creature you control is destroyed, return it to your hand instead",
		creature: {
			tags: ["Sanctuary"],
			life: 8,
			level: 2,
			is_land: true,
			image_num: 4,
			on_another_creature_died: "def(class game_state game, class creature victim) ->commands
			  if(victim.controller = me.controller,
				 game.return_from_graveyard_to_hand(victim))"
		}
	},
	
	"Walled Sanctum": {
		name: "Walled Sanctum",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 1,
		creature: {
			abilities: ['Ranged'],
			armor: 1,
			life: 8,
			attack: 4,
			image_num: 0,
			is_building: true,
		}
	},
	
	"Peasant Bowman": {
		name: "Peasant Bowman",
		type: "creature",
		portrait: "peasant-bowman.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 1,
		creature: {
			tags: ['Human'],
            abilities: ['Ranged'],
			attack: 4,
			life: 4,
			move: 1,
		}
	},
	
	"Spirit Punch": {
		//all sorts of deprecated
		name: "Spirit Punch",
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 1,
		is_response: true,
		possible_targets: "all_creatures_as_possible_targets",
	},

	"Grand Lull": {
		//deprecated
		name: "Grand Lull",
		type: "spell",
		cost: 2,
		loyalty_cost: 4,
		school: "@eval FAITH",
		rarity: 1,
		is_response: true,
	},
	
	"Elrohir the Penitent": {
		name: "Elrohir the Penitent",
		type: "creature",
		portrait: "elrohir-the-penitent.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 1,
		hero: true,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 0,
			abilities: ['Charge', 'Cover', 'First Strike'],
			attack: 8,
			life: 8,
			move: 2,
		}
	},

	"Burden of Faith": {
		name: "Burden of Faith",
		type: "spell",
		cost: 1,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Target creature gets -1 move.",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(class game_state game, class creature target) ->commands [add(target.move, -1)]",
	},
	
	"Wrath of Gord": {
		name: "Wrath of Gord",
		type: "spell",
		is_response: true,
		cost: 1, //Since it only delays the enemy, it seems to me it should be a fairly cheap card.
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 1,
		rules: "Move target enemy creature to the start of its lane.", //Gord was an elementary school principal who had to haul a kid back across a few city blocks, kicking and screaming, after the kid ran away. Could you haul a stranger's screaming child across town without getting the cops called? He could, and, quite frankly, it worried him a bit. "What if I'd been a kidnapper?"
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, 
			not creature.is_building, 
			creature.controller != avatar.controller, 
			game.creature_at_loc([creature.loc[0], if(creature.direction_moving < 0, game.columns-1, 0)]) = null,
			creature.is_valid_target(game, avatar.controller, me)])",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			set(target.loc, [target.loc[0], if(target.direction_moving < 0, game.columns-1, 0)])
			where target = game.creature_at_loc_or_die(info.targets[0])",
	},

	"Leap of Faith": {
		name: "Leap of Faith",
		type: "spell",
		cost: 1,
		loyalty_cost: 1,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Target creature you control gains Flying this turn.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  game.creature_at_loc_or_die(info.targets[0])
		      .add_ability_until_end_of_turn('Flying')",

	},

	"Look on my Works": {
		name: "Look on my Works",
		type: "spell",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Target creature gets +2 life, -1 attack, and -1 move for each Aether creature you control.",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(class game_state game, class creature target) ->commands
			[add(target.life, 2*faiths), add(target.attack, -1*faiths), add(target.move, -1*faiths)]
			where faiths = count(game.creatures, value.controller = game.current_player_index and (FAITH in value.school))
		",
	},

	"Casai, Angel of Vengeance": {
		name: "Casai, Angel of Vengeance",
		hero: true,
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 2,
		rules: "Casai may be summoned only in a lane where you control a faith construct. When Casai is summoned, destroy all creatures in her lane.",

		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 filter(game.players[avatar.controller].summoning_locs(game, creature),
			        find(game.lands, value.controller = avatar.controller and value.loc[0] = context.value[0] and (FAITH in value.school)))
			 asserting creature
			)",
		
		creature: {
			tags: ['Angel'],
			image_num: 33,
			attack: 8,
			life: 8,
			move: 1,

			on_summoned: "def(class game_state game) ->commands [
				[set(creature.destroyed, true) | creature <- game.creatures, me != creature, not creature.is_building, creature.loc[0] = me.loc[0]]
			]",
		},
	},
	
	"Shrine of the Pieous": {
		name: "Shrine of the Pieous",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Friendly creatures in this lane gain the ability 'Lesser Heal'",
		creature: {
			tags: ["Shrine"],
			life: 8,
			level: 2,
			is_land: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.add_activated_ability_static_duration({
				name: 'Lesser Heal',
				cost: 1,
				school: FAITH,
				rules: 'Heal creature of +1 wound.',
				on_play: 'def(class game_state game, class creature creature, class message.play_card info) ->commands
					add(creature.life, 1)'
			}))"
		}
	},

	"Paladin": {
		name: "Paladin",
		type: "creature",
		portrait: "paladin.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 1,
			attack: 6,
			life: 6,
			move: 2,

			activated_abilities: [{
				name: 'Shield of Faith',
				cost: 1,
				school: "@eval FAITH",
				rules: "Paladin gains Cover until end of turn",
				on_play: "def(class game_state game, class message.play_card info) ->commands [
					creature.add_ability_until_end_of_turn('Cover')
				] where creature = info.get_creature(game)",
				is_response: true,
			}],
        }
    },          

}
