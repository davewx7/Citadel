{
	"Spell Warden": {
		name: "Spell Warden",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "spell-warden.png",
		artist: "lisanguyen",
		cost: 3,
		school: "@eval MINERVA",

		creature: {
			game_sounds: "magic_user",
			attack: 3,
			life: 3,
			triggered_abilities: [{
				name: 'Spellbound',
				rules: "Gets +1/+1 when you cast a spell",
				on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(info.player_index = creature.controller and info.card and info.card.type = 'spell', [
						add(creature.attack, 1),
						add(creature.life, 1),
					])
				",
			}],
		}
	},

	"Fate Seer": {
		name: "Fate Seer",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "fate-seer.png",
		portrait_focus: [482,260],
		portrait_focus_width: 200,
		portrait_focus_height: 200,
		cost: 4,
		school: "@eval MINERVA",

		help_strings: ["Unblocked"],

		creature: {
			game_sounds: "magic_user",
            tags: ['Human'],
			attack: 4,
			life: 4,
			passive_abilities: [{
                name: 'Seer',
                rules: "While unblocked, your opponent's hand is revealed.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.is_unblocked(game),
				   game.players[creature.controller].add_static_effect(
				      construct('static_effect', {
					    apply_fn:  def(class player player, map info)->commands add(player.can_see_enemy_hand, 1),
						revert_fn: def(class player player, map info)->commands add(player.can_see_enemy_hand, -1)
					})))
				",
			}],
		},
 },
 
 "Ilz Riddlespinner": {
		name: "Ilz Riddlespinner",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "ilz-riddlespinner.png",
		artist: "lisanguyen",
		cost: 6,
        loyalty_cost: 2,
		school: "@eval MINERVA",

		creature: {
			game_sounds: "magic_user",
			attack: 5,
			life: 5,
			passive_abilities: [{
				name: "Light and Shadow",
				rules: "Enemies engaged with <i>Ilz Riddlerspinner</i> have -4 armor and -4 attack.",
				static_effect: "def(class game_state game, class creature creature) ->commands
					if(not creature.targets_attacking(game) = [],
                    [creature.targets_attacking(game)[0].apply_static_effect('armor', -4),
                     creature.targets_attacking(game)[0].apply_static_effect('attack', -4)])
				",
			}],
		},
 },
 
 "Dream Eater": {
		name: "Dream Eater",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "dream-eater.png",
		artist: "wendyyoon",
		cost: 3,
        loyalty_cost: 0,
		school: "@eval MINERVA",

		creature: {
			game_sounds: "magic_user",
			sound_impact: "ethereal",
			attack: 5,
			life: 2,
			passive_abilities: [{
                name: 'Dream Feast',
                rules: "While unblocked, your your hand size is at +1 and your enemy's hand size is at -1",
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.is_unblocked(game),
				   [game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}),
                    if(creature.controller >= 0,
				   game.players[(creature.controller+1)%2].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					{}))])
				",
			}],
		},
 },

 "Fire Elemental": {
		name: "Fire Elemental",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "fire-elemental.png",
		portrait_focus: [370,175],
		portrait_focus_width: 200,
		portrait_focus_height: 200,
		artist: "lisanguyen",
		cost: 5,
		loyalty_cost: 1,
        is_channeled: true,
        
		school: "@eval MINERVA",
		creature: {
			attack_imprint: "effects/charred-effect-mask.png",
			game_sounds: "fire_creature",
            sound_summoned: "creatures/summon-flesh-golem.wav",
            sound_death: "creatures/death-flesh-golem.wav",
			sound_impact: "ethereal",
			tags: ['Elemental', 'Firebound'],
			attack: 5,
			life: 5,
            
            triggered_abilities: [{
				name: "Raging Blaze",
				rules: "Has <font tag='attack'>+2X </font><font tag='life'>  +X </font>",
				tag: "burning_effect",
				hidden_on_creature: true,
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    add(creature.attack, creature.channel *2),
                    add(creature.life, creature.channel *1),
                ]",
            },
            ],
		}
	}, //end Fire Elemental

// Heroes
	"Eji, the Summoner": "Eji, the Archmage",
	"Eji, the Archmage": {
		name: "Eji, the Archmage",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "eji-the-summoner.png",
		artist: "lisanguyen",
		cost: 10,
		loyalty_cost: 4,
		school: "@eval MINERVA",
		hero: true,
		creature: {
			game_sounds: "spellcaster_male",
			tags: ['Human', 'Mage'],
			attack: 10,
			life: 10,

			triggered_abilities: [
			{
				name: 'Caster',
				rules: 'When you cast a spell, draw a card.
',
				on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller and info.card and info.card.type = 'spell',
					   player.draw_cards(game, 1))
				",
			},
			],
                             
			passive_abilities: [
			{
                name: 'Wizardry',
                rules: "Your spells have a minimum cost of 0",
				particle_effects: ['eji'],
				static_effect: "def(class game_state game, class creature creature) ->commands
				   game.players[creature.controller].add_static_cost_filter(
				     construct('cost_filter', {
						filter_loyalty_cost: 'def(class player p, class card_base card, int cost) ->int
							if(card.type = q(spell), cost + card.cost, cost)
						',

						filter_base_cost: 'def(class player p, class card_base card, int cost) ->int
							if(card.type = q(spell), 0, cost)
						',
					 })
				   )",
			}
			],
		}
	},

// Basic foot soldiers

	"Cunning Wisp": {
		name: "Cunning Wisp",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 3,
		artist: "lucy",
		loyalty_cost: 0,
		portrait: "cunningwisp.png",
		portrait_focus: [515,452],
		portrait_focus_width: 250,
		portrait_focus_height: 100,
		school: "@eval MINERVA",
		is_response: true,
		creature: {
			game_sounds: "wisp",
			sound_impact: "ethereal",
			attack: 4,
			life: 1,

			portrait_x_offset: 90,
			portrait_y_offset: 280,
			portrait_scale: 0.6,

			activated_abilities: [
				{
					name: 'Switch',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval MINERVA",
					portrait: "cunningwisp.png",
					rules: "Exchanges position with another of your creatures.",
					is_response: true,
					possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and value.controller = creature.controller), value.loc)
						)
					",

					on_play: "
					 def(class game_state game, class message.play_card info) ->commands [
					 	creature.set_loc(game, info.targets[0], 'blink'),
						game.creature_at_loc_or_die(info.targets[0]).set_loc(game, creature.loc, 'blink'),
					] where creature = info.get_creature(game)"
				}
			]
		}
	},
		
	"Ilz Apprentice": {
		name: "Ilz Apprentice",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "ilz-apprentice.png",
		artist: "lordbob",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval MINERVA",
		creature: {
			game_sounds: "spellcaster_male",
			tags: ['Human', 'Mage'],
			attack: 2,
			life: 3,
		}
	},

	"Acolyte": {
		name: "Acolyte",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "acolyte.png",
		portrait_focus: [356,347],
		portrait_focus_width: 180,
		portrait_focus_height: 120,
		artist: "lucy",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval MINERVA",
		rules: "When you cast Acolyte, draw a card.",
		on_play: "def(class game_state game, class message.play_card info) ->commands [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			game_sounds: "magic_user",
			tags: ['Human', 'Mage'],
			portrait_y_offset: 210,
			portrait_scale: 0.6,

			voice_summoned: "voices/acolyte/summon",
			voice_die: "voices/acolyte/death",
			voice_redemption: "voices/acolyte/redemption",
			voice_battle_win: "voiecs/acolyte/battle-win",
			voice_battle_lose: "voiecs/acolyte/battle-lose",
            
			attack: 3,
			life: 3,
		}
	},

	"Morphling": {
		name: "Morphling",
		rarity: 1,
		set: "core",
		portrait: "morphling.png",
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval MINERVA",
		creature: {
			game_sounds: "wisp",
			attack: 3,
			life: 6,
			activated_abilities: [{
				name: 'Transform',
				cost: 1,
                once_per_turn: false,
				school: "@eval MINERVA",
                is_instant: true,
				rules: "Switch attack and life",
				on_play: "def(class game_state game, class message.play_card info) ->commands [
					set(creature.attack, creature.life),
					set(creature.life, creature.attack),
				] where creature = info.get_creature(game)"
			}],
		},
	},

	"Mage's Apprentice": {
		name: "Mage's Apprentice",
		rarity: 1,
		type: "creature",
		portrait: "mages-apprentice.png",
		artist: "lisanguyen",
		set: "core",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval MINERVA",

		creature: {
			game_sounds: "magic_user",
			attack: 4,
			life: 3,

			triggered_abilities: [{
				name: "Magic Missile",
				rules: "When summoned you may deal 2 damage to a target creature or building.",
				hidden_on_creature: true,
				on_summoned: "def(class creature creature, class game_state game) ->commands
					//Note: using trigger_ability_cast() allows the player to
					//not use the ability. Use trigger_ability_cast_mandatory()
					//to require them to use it if possible.
					game.trigger_ability_cast(creature, {
						name: 'Magic Missile',
						cost: 0,
						school: MINERVA,
						portrait: 'magic-missile.png',
						resolve_effect: 'impact',
						resolve_launch: {
							type: 'hypothermia_launch',
							custom_color: [1.0, 0.0, 1.0],
						},
						resolve_projectile: {
							type: 'hypothermia_projectile',
							custom_color: [1.0, 0.0, 1.0],
						},
						sound_resolve: 'gameplay/spell_magic_missile_release',
						resolve_delay: 8,
					
						rules: q(Deal 2 damage to a target creature or building.),
						possible_targets: q(all_creatures_and_buildings_as_possible_targets),

						ai_flags: [AI_CARD_NEVER_TARGET_FRIENDS],

						on_play: q(def(class game_state game, class message.play_card info) ->commands
						  target.inflict_damage(game, 2)
						  asserting size(info.targets) = 1
						  where target = game.creature_at_loc_or_die(info.targets[0]))
					})
				",
			}],
            
		}
	},

	"Mystic Scholar": {
		name: "Mystic Scholar",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "goddess.png",
		artist: "lucy",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval MINERVA",
		creature: {
			game_sounds: "magic_user",
			activated_abilities: [
				{
					name: 'Mystic End',
					cost: 1,
                    once_per_turn: false,
					school: "@eval MINERVA",
                    is_instant: true,
					rules: "Sacrifice self, replenish your hand",
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						player.draw_cards(game, player.calculate_card_draw(game) - size(player.hand)),
						set(creature.destroyed, true),
					] where player = game.players[creature.controller]
					  where creature = info.get_creature(game)"
				}
			],
			attack: 4,
			life: 4,
		}
	},
    
    "Spirit of Intellect": {
		name: "Spirit of Intellect",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "spirit-of-intellect.png",
		portrait_focus: [402,272],
		portrait_focus_height: 200,
		artist: "lisanguyen",
		cost: 5,
		school: "@eval MINERVA",
		creature: {
			game_sounds: "wisp",
			tags: ['Spirit'],
			sound_impact: "ethereal",
			attack: 0,
			life: 6,
            passive_abilities: [{
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Adviser",
				rules: "+1 hand size",
			},{
				static_effect: "def(class game_state game, class creature creature) ->commands
				[creature.apply_static_effect('attack', size(game.players[creature.controller].hand))
                | target <- game.creatures,
				  (creature = target)
                ]",
				
				name: "Power in Knowledge",
				rules: "Spirit of Intellect gains attack equal to the number of cards in your hand.",
			}],
		}
	},

// Mid range creature
        "Pyromancer": {
		name: "Pyromancer",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "pyromancer.png",
		cost: 4,
		school: "@eval MINERVA",
        flavor_text: "Love is fire, but some love fire more.",
		creature: {
			game_sounds: "spellcaster_male",
			tags: ['Human', 'Mage', 'Firebound'],
            abilities: ['Ranged'],
			attack: 3,
			life: 4,
			
			activated_abilities: [
			{
				name: "Blast",
				cost: 1,
				school: "@eval MINERVA",
				is_response: false,
				once_per_turn: true,
				uses_attack: true,

				rules: "Use this turn's attack to inflict 3 damage on an adjacent creature or building.",
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, game.locs_adjacent(c.loc, creature.loc), c.is_valid_target(game, game.nplayer, me)])
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					target_creature.inflict_damage(game, 3),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])
				  where creature = info.get_creature(game)"
			},
			],
		}
	},
	
	"Blink Mage": {
		name: "Blink Mage",
		set: "core",
		is_response: true,
		rarity: 1,
		type: "creature",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval MINERVA",
		portrait: "blink-mage.png",
		artist: "wendyyoon",
		creature: {
			game_sounds: "magic_user",
			attack_effect: "rebolt_effect",
			activated_abilities: [
				{
					name: 'Blink',
					sound_resolve: 'gameplay/blink',
					cost: 1,
                    once_per_turn: false,
					school: ["@eval MINERVA"],
					is_response: true,
					rules: "Blink to the opposite lane",
					possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], if(game.creature_at_loc(target_loc) = null, [target_loc], []), null)
						where target_loc = [game.rows - creature.loc[0] - 1, creature.loc[1]]
					",
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.set_loc(game, info.targets[0], 'blink')
					] where creature = info.get_creature(game)"
				}
			],
			tags: ['Human', 'Mage'],
			attack: 7,
			life: 7,
		}
	},

//Spells

	"Spell Seal": {
		name: "Spell Seal",
//		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "translocate.png",
		is_response: true,
		cost: 1,
		loyalty_cost: 3,
		rules: "Target creature cannot be targeted by other spells this turn",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  creature.add_ability_until_end_of_turn('Untargetable')
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	
	"Traitor": {
		name: "Traitor",
		rarity: 2,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "translocate.png",
		cost: 3,
		loyalty_cost: 3,
		is_response: true,
		rules: "Remove target creature and put it in your hand.",
		possible_targets: "all_creatures_as_possible_targets",
		
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
                    set(game.creatures, filter(game.creatures, value != c)),
                    if(c.card_name != null, add(game.player_obj.hand, [c.card_name]))
                    
		
		] where c = game.creature_at_loc_or_die(info.targets[0])
		",
	},


	"Translocate": {
		name: "Translocate",
		set: "core",
		rarity: 2,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "translocate.png",
		artist: "lisanguyen",
		cost: 3,
		loyalty_cost: 3,
		is_response: true,
		rules: "Two target non-hero creatures exchange ownership and location. Exhaust the creatures.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(targets) >= 2, null,
			 if(res != null, filter(res, value not in targets))
		     where res = map(filter(game.non_building_creatures, value.is_valid_target(game, avatar.controller, me) and not value.hero), value.loc)
			 )
		",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			a.set_loc(game, b.loc, 'move'),
			b.set_loc(game, a.loc, 'move'),
			set(a.controller, b.controller),
			set(b.controller, a.controller),
            a.exhaust(),
            b.exhaust(),
		] where a = game.creature_at_loc_or_die(info.targets[0])
		  where b = game.creature_at_loc_or_die(info.targets[1])
		",
		target_particles: [{
				effect: 'transloc_zero_a', pos: [32, 64],
				assign_to_one_target: true,
			}, {
				effect: 'transloc_zero_b', pos: [32, 64],
				assign_to_one_target: true,
			},
		],
	},

	"Tactical Blunder": {
		name: "Tactical Blunder",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "tactical-blunder.png",
		artist: "lordbob",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rules: "Change the summoning location of a target creature or building card to another valid target",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null

		if(size(targets) >= 2, null,
		   size(targets) = 1, if(summoning.card, [Loc] :: filter(summoning.card.possible_targets(game, game.players[summoning.player_index].creature_avatar, []) or [], value != summoning.targets[0]), [])
		     where summoning = find_or_die(game.stack, value.stack_id = targets[0][1]),

			map(filter(game.stack, value.card != null and value.card.creature_object != null and value.card.creature_object.is_land = false), [-2, value.stack_id])
		   )
		 ",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			add(game.animation_hints, [construct('animation.redirect_target_hint', {
				stack_id: info.targets[0][1],
				new_targets: [info.targets[1]],
			})]),
			set(find_or_die(game.stack, value.stack_id = info.targets[0][1]).targets, [info.targets[1]])
		]
		 ",
		wide_particles: [{
				effect: 'tb_one',
				hidden_in_player_client: true,
				hidden_in_opponent_client: false,
				//   System still emitting 2.1s after the card
				// _died_..?
				//   Without setting this arg manually, the
				// particle system would only be effectively
				// showing if another response card was casted
				// after this response card (either by the
				// player casting this card or by the
				// opponent).
				delay_end: 2.1,
				//   Delay 8.2s the final removal of remaining
				// particles still wandering around after the
				// card _died_..?
				fade_time: 8.2,
			},
		],
	},

	"Eji's Cunning": {
		name: "Eji's Cunning",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "ejis-cunning.png",
		artist: "lordbob",
		cost: 2,
		loyalty_cost: 4,
		is_response: true,
		rules: "Change the targets of a spell that is being cast.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(size(game_stack) = 0 or not (back(game_stack) is class message.play_card)
			   or (class message.play_card<- back(game_stack)).targets = []
			   or (card_being_played = null or card_being_played.type != 'spell'
			       where card_being_played = (class message.play_card <- back(game_stack)).card),
			[],
			card.possible_targets(game, game.players[msg.player_index].creature_avatar, targets)
			where card = class card <- msg.card
			where msg = class message.play_card <- back(game_stack))

			//get the game stack, but if we ourselves are the card on top of the game stack,
			//we should pop ourselves off.
			where game_stack = if(our_stack_index = -1, game.stack, game.stack[:our_stack_index])
			where our_stack_index = index(game.stack, our_stack_frame)
			where our_stack_frame = find(game.stack, if(value is class message.play_card, (class message.play_card <- value).card = me, false))
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		  set(msg.targets, info.targets)
			where card = class card <- msg.card,

		  add(game.animation_hints, [construct('animation.redirect_target_hint', {
				stack_id: msg.stack_id,
				new_targets: [info.targets[0]],
		  })]),

		]
		where msg = class message.play_card <- back(game.stack)
		",

		target_particles: [{
			effect: 'cunning', pos: [32, 32],
			//   System still emitting 2.1s after the card
			// _died_..?
			//   Without setting this arg manually, the particle
			// system would only be effectively showing if another
			// response card was casted after this response card
			// (either by the player casting this card or by the
			// opponent).
			delay_end: 2.1,
			//   Delay 8.2s the final removal of remaining
			// particles still wandering around after the card
			// _died_..?
			fade_time: 8.2,
		}, ],
	},

	"Scry": {
		name: "Scry",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval MINERVA",
        is_instant: true,
		portrait: "scry.png",
		artist: "stephenwang",
		portrait_focus: [400,600],
		portrait_focus_width: 240,
		cost: 0,
		loyalty_cost: 3,
		rules: "Look at the top 3 cards of your deck, put one of them into your hand and the rest on the bottom of your deck.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  game.scry(3, {card: me}, info)",
	},
    
	"Endless Studies": {
		name: "Endless Studies",
		set: "core",
		rarity: 0,
		type: "spell",
		artist: "lucy",
		portrait: "endless-studies.png",
		portrait_focus: [373,314],
		portrait_focus_height: 280,
		school: "@eval MINERVA",
		is_instant: true,
		cost: 0,
		loyalty_cost: 2,
		rules: "Draw two cards.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  game.players[game.current_player].draw_cards(game, 2)",
	},
    
	"Quicken Spell": {
		name: "Quicken Spell",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval MINERVA",
		is_instant: true,
		help_strings: ['Instant'],
		is_response: true,
		portrait: "haste.png",
		portrait_focus: [267, 90],
		portrait_focus_width: 92,
		cost: 1,
		loyalty_cost: 1,
		rules: "Your next spell will be cast as an Instant action.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			add(game.players[info.player_index].creature_avatar.passive_abilities,
			[
			construct('passive_ability', {
				name: 'Quicken Spell',
				rules: q(Your next spell will be cast as an Instant action.),
				static_effect: q^def(class game_state game, class creature creature) ->commands [
					creature.apply_creature_effect(game, apply_fcn, remove_fcn, {affected_cards: card_ids})
					where apply_fcn = def(class game_state game, class creature creature, map info)->commands [[
						set(c.is_instant, true),
						c.set_dirty(),

					]| c <- game.players[creature.controller].hand,
					   c._uuid in info.affected_cards
					]
					where remove_fcn = def(class game_state game, class creature creature, map info)->commands [[
						set(c2.is_instant, false),
						c2.set_dirty(),
					]| c2 <- game.players[creature.controller].hand,
					   c2._uuid in info.affected_cards
					]
					where card_ids = [
						c3._uuid
					| c3 <- game.players[creature.controller].hand,
					   c3.type = 'spell',
					   not c3.is_instant
					]
				]^,
			})
			]),

			add(game.players[info.player_index].creature_avatar.triggered_abilities,
			[
			construct('triggered_ability', {
				on_card_played: q^def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(info.card != null and info.player_index = ^ + str(info.player_index) + q^ and (class card <- info.card).type = 'spell' and (class card <- info.card).name != 'Quicken Spell',
						set(creature.passive_abilities, filter(creature.passive_abilities, value.name != 'Quicken Spell')),
					) 
				^,
			})
			]),

		]",
	},

	"Magic Missile": {
		name: "Magic Missile",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "magic-missile.png",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		//resolve_effect: "fire",
		resolve_effect: 'impact',
		resolve_launch: {
			type: 'hypothermia_launch',
			custom_color: [1.0, 0.0, 1.0],
		},
		resolve_projectile: {
			type: 'hypothermia_projectile',
			custom_color: [1.0, 0.0, 1.0],
		},
		sound_resolve: 'gameplay/spell_magic_missile_release',
		resolve_delay: 8,
		rules: "Deal two damage to target creature or building.",
		possible_targets: "all_creatures_and_buildings_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  creature.inflict_damage(game, 2)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])
		",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},
    
	"Fireball": {
		name: "Fireball",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "fireball.png",
		artist: "lucy",
		portrait_focus: [498,498],
		portrait_focus_height: 200,
		cost: 3,
		loyalty_cost: 3,
		//resolve_effect: "fire",
		sound_resolve: 'gameplay/spell_fireball_hit',
		resolve_effect: 'impact',
		resolve_impact: { type: 'fireball_explosion', delay: 29 },
		resolve_launch: { type: 'fireball_launch' },
		resolve_particle: 'fireball_smoke',
		resolve_num_particles: 10,
		resolve_projectile: { type: 'fireball_ball' },
		arrow_texture: "effects/fire-texture.png",
		rules: "Deal five damage to target creature.",
//		tips: [{
//			title: "Player Damage",
//			text: "Players cannot be reduced below one life by spells. A creature must inflict the fatal blow.",
//		}],
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		if(info.targets[0][0] = -1,
		  //targeting a player
		  game.players[info.targets[0][1]].inflict_damage_cannot_kill(5),

		  //targeting a creature
		  creature.inflict_damage(game, 5)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]))",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

	"Fated Shards": {
		name: "Fated Shards",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "fated-shards.png",
		artist: "lisanguyen",
		cost: 1,
		loyalty_cost: 3,
		rules: "Discard your hand. Deal 2 damage to a random enemy for each discarded card.",
//		tips: [{
//			title: "Player Damage",
//			text: "Players cannot be reduced below one life by spells. A creature must inflict the fatal blow.",
//		}],
		
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		null",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			map(player.hand,

			;

			game.state_based_actions();
			[
			add(game.animation_hints, [construct('animation.shard_damage_hint',
			{
				type: 'shard_damage_hint',
				target_player: if(target is class player, target.player_index),
				target_loc: if(target is class creature, target.loc),
				damage: max(0, 2 - if(target is class creature, target.armor, 0)),
				card: value,
			}
			)
			]),

			if(target is class player,
			  target.inflict_damage_cannot_kill(2),
			  target.inflict_damage(game, 2)
			)
			]

				where target = class player|class creature :: choose(possible_targets)
				where possible_targets = [game.players[(info.player_index+1)%2]] + filter(game.creatures, value.controller != info.player_index and value.alive),
			),
			player.force_discard(game, player.hand),
		] where player = game.players[info.player_index]
		",
	},

	"Chain Lightning": {
		name: "Chain Lightning",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "chain-lightning.png",
		artist: "lisanguyen",
		cost: 2,
		loyalty_cost: 3,
		sound_resolve: "gameplay/spell_chain_lightning",
		resolve_launch: { type: "entropia_launch" },
		resolve_impact: { type: "lightning_impact" },
		resolve_effect: "impact",
		rules: "Target any number of adjacent creatures in a chain. Deal 3 damage to each of them.",
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_ONLY_FRIENDS"],
		min_targets: "int :: 1",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [],
				[creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building],
				if(size(new_targets) > 0, new_targets, null)
			where new_targets = [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building,      creature.is_valid_target(game, avatar.controller, me), game.locs_adjacent(creature.loc, targets[size(targets)-1]), creature.loc not in targets]
			)
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
			map(info.targets, creature.inflict_damage(game, 3)
			where creature = game.creature_at_loc_or_die(value))",
	},

	"Hailstorm": {
		name: "Hailstorm",
		set: "core",
		type: "spell",
		portrait: "hail-storm.png",
		artist: "lisanguyen",
		school: "@eval MINERVA",
		cost: 0,
		loyalty_cost: 1,
		sound_resolve: 'gameplay/spell_ice_freeze',
		rules: "Inflict 1 damage to all creatures.",
		on_play: "def(class game_state game, class message.play_card info) ->commands map(game.creatures, creature, if((not creature.is_land) and (not creature.is_building), [
			creature.inflict_damage(game, 1,)]))",
		wide_particles: [{ effect: 'hails', }, ],
	},

	"Teleport Enemy": {
		name: "Teleport Enemy",
		school: "@eval MINERVA",
		type: "spell",
		portrait: "astral-walk.png",
		hue_shift: 0.5,

		cost: 2,
		is_response: true,

		rules: "Move target enemy creature to a target vacant location",

		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(targets) = 0,
			 enemy_creatures_as_possible_targets(game, avatar, targets),
			 size(targets) = 1,
			 filter(game.all_locs, game.creature_at_loc(value) = null)
		  )
		",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			game.creature_at_loc_or_die(info.targets[0]).set_loc(game, info.targets[1], 'blink')
		",
	},

	"Astral Walk": {
		name: "Astral Walk",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval MINERVA",
		portrait: "astral-walk.png",
		portrait_focus: [322,132],
		portrait_focus_width: 380,
		artist: "wendyyoon",
		cost: 1,
		loyalty_cost: 3,
		is_response: true,
		
		rules: "Move target creature one tile forwards or backwards.",

		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building],
			 if(size(targets) = 1,
			   filter([[targets[0][0], targets[0][1]+col] | col <- [-1,1]],
				      game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null)
			 ))",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  game.creature_at_loc_or_die(info.targets[0]).set_loc(game, info.targets[1], 'astral walk')"
	},
	
	"Polymorph": {
		name: "Polymorph",
		set: "core",
		rarity: 1,
		type: "spell",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval MINERVA",
		portrait: "polymorph.png",
		artist: "lisanguyen",
		is_response: true,

		help_strings: ["Transform"],
		subcard_tips: ["Giant Frog"],

		resolve_effect: 'popup',
		resolve_delay: 12,
		resolve_impact: { type: 'polymorph_impact' },
		resolve_launch: { type: 'polymorph_launch' },

		rules: "Transform target creature into a <i>Giant Frog</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			set(frog.portrait, 'polymorph.png'),
			target.transform(game, frog),
		]
		where frog = lib.citadel.create_creature('Giant Frog')
		where target = game.creature_at_loc_or_die(info.targets[0])
		",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

//Constructs

	"Library": {
		name: "Library",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "greatlibrary.png",
		artist: "lucy",
		portrait_focus: [276,406],
		portrait_focus_width: 200,
		cost: 4,
		loyalty_cost: 0,
		school: "@eval MINERVA",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Library"],
			is_land: true,
			passive_abilities: [{
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Archives",
				icon: 'plus-hand.png',
				rules: "+1 hand size",
			}]
		}
	},

	"House of Meditation": {
		name: "House of Meditation",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "house-of-meditation.png",
		//artist: "enjinn",
		hue_shift: 0.929411,
		saturation_multiplier: 0.717648,
		cost: 2,
		loyalty_cost: 0,
		school: "@eval MINERVA",
		rules: "When you cast House of Meditation, draw a card",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",

		on_play: "def(class game_state game, class message.play_card info) ->commands [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			is_land: true,
		}
	},

	"Great Library of Turim": {
		name: "Great Library of Turim",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "great-library-of-turim.png",
		artist: "stephenwang",
		portrait_focus: [246,214],
		portrait_focus_width: 240,
		cost: 4,
		loyalty_cost: 0,
		school: "@eval MINERVA",
        rules: "Can only be played on top of a Library.",
        possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
        if(targets = [],
			 [creature.loc | creature <- game.permanents, creature.is_valid_target(game, avatar.controller, me), creature.controller = game.current_player_index, creature.is_land, creature.name='Library'], null)",


		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Library"],
			life: 6,
			is_land: true,
			triggered_abilities: [{
				name: 'Study',
				rules: 'Whenever you play a card, draw a card.
',
				on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller,
					   player.draw_cards(game, 1))
				",
			}],
		}
	},
    
    "Mistlands": {
		name: "Mistlands",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval MINERVA",
		portrait: "mistlands.png",
		rules: "Creatures in this tile have <i>Conduit 2</i>.",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",
		help_strings: ["Conduit"],
		creature: {
			tags: ["Terrain"],
			is_land: true,
            portrait: "mistlands.png",
			static_ability_effect: "if(creature.loc = target.loc and not target.is_land, target.apply_static_effect('conduit', 2))",
		},
	},

//Veiling Glyph is the card

    "Veiling Glyph": {
		name: "Veiling Glyph",
		//set: "core",
		rarity: 1,
		type: "spell",
        portrait: "veiling-glyph.png",
		is_response: false,
        tags: ['Rune'],
		cost: 3,
		loyalty_cost: 4,
		school: "@eval MINERVA",
		rules: "This card is deappreciated.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(avatar.controller+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD}))
                      )), null
                      )",
		   on_play: "def(class game_state game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Veiling Ward', {
			name: 'Veiling Ward',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Veiling Ward": {
		name: "Veiling Ward",
		type: "creature",
		portrait: "veiling-glyph.png",
		cost: 3,
		loyalty_cost: 4,
		school: "@eval MINERVA",
		rarity: 0,
		creature: {
			tags: ['Ward'],
			abilities: ['Fragile'],
            static_ability_effect: "if((creature.loc = target.loc or game.locs_adjacent(creature.loc, target.loc)) and (not target.is_land) and (target.controller = creature.controller), target.add_ability_static_duration('Cover'))",
            // note: if it is stolen despite Fragile, the bonus transfers to the new owner
            // note: if it starts as unowned, the bonus goes to the first one who captures it
		}
	},

	"Altar of Storms": {
		name: "Altar of Storms",
		type: "creature",
		portrait: "altar-of-storms.png",
		cost: 6,
		school: "@eval MINERVA",
		creature: {
			tags: ['Altar'],
			portrait_scale: 0.5,
			is_land: true,

			triggered_abilities: [{
				name: 'Static Charge',
				rules: 'Whenever you play a card, deal one damage to each enemy creature adjacent to any target of the card.',
				on_card_played: "def(class creature altar, class game_state game, class player player, class message.play_card info) ->commands
				[
					if(player.player_index = altar.controller and info.targets[0][0] != -1, //and is_sapienza_spell,
						if(game.creature_at_loc(info.targets[0]) != null,
							map( filter( game.all_locs, find(info.targets, game.locs_adjacent(value,loc)) != null where loc = value),
								if (target != null and target.controller != altar.controller,
									add(target.life, -1))
								where target = game.creature_at_loc(value))))
					//where is_sapienza_spell = info.card != null and (info.card.school = altar.school or altar.school in info.card.school)
				]",
			}],
		}
	},

"Mage Tower": {
		name: "Mage Tower",
		set: "core",
		rarity: 2,
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		portrait: "mage-tower.png",
		portrait_focus: [490,444],
		portrait_focus_width: 280,
		portrait_focus_height: 160,
		artist: "stephenwang",
		school: "@eval MINERVA",
		is_channeled: true,
		tips: [{
			title: "Imprint",
			text: "Three spells are imprinted. If you have three or less spells in your hand they are all imprinted.",
		}, {
			title: "Spells as Abilities",
			text: "The Mage Tower can cast up to one imprinted spell each turn.",
		}],
		rules: "X charges. Imprint with three spells from your hand. It gains these spells as abilities.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			if(size(spells) <= 3 or size(current_choices) = 3,
			do_summons(game, info),

			if(spells, game.set_current_choice({
				card: me,
				info: info,
				text: 'Choose spells to imprint',
				num_choices: min(3, size(spells)),
				options: filter(map(spells, if(index not in current_choices, construct('choice.card', {
					card: value,
					tag: index,
				}))), value != null)
			}))

			)
			where current_choices = info.choices or []
			where spells = filter(game.player_obj.hand, value.type = 'spell')
		",

		creature: {
			is_land: true,
            tags: ['Tower'],
			on_summoned: "def(class game_state game) ->commands [
				set(energy, channel),

				map(spells_chosen,
				    if(card_info['on_play'] is string,
					add(me.activated_abilities, [lib.citadel.create_card(card.name, {
						once_per_turn: true,
						on_play: 'def(class game_state game, class message.play_card info) ->commands
						          [add(info.get_creature(game).energy,-1), base_on_play(game, info)]
								      where base_on_play = (' + (string<- card_info['on_play']) + ')',
						possible_targets: 'def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
						 if(avatar.energy > 0, if(base_possible_targets is function(class game_state, class creature, [Loc])->[Loc]|null, base_possible_targets(game, avatar, targets), null), [])
						  where base_possible_targets = (' + str(card_info['possible_targets']) + ')',

						custom_reason_cannot_cast: q(def(class game_state game, class creature avatar) ->null|string
							if(avatar.energy <= 0, 'The Mage Tower has no more charges')
						),
					})])
					)
					where card_info = lib.citadel.get_card_info(card.name)
					where card = value
				)
				where spells_chosen = if(choices != null, map(choices, spells[value]), spells)
				where spells = filter(game.player_obj.hand, value.type = 'spell')
			]
			",
		}
	},

///// END OF MAIN SET, RANDOM/CANDIDATE CARDS BELOW //////


	"Blink": {
		name: "Blink",
		set: "core",
		type: "spell",
		school: "@eval MINERVA",
		portrait: "blink.png",
		artist: "lisanguyen",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		
		rules: "Blink target creature to another lane.",

		possible_targets: "
		 def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building],
			 if(size(targets) = 1,
				[[row, targets[0][1]] | row <- range(game.rows), game.is_loc_on_board([row, targets[0][1]]), game.creature_at_loc([row, targets[0][1]]) = null]
			 ))",
		on_play: "def(class game_state game, class message.play_card info) ->commands
          game.creature_at_loc_or_die(info.targets[0]).set_loc(game, info.targets[1], 'blink')"
	},

	"Divine the Future": {
		name: "Divine the Future",
		type: "spell",
		school: "@eval MINERVA",
		cost: 2,
		loyalty_cost: 3,
		rules: "Look at the top 5 cards of your deck, discard them or put them back.",
		on_play: "def(class game_state game, class message.play_card info) ->commands if(info.choices, [
			if(info.choices[0] = 1, [
				map(game.player_obj.deck[:5],
				    game.player_obj.discard_visible(game, value)),
				set(game.player_obj.deck, game.player_obj.deck[5:]),
			])
		],
		 if(game.player_obj.no_cards_to_draw, null,
		 [
		 	set(game.player_obj.deck, cards),
			game.set_current_choice({
				card: me,
				info: info,
				text: 'Choose whether to discard the cards',
				options:
				map(cards[:depth],
				construct('choice.card', {
					card: value,
					tag: -1,
				})) +
				
				[
				construct('choice.button', {
					tag: 0,
					text: 'Keep',
				}),
				construct('choice.button', {
					tag: 1,
					text: 'Discard',
				})
				]
			}),
		 ] where cards = game.player_obj.deck
		) where depth = 5
		)
		",
	},

	"Ejalah, the Summoner": {
		name: "Ejalah, the Summoner",
		type: "creature",
		portrait: "ejalah-the-summoner.png",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval MINERVA",
		rules: "You may summon creatures in tiles adjacent to Ejalah",
		creature: {
			tags: ['Mage'],
			attack: 8,
			life: 8,
			sprite_sheet: "mages",
			allows_summoning: "def(class game_state game, class creature target) ->[Loc]
			if(not target.is_land,
			  filter(game.all_locs, (game.locs_adjacent(value, loc)) and
			         game.creature_at_loc(value) = null), [])",
		}
	},

	"Golem": "Flesh Golem",

	"Giant Frog": {
		name: "Giant Frog",
		type: "creature",
		artist: "lisanguyen",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval MINERVA",
		portrait: "polymorph.png",
		creature: {
			tags: ['Frog'],
			attack: 2,
			life: 2,
		}
	},

	"Charge!": {
		name: "Charge!",
		type: "spell",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval MINERVA",
		rules: "Target creature gains Charge.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['Charge'])
					asserting size(info.targets) = 1",
	},
	
	"Council of Seven": {
		name: "Council of Seven",
		type: "spell",
		school: "@eval MINERVA",
		cost: 4,
		loyalty_cost: 3,
		rules: "Discard your hand, draw seven cards.",
		on_play: "def(class game_state game, class message.play_card info) ->commands [
			game.player_obj.discard_cards(game, range(size(game.player_obj.hand))),
			game.player_obj.draw_cards(game, 7)
		]",
	},
	
	"Confusion": {
		name: "Confusion",
		type: "spell",
		school: "@eval MINERVA",
		is_response: true,
		cost: 3,
		loyalty_cost: 3,
		rules: "You gain control of target creature this turn. This creature cannot enter the endzone this turn.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		 [set(creature.controller, game.current_player_index),
			set(creature.can_enter_endzone, false),
			creature.add_triggered_ability_until_end_of_turn({
				on_end_turn: 'def(class creature creature, class game_state game) ->commands [set(creature.controller, int<- args.original_controller), 
					set(creature.can_enter_endzone, args.original_enter_endzone)]',
				args: { original_controller: creature.controller, original_enter_endzone: creature.can_enter_endzone }
			})]
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Humboldt's Curse": {
		name: "Humboldt's Curse",
		type: "spell",
		school: "@eval MINERVA",
		is_response: true,
		cost: 2,
		loyalty_cost: 1,
		rules: "Target creature gets -1 move.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play_on_creature: "def(class game_state game, class creature target) ->commands [add(target.move, -1)]",
	},
	
	"Humboldt's Trick": {
		name: "Humboldt's Trick",
		type: "spell",
		school: "@eval MINERVA",
		is_response: true,
		cost: 3,
		loyalty_cost: 2,
		rules: "Target creature gets +1 move and -2 attack.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands [add(creature.move, 1), add(creature.attack, -2)]
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Rolland's Little Helper": {
		name:  "Rolland's Little Helper",
		type: "creature",
		school: "@eval MINERVA",
		cost: 3,
		loyalty_cost: 2,
		creature: {
			activated_abilities: [
				{
					name: 'Sacrifice',
					school: "@eval MINERVA",
					is_response: true,
					cost: 2,
					rules: "Sacrifice this creature, draw 3 cards.",
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						game.player_obj.draw_cards(game,3), 
						set(creature.destroyed, true)]
					where creature = info.get_creature(game)",
				}
			],
			tags: ['Arcane'],
			attack: 6,
			life: 6,
		}
		
	},

	"Read Mind": {
		name: "Read Mind",
		type: "spell",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval MINERVA",
		rules: "Look at your opponent's hand.\nYou restore 1 mana.",

		on_play: "def(class game_state game, class message.play_card info) ->commands if(info.choices, null, [
		add(game.player_obj.resources, 1),
		if(game.opponent_obj.hand, game.set_current_choice({
			card: me,
			info: info,
			text: q(Look at your opponent's hand. Click a card when they're done.),
			options: map(game.opponent_obj.hand, construct('choice.card', {
				card: value,
				tag: index,
			}))
		}))])",
	},
	
	"Tower of Levitation": {
		name: "Tower of Levitation",
		type: "creature",
		cost: 3,
		loyalty_cost: 4,
		school: 4,
		rules: "Creatures you control in this lane have the ability: 'Levitate: This creature gains Flying this turn.'",
		creature: {
			tags: ["Tower"],
			life: 6,
			is_land: true,
			static_ability_effect: "if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0], 
				target.add_ability_static_duration({
					name: 'Levitate',
					cost: 2,
					school: 4,					
					is_response: true,
					rules: 'Gain Flying until the end of the turn',
					is_usable: 'def(class game_state game, class creature creature) ->bool not (q(Flying) in creature.abilities)',
					on_play: 'def(class game_state game, message.play_card info) ->commands creature.add_ability_until_end_of_turn(q(Flying)) where creature = info.get_creature(game)'
				})
			)",
		}
	},
	
	"Golem Foundry": {
		name: "Golem Foundry",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 4,
		rules: "DEPRECATED",
		creature: {
			tags: ['Construct', 'Foundry'],
			life: 6,
			is_land: true,
		},
	},
	
	"Duff's Device": {
		name: "Duff's Device",
		type: "spell",
		cost: 3,
		loyalty_cost: 3,
		school: 4,
		rules: "Creatures on Duff's Device can move to other Duff's Devices.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) -> [Loc]|null
		   if(size(targets) = 2, null,
		      filter(game.players[avatar.controller].summoning_locs(game, construct('creature', {name: q(Duff's Device), school: 4, is_land: true, life: 6})),
			         not (value in targets)))",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		 map(info.targets, game.summon_land(construct('creature', {
			name: q(Duff's Device),
			tags: ['Construct', q(Duff's Device)],
			school: 4,
			life: 6,
			controller: game.current_player,
			loc: value,
			is_land: true,
			static_ability_effect: q(if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0], 
				target.add_ability_static_duration({
					name: 'Teleport',
					cost: 3,
					school: 4,					
					is_response: true,
					once_per_turn: true,
					rules: q(Teleport to another lane with a Duff's device in it),
					is_usable: q(def(class game_state game, class creature creature) ->bool
					   not ('Exhausted' in creature.status_effects)),
					possible_targets: q(def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], [[construct.loc[0], creature.loc[1]] | construct <- game.creatures, 
							q(Duff's Device) in construct.tags, 
							construct.controller = game.current_player_index, 
							creature.loc[0] != construct.loc[0], 
							game.creature_at_loc([construct.loc[0], creature.loc[1]]) = null]
						)
					),
					on_play: q(def(class game_state game, message.play_card info) ->commands set(creature.loc, info.targets[0]) where creature = info.get_creature(game)),
				})
			))
		})))"
	},

	"Maxims and Arrows": {
		name: "Maxims and Arrows",
		type: "spell",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval MINERVA",
		rarity: 0,
		rules: "Target creature gets a wound and 1 armor for each scrolls creature you control.",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(class game_state game, class creature target) ->commands
			[add(target.life, -scrolls), add(target.armor, scrolls)]
			where scrolls = count(game.creatures, value.controller = game.current_player_index and (MINERVA in value.school))
		",
	},

	"Changing of Seasons": {
		name: "Changing of Seasons",
//		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "changing-of-seasons.png",
		cost: 6,
		loyalty_cost: 3,
		school: "@eval SCROLLS",
		rules: "Summon three cunning wisps.",
		possible_targets: "
		def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		   if(size(targets) = 3, null,
		      filter(game.players[avatar.controller].summoning_locs(game, construct('creature', {name: 'Cunning Wisp', school: SCROLLS})),
			         not (value in targets)))",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Cunning Wisp', {
			name: 'Cunning Wisp',
			controller: game.current_player,
			loc: value,
			portrait: 'cunningwisp.png',
			// XXX: why is this portait line ^ necessary?
		})))"
	},

	"Deception": {
		name: "Deception",
		set: "precore",
		type: "spell",
		school: "@eval MINERVA",
		portrait: "translocate.png",
		hue_shift: .32993,
		cost: 2,
		loyalty_cost: 2,
		is_response: false,
		rules: "Bring target creature back to its controller's hand.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			set(game.creatures, filter(game.creatures, value != c)),
			add(game.players[c.controller].hand, [lib.citadel.create_card(c.name)])
		]
		where c = game.creature_at_loc_or_die(info.targets[0])
		",
	},
}
