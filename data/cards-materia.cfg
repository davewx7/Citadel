{
	
	"Iron Warhammer": {
		name: "Iron Warhammer",
		type: "spell",
		artist: "lordbob",
		cost: 1,
		loyalty_cost: 2,
		set: "core",
		rarity: 0,
		tags: ['Equipment'],
		school: "@eval GOLD",
		portrait: "iron-warhammer.png",
		sound_resolve: "gameplay/spell_equip_weapon",
		rules: "Target creature summoned this turn gains +4/+0.",
		possible_targets: "equipment_targets",
		_invalid_target_reason: "equipment_invalid_reason",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, 4)
					asserting size(info.targets) = 1",
	},
	
	"Longsword": {
		name: "Longsword",
		type: "spell",
		artist: "lordbob",
		cost: 1,
		loyalty_cost: 2,
		set: "core",
		rarity: 0,
		tags: ['Equipment'],
		school: "@eval GOLD",
		portrait: "longsword.png",
		sound_resolve: "gameplay/spell_equip_weapon",
		rules: "Target creature summoned this turn gains +2/+2.",
		possible_targets: "equipment_targets",
		_invalid_target_reason: "equipment_invalid_reason",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, 2),
		  add(game.creature_at_loc_or_die(info.targets[0]).life, 2),
		]
					asserting size(info.targets) = 1",
	},
	
	"Trusty Shield": {
		name: "Trusty Shield",
		type: "spell",
		artist: "lordbob",
		cost: 0,
		loyalty_cost: 3,
		set: "core",
		rarity: 0,
		tags: ['Equipment'],
		school: "@eval GOLD",
		portrait: "trusty-shield.png",
		sound_resolve: "gameplay/spell_equip_metal_armor",
		rules: "Target creature summoned this turn gains +2 armor.",
		possible_targets: "equipment_targets",
		_invalid_target_reason: "equipment_invalid_reason",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).armor, 2)
					asserting size(info.targets) = 1",
	},

	"Blade of the Reaver": {
		name: "Blade of the Reaver",
		type: "spell",
		cost: 3,
		loyalty_cost: 4,
		set: "core",
		rarity: 1,
		tags: ['Equipment'],
		school: "@eval GOLD",
		portrait: "blade-of-the-reaver.png",
        sound_resolve: "gameplay/spell_equip_weapon",
		artist: "lordbob",
		rules: "Target creature summoned this turn gains +6/+4.",
		possible_targets: "equipment_targets",
		_invalid_target_reason: "equipment_invalid_reason",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, 6),
		  add(game.creature_at_loc_or_die(info.targets[0]).life, 4)
		]
					asserting size(info.targets) = 1",
	},

    "Cunning Rogue": {
		name: "Cunning Rogue",
		type: "creature",
        set: "core",
		portrait: "cunning-rogue.png",
		cost: 4,
        rarity: 1,
		school: "@eval MATERIA",
		creature: {
			attack: 4,
			life: 4,
            activated_abilities: [
				{
					name: 'Evasion',
					once_ever: true,
					cost: 0,
					school: "@eval MATERIA",
					ai_value: 2.0,

					portrait: "desperate-evasion.png",
					hue_shift: 0.1,
					rules: "Moves to a random vacant adjacent tile.",
					is_response: true,

					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(find(game.get_adjacent_locs(creature.loc), game.is_loc_on_board(value) and game.creature_at_loc(value) = null) != null,
					   null, []
					)",

					on_play: "
					 def(class game_state game, class message.play_card info) ->commands [
					 creature.set_loc(game, choose(adjacent), 'leap')
		  				where adjacent = filter(game.get_adjacent_locs(creature.loc), game.is_loc_on_board(value) and game.creature_at_loc(value) = null)
					]
					  where creature = info.get_creature(game)
					",
				}
			]
		}
	},

	"Dwarvish Warrior": "Mercenary",

	"Mercenary": {
		name: "Mercenary",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "mercenary.png",
		portrait_focus: [408,260],
		portrait_focus_height: 110,
		artist: "lucy",
		cost: 3,
		school: "@eval GOLD",
		creature: {
			attack: 4,
			life: 3,
			armor: 1,

			game_sounds: "soldier_blade",
			sound_impact: "wood",
			sound_swish: "medium",
		}
	},

	"Infantry Support": {
		name: "Infantry Support",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "infantry-support.png",
		cost: 3,
		school: "@eval GOLD",
		creature: {
			game_sounds: "soldier_blade",
			attack: 3,
			life: 3,
			move: 1,
			sound_impact: "wood",
			sound_swish: "medium",
            passive_abilities: [{
				name: "Support",
				rules: "Adjacent allies have +1/+1.",
				static_effect: "def(class game_state game, class creature creature) ->commands 
                [[
					target.apply_static_effect('attack', 1),
					target.apply_static_effect('life_shield', 1),
				]
                | target <- game.creatures,
				  creature.controller = target.controller,
				  not target.is_building,
				  game.locs_adjacent(creature.loc, target.loc)
                ]"
			}],
		}
	},

	"Reinforcements": {
		name: "Reinforcements",
		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "thunderer.png",
		cost: 6,
		loyalty_cost: 4,
		school: "@eval MATERIA",
		subcard_tips: ["Infantry Support"],
		rules: "Summon three 3/3 (Materia)Materia Infantry Support.",
		possible_targets: "
		def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		   if(size(targets) = 3, null,
		      filter(game.players[avatar.controller].summoning_locs(game, construct('creature', {name: 'Infantry Support', school: MATERIA })),
			         not (value in targets)))",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  map(info.targets, game.summon_creature(
			lib.citadel.create_creature('Infantry Support', {
            controller: game.current_player,
            loc: value,
        })))"
    },

	"Last Stand": {
		name: "Last Stand",
		set: "core",
		rarity: 2,
		type: "spell",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval [MATERIA]",
		portrait: "anthem-of-battle.png",
		hue_shift: 0.5,
		is_response: false,

		rules: "Your creatures gain attack equal to your (Materia) and +2 armor this turn. Each of them attacks a random adjacent enemy.",

		on_play: "def(class game_state game, class message.play_card info) ->commands

		[
		map(creatures, [
			value.apply_effect_until_end_of_turn('attack', game.players[info.player_index].get_resource_level(MATERIA), 'blazing_sword_creature_effect'),
			value.apply_effect_until_end_of_turn('armor', 2),
		]),

		map(creatures,
		
		game.add_delayed_commands(
		; [
			if(targets, [
				game.force_fight(c, choose(targets)),
			])
			where targets = filter(game.creatures, value.controller != c.controller and game.locs_adjacent(value.loc, c.loc))
		])
		where c = value
		),

		]

		where creatures = [c | c <- shuffle(game.creatures), c.controller = info.player_index, c.is_building = false]
		",
	},

	"Deephelm Explorer": {
		name: "Deephelm Explorer",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "deephelm-explorer.png",
		portrait_focus: [482,260],
		portrait_focus_width: 200,
		portrait_focus_height: 200,
		artist: "stephenwang",
		cost: 4,
		school: "@eval GOLD",

		creature: {
			attack: 3,
			life: 3,
			game_sounds: "magic_user",

			calculate_voice_summoned: "def(class game_state game) ->string|null
			if(find(game.lands, value.loc[0] = me.loc[0]) = null,
			  'voices/deephelm-explorer/disappointed-summon',
			  voice_summoned
			)
			",
			voice_summoned: "voices/deephelm-explorer/summon",

			calculate_voice_die: "def(class game_state game) ->string|null
				if(1d2 = 1 and game.land_at_loc(me.loc) != null,
				   'voices/deephelm-explorer/tomb',
				   voice_die
				)
			",

			voice_die: "voices/deephelm-explorer/death",

			voice_redemption: "voices/deephelm-explorer/redemption",

			calculate_voice_engaged: "def(class game_state game, class creature enemy, bool doomed, bool enemy_doomed) ->string|null
				if(enemy_doomed and not doomed and (enemy.attack + enemy.life + enemy.armor) >= 13,
				   'voices/deephelm-explorer/epic-battle',
				   enemy_doomed and not doomed,
				   'voices/deephelm-explorer/battle-win',
				   doomed,
				   'voices/deephelm-explorer/battle-lose'
				)
			",

			triggered_abilities: [{
                name: 'Artificer',
                rules: "Gains +2/+2 whenever entering a land.",
				on_move_over_construct: "def(class creature creature, class game_state game, class creature land) ->commands
				if(land.loc not in (list<- (me.args['lands_seen'] or [])),
				[
					set(me.args['lands_seen'], (list<- (me.args['lands_seen'] or [])) + [land.loc]),
					add(creature.attack, 2),
					add(creature.life, 2),
					game.add_animation_hint(construct('animation.creature_voice_hint', {
						creature: creature,
						sound_event: 'voices/deephelm-explorer/enter-land',
					})),
				])
				",

				on_land_summoned: "def(class creature creature, class game_state game, class creature new_land, null|class creature old_land) ->commands
					if(new_land.loc = creature.loc and (creature.loc not in (list<- (me.args['lands_seen'] or []))),
					[
						set(me.args['lands_seen'], (list<- (me.args['lands_seen'] or [])) + [new_land.loc]),
						add(creature.attack, 2),
						add(creature.life, 2),
						game.add_animation_hint(construct('animation.creature_voice_hint', {
							creature: creature,
							sound_event: 'voices/deephelm-explorer/enter-land',
						})),
					]
					)
				",
			}],
		},
	},
 

	
	"Loyal Guard": {
		name: "Loyal Guard",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "loyal-guard.png",
		artist: "lisanguyen",
		cost: 4,
		school: "@eval GOLD",
		creature: {
			game_sounds: "soldier_blade",
			sound_impact: "wood",
			tags: ['Human', 'Warrior'],
			abilities: ['Valiant'],
			attack: 5,
			life: 4,
			move: 1,
		}
	},
    


	"Thunderer": {
		name: "Thunderer",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 5,
		loyalty_cost: 0,
		portrait: "thunderer.png",
		artist: "lordbob",
		school: "@eval GOLD",
		creature: {
			tags: [],
            abilities: ['Ranged'],
			attack_creature_anim: 'gunfire',
			attack: 6,
			life: 3,
			move: 1,
			armor: 1,
			game_sounds: "soldier_musket",
		}
	},

	"Eager Swordsman": "Rune Warrior",

	"Rune Warrior": {
		name: "Rune Warrior",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		portrait: "eager-swordsman.png",
		artist: "lisanguyen",
		school: "@eval GOLD",
		creature: {
			tags: [],
			attack: 5,
			life: 6,
			move: 1,
			game_sounds: "warrior_female",
			sound_swish: "medium",
			sound_impact: "wood",
		},
	},

	"Warrior Elite": {
		name: "Warrior Elite",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 6,
		loyalty_cost: 0,
		portrait: "warrior-elite.png",
		school: "@eval GOLD",
		creature: {
		
			game_sounds: "soldier_blade",
			sound_swish: "heavy",
			sound_impact: "wood",
			attack: 10,
			life: 7,
			move: 1,

			activated_abilities: [
				{
					name: 'Challenge',
					cost: 0,
					portrait: "warrior-elite.png",
					school: "@eval GOLD",
					rules: "Use attack to fight a creature in an adjacent tile",
					once_per_turn: true,
					uses_attack: true,

					possible_targets: "
					 def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
								game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) != null and
							not game.creature_at_loc_or_die(value).is_building), null)
					",

					on_play: "def(class game_state game, class message.play_card info) ->commands [
						game.force_fight(creature, target_creature)
					] asserting size(info.targets) = 1
					  where target_creature = game.creature_at_loc_or_die(info.targets[0])
					  where creature = info.get_creature(game)",
				}
			]
		},
	},

	"Royal Guard": {
		name: "Royal Guard",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "guard-of-the-keep.png",
		cost: 3,
		school: "@eval GOLD",
		creature: {
			attack: 5,
			life: 5,
			move: 0,
			abilities:['Immobile'],
			game_sounds: "soldier_blade",
			sound_swish: "medium",
			sound_impact: "wood",

			//This is a list of abilities the creature can
			//Activate. It just has the 'reposition' ability
			//which lets it move.
			activated_abilities: [
				{
					name: 'Reposition',
					cost: 1,
					portrait: "guard-of-the-keep.png",
					school: "@eval GOLD",
					rules: "Move to an adjacent summoning tile",
					once_per_turn: true,

					//this tells us which locations the spell can target. The main tricky part
					//in here is filtering down the locations to only those that are valid
					//summoning locations for the player.
					possible_targets: "
					 def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [],
						   filter(
								game.get_adjacent_locs(creature.loc),
							(value in game.players[creature.controller].summoning_locs(game, creature))
							), null)
					",

					//This is commands to execute when the spell is cast. It just moves the
					//creature to the target location the player selected.
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.set_loc(game, info.targets[0]),
					] where creature = info.get_creature(game)",
				}
			]
		},

	},

	"King's Rider": {
		name: "King's Rider",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "kings-rider.png",
		portrait_focus: [451,198],
		portrait_focus_height: 120,
		artist: "wendyyoon",
		cost: 5,
		school: "@eval GOLD",
		creature: {
			abilities: ['Swift'],
			tags: ['Mounted'],
			attack: 6,
			life: 5,
			game_sounds: "soldier_blade",
			sound_swish: "medium",
			sound_impact: "wood",

			activated_abilities: [
				{
					name: 'Maneuver',
					cost: 1,
					portrait: "kings-rider.png",
					school: "@eval GOLD",
					rules: "Spend 1 movement to move to an adjacent tile.",
					once_per_turn: false,
					uses_movement: true,

					possible_targets: "
					 def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
								game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) = null), null)
					",

					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.set_loc(game, info.targets[0]),
                        add(creature.spaces_moved_this_turn, 1)
					] asserting size(info.targets) = 1
					  where creature = info.get_creature(game)",
				}
			]

		}
	},

	"Siege Ballista": {
		name: "Siege Ballista",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "siege-ballista.png",
		portrait_focus: [390,152],
		portrait_focus_width: 250,
		portrait_focus_height: 160,
		artist: "stephenwang",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			is_building: true,
			attack: 6,
			life: 6,
            abilities: ['Ranged'],
            			activated_abilities: [

				{
					name: 'Move',
					cost: 2,
					once_per_turn: true,
					school: "@eval GOLD",
					rules: "Can move this turn instead of attacking",

					possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(creature.has_action, null, [])
					",

					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.add_ability_until_end_of_turn('Mobile'),
						creature.use_action(),
					]
					  where creature = info.get_creature(game)",
				}

			],
		}
	},
    
	"Armory": {
		name: "Armory",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "armory.png",
		artist: "lordbob",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			is_land: true,
			portrait_scale: 0.15,
			portrait_y_offset: 12,
			image_num: 4,
            passive_abilities: [{
				name: "Equipped",
				rules: "Your creatures in this lane have +2 armor.",
				static_effect: "def(class game_state game, class creature creature) ->commands 
                [target.apply_static_effect('armor', 2)
                | target <- game.creatures,
				  (creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0])
                ]"
			}],

			triggered_abilities: [{
				name: "Weaponsmith",
				rules: "When you cast an <i>Equipment Spell</i>, draw a card.",
				on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller and info.card and ('Equipment' in info.card.tags),
					   player.draw_cards(game, 1))
				",
			}],
		}
	},

	"Stone Elemental": {
		name: "Stone Elemental",
		type: "creature",
		set: "core",
		rarity: 1,
		portrait: "stone-elemental.png",
		portrait_focus: [409,208],
		portrait_focus_height: 260,
		artist: "lisanguyen",
		cost: 5,
		loyalty_cost: 1,
        is_channeled: true,
		school: "@eval GOLD",
		creature: {
			tags: ['Elemental', 'Stonebound'],
			attack_imprint: "effects/sunken-cracks-mask.png",
			sound_swish: "heavy",
			sound_impact: "wood",
			attack: 5,
			life: 5,
            triggered_abilities: [{
				name: "Rock Solid",
				rules: "Has X armor and X resistance",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    add(creature.armor, creature.channel),
                    add(creature.resistance, creature.channel),
                ]",
            }],
		}
	},
	
    "Dwarvish Armourer": "Man-at-Arms",
	"Royal Armourer": "Man-at-Arms",
	"Stalwart Guard": "Man-at-Arms",
    
	"Man-at-Arms": {
		name: "Man-at-Arms",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "man-at-arms.png",
		artist: "wendyyoon",
		portrait_focus: [427,231],
		portrait_focus_height: 180,
		cost: 4,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			game_sounds: "soldier_blade",
			sound_swish: "medium",
			sound_impact: "wood",
			tags: ['Human'],
			attack: 4,
			life: 4,
			move: 1,
			armor: 1,
			triggered_abilities: [{
				name: "Weapon Skill",
				rules: "When targeted by an <i>Equipment Spell</i>, gets +2/+2.",
				on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(info.card and ('Equipment' in info.card.tags) and (creature.loc in info.targets),
					   [
					   	add(creature.attack, 2),
					   	add(creature.life, 2),
					   ])
				",
				hidden_on_creature: true,
				ignore_hidden_on_creature_on_turn_when_summoned: true,
			}],
		}		
	},

	"Oldric, Lord of the Hold": {
		name: "Oldric, Lord of the Hold",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "oldric-lord-of-the-hold.png",
		portrait_focus: [451,198],
		portrait_focus_height: 120,
		artist: "wendyyoon",
		cost: 8,
		loyalty_cost: 3,
		school: "@eval GOLD",
		hero: true,
		creature: {
			game_sounds: "soldier_blade",
			sound_swish: "heavy",
			sound_impact: "wood",
			tags: ['Lord'],
			attack: 10,
			life: 10,
			armor: 3,
			resistance: 3,
		}
	},

	"Janus, the Great": "Catherine, Lady of the Blade",
    
	"Catherine, Lady of the Blade": {
		name: "Catherine, Lady of the Blade",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "janus-the-great.png",
		portrait_focus: [244,164],
		portrait_focus_height: 130,
		artist: "stephenwang",
		flavor_text: "He dared call me Cat once. I soon reminded him that cats have claws.",
		flavor_voice: "voices/catherine-flavor",
		cost: 10,
		loyalty_cost: 4,
		school: "@eval GOLD",
		hero: true,
		ai_flags: "@eval [AI_CARD_PLAY_AT_START_OF_TURN]",
		creature: {
			tags: ['Human', 'Lord'],
			sound_swish: "heavy",
			sound_impact: "wood",
			attack: 12,
			life: 12,
			armor: 3,
			resistance: 3,
			game_sounds: "warrior_female",
//			voice_summoned: "voices/catherine-summon",
//			sound_death: "voices/catherine-death",
                
            passive_abilities: [{
				name: "Tactician",
				rules: "Your creatures have +3/+3.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [target.apply_static_effect('attack', 3), target.apply_static_effect('life_shield', 3)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	},
    
	"Kleptron, the Machine Man": "Garron, the Smuggler",
	
	"Garron, the Smuggler": {
		name: "Garron, the Smuggler",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "garron-the-smuggler.png",
		artist: "lordbob",
		flavor_text: "It would be misleading to point out that he has a heart of gold.",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval GOLD",
		hero: true,
		creature: {
			game_sounds: "soldier_mace",
			sound_swish: "medium",
			sound_impact: "wood",
			attack: 4,
			life: 4,

			passive_abilities: [{
				name: "Smuggler",
				icon: 'plus-mana.png',
				rules: "+1 mana pool. Your opponent has -1 mana pool.",

				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0, [
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.base_income, 1)),
					(def(class player p, map info) ->commands add(p.base_income, -1)),
					{}),

				   game.players[(creature.controller+1)%2].apply_static_effect(
					(def(class player p, map info) ->commands add(p.base_income, -1)),
					(def(class player p, map info) ->commands add(p.base_income, 1)),
					{}),
				]
				)
				",
			}],
		}
	},
    
    "Hillclan Auxillery": "Hillclan Auxiliary",
    
    "Hillclan Auxiliary": {
		name: "Hillclan Auxiliary",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "hillclan-auxillary.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			game_sounds: "soldier_mace",
			attack: 3,
			life: 3,
                
            passive_abilities: [{
				name: "Aggressive Support",
				rules: "Allies directly in front of this creature have +2 attack.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [target.apply_static_effect('attack', 2)])
				  | target <- game.creatures,
				    target.is_building = false and if(creature.controller = 0, target.loc = [creature.loc[0],creature.loc[1]+1], target.loc = [creature.loc[0],creature.loc[1]-1])
				]"
			}],
		}
	},

	"Wall of Stone": {
		name: "Wall of Stone",
		set: "core",
		rarity: 0,
		type: "creature",
		artist: "lucy",
		cost: 2,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		portrait_focus: [429,236],
		portrait_focus_height: 110,
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			armor: 1,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			sound_impact: "wood",
			activated_abilities: [
				{
					name: 'Disassemble',
					cost: 0,
					school: "@eval GOLD",
					rules: "Destroy Wall of Stone, restore one mana.",
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						set(creature.destroyed, true),
						add(game.players[creature.controller].resources, 1),
					]
					  where creature = info.get_creature(game)",
				}
			]
		}
	},
    
   	"Gatehouse": {
		name: "Gatehouse",
		set: "core",
		rarity: 0,
		type: "creature",
		artist: "lucy",
		cost: 4,
		loyalty_cost: 2,
		portrait: "gatehouse.png",
		portrait_focus: [429,236],
		portrait_focus_height: 110,
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 7,
			armor: 1,
            abilities: ['Ranged'],
			attack: 2,
            passive_abilities: [{
                name: 'Open the Gates',
                rules: "You may summon creatures in front of Gatehouse",
				allows_summoning: "def(class game_state game, class creature creature, class creature target) ->[Loc]
					if(not target.is_land, 
						filter(game.all_locs, (game.locs_adjacent(value, creature.loc) and value[0] = creature.loc[0] or value = creature.loc) and game.creature_at_loc(value) = null), 
						[])
				",
			}],
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
		}
	},

	"Marlank Wall": {
		name: "Marlank Wall",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			armor: 1,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
		}
	},

	"Guard Post": {
		name: "Guard Post",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 5,
		loyalty_cost: 1,
		portrait: "guard-post.png",
		artist: "sara",
		school: "@eval GOLD",
		creature: {
			life: 8,
            abilities: ['Ranged'],
			attack: 3,
			image_num: 0,
			is_building: true,
            passive_abilities: [{
				name: "Bastion",
				rules: "Attacks all adjacent enemies",
			}],

			targets_attacking: "def(class game_state game) ->[class creature]
			if(has_action = false or attack <= 0 or is_reloading(game), [],
			  filter(map(target_locs, if(target and target.controller != controller, target) where target = game.creature_at_loc(value)), value != null)
			   ) where target_locs = game.get_adjacent_locs(loc)",
		}
	},

	"Oldric's Trap": {
		name: "Oldric's Trap",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval GOLD",
		portrait: "oldrics-trap.png",
		artist: "lisanguyen",
		rules: "<b>0 Energy&emdash;</b>+1 at start of your turn.",
		creature: {
			tags: ["Trap"],
			is_land: true,
			triggered_abilities: [{
                name: 'Spike Trap',
                rules: "When an enemy enters, the trap is destroyed, the enemy takes <b>X</b> damage.",
				on_moved_over_by_creature: "def(class creature trap, class game_state game, class creature creature) ->commands
			  	if(creature.controller != trap.controller,
			 	[
					 creature.inflict_combat_damage(game, trap, trap.energy),
					 set(trap.destroyed, true)
				])",
			}],

			on_begin_turn: "def(class game_state game) ->commands
			                 if(game.current_player_index = me.controller,
							    add(me.energy, 1))",
		}
	},
    
    "Hill": "Highlands",
	
	"Highlands": {
		name: "Highlands",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval GOLD",
		portrait: "highlands.png",
		portrait_focus: [567,268],
		portrait_focus_height: 200,
		artist: "stephenwang",
		help_strings: ["Valiant"],
		rules: "Creatures and buildings in this tile are <i>Valiant</i>.",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",

		creature: {
			tags: ["Terrain"],
			is_land: true,
            portrait: "highlands.png",
			static_ability_effect: "if(creature.loc = target.loc and not target.is_land, target.add_ability_static_duration('Valiant'))",
		},
	},
	"Armed to the Teeth": "Anthem of Battle",
	
	"Anthem of Battle": {
		name: "Anthem of Battle",
		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "anthem-of-battle.png",
		portrait_focus: [420,271],
		portrait_focus_height: 250,
		artist: "stephenwang",
		school: "@eval GOLD",
		cost: 4,
		loyalty_cost: 2,
		rules: "Your creatures gain +1/+1 and +1 armor.",
		on_play: "def(class game_state game, class message.play_card info) ->commands map(game.creatures, creature, if(game.current_player_index = creature.controller and (not creature.is_land) and (not creature.is_building), [
			add(creature.armor, 1),
			add(creature.life, 1),
			add(creature.attack, 1)
		]))",
//		wide_particles: [{ effect: 'anthem_zero', }, ],  // TODO reactivate this later
	},

	"Toughness": "Testudo",
   
	"Testudo": {
		name: "Testudo",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval GOLD",
		portrait: "toughness.png",
		artist: "lordbob",
		cost: 1,
		loyalty_cost: 2,
		resolve_effect: 'popup',
		resolve_launch: { type: 'testudo_launch' },
		resolve_delay: 10,
		ai_flags: "@eval [AI_CARD_NEVER_TARGET_ENEMIES]",
		sound_resolve: 'gameplay/spell_equip_metal_armor',
        is_response: true,
		rules: "Target creature gains +4 armor until the end of the turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
            game.creature_at_loc_or_die(info.targets[0]).apply_effect_until_end_of_turn('armor', 4, 'blazing_shield_creature_effect')
        ",
	},
   
	"Tactical Advantage": {
		name: "Tactical Advantage",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval GOLD",
		portrait: "toughness.png",
		hue_shift: 0.5,
		cost: 1,
		loyalty_cost: 1,
		resolve_effect: 'popup',
		resolve_launch: { type: 'testudo_launch' },
		resolve_delay: 10,
		ai_flags: "@eval [AI_CARD_NEVER_TARGET_ENEMIES]",
		sound_resolve: 'gameplay/spell_equip_metal_armor',
		rules: "Target creature gains +2/+2 until the end of the turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			target.apply_effect_until_end_of_turn('attack', 2),
			target.apply_effect_until_end_of_turn('life_shield', 2, 'blazing_sword_creature_effect'),
		]
	   where target = game.creature_at_loc_or_die(info.targets[0])",
	},

	"Tactical Maneuver": {
		name: "Tactical Maneuver",
		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "tactical-maneuver.png",
		artist: "lordbob",
		school: "@eval GOLD",
		cost: 1,
		loyalty_cost: 2,
        is_response: false,
		rules: "Move target friendly creature to vacant adjacent tile",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			switch(size(targets),
			  0, my_creatures_as_possible_targets(game, avatar, targets),
			  1, if(creature, filter(game.all_locs, game.locs_adjacent(value, creature.loc) and game.creature_at_loc(value) = null), []) where creature = game.creature_at_loc(targets[0]),
			  null)

		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		  game.creature_at_loc_or_die(info.targets[0]).set_loc(game, info.targets[1])",
	},

	"Desperate Evasion": {
		name: "Desperate Evasion",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval GOLD",
		portrait: "desperate-evasion.png",
		artist: "lordbob",
		cost: 2,
		loyalty_cost: 2,

		is_response: true,

		ai_flags: "@eval [AI_CARD_SAVES, AI_CARD_USE_ONLY_TO_SAVE]",

		rules: "Target creature you control moves to a random adjacent vacant tile",
		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		if(targets = [],
		   map(filter(game.creatures, (not value.is_building) and value.controller = avatar.controller and find(game.get_adjacent_locs(value.loc), game.is_loc_on_board(value) and game.creature_at_loc(value) = null) != null), value.loc)
		 )
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		target.set_loc(game, choose(adjacent), 'leap')
		  where adjacent = filter(game.get_adjacent_locs(target.loc), game.is_loc_on_board(value) and game.creature_at_loc(value) = null)
		  where target = game.creature_at_loc_or_die(info.targets[0])
		",
	},

	//Hacked version for the demo which always goes forward.
	"Desperate Evasion#demo": {
		name: "Desperate Evasion",
		rarity: 0,
		type: "spell",
		school: "@eval GOLD",
		portrait: "desperate-evasion.png",
		artist: "lordbob",
		cost: 2,
		loyalty_cost: 2,

		is_response: true,

		ai_flags: "@eval [AI_CARD_SAVES, AI_CARD_USE_ONLY_TO_SAVE]",

		rules: "Target creature you control moves to a random adjacent vacant tile",
		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		if(targets = [],
		   map(filter(game.creatures, (not value.is_building) and value.controller = avatar.controller and find(game.get_adjacent_locs(value.loc), game.is_loc_on_board(value) and game.creature_at_loc(value) = null) != null), value.loc)
		 )
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		target.set_loc(game, if(same_lane, same_lane, choose(adjacent)), 'leap')
		  where same_lane = find(adjacent, value[0] = target.loc[0])
		  where adjacent = filter(game.get_adjacent_locs(target.loc), game.is_loc_on_board(value) and game.creature_at_loc(value) = null)
		  where target = game.creature_at_loc_or_die(info.targets[0])
		",
	},

    
    "Staged Duel": {
		name: "Staged Duel",
		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "staged-duel.png",
		artist: "lordbob",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
        is_response: false,
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_ONLY_FRIENDS"],
		rules: "Target one of your creatures and a creature adjacent to it. These creatures fight.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			switch(size(targets),
			  0, my_creatures_as_possible_targets(game, avatar, targets),
			  1, if(creature, filter(game.all_locs, game.locs_adjacent(value, creature.loc) and opponent != null and opponent.is_building = false and opponent.is_valid_target(game, avatar.controller, me) where opponent = game.creature_at_loc(value)), []) where creature = game.creature_at_loc(targets[0]),
			  null)

		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
            if(targetA and targetB, 
            game.force_fight(targetA, targetB))
            where targetA = game.creature_at_loc(info.targets[0])
            where targetB = game.creature_at_loc(info.targets[1])",
	},

	"Taxes and Tolls": {
		name: "Taxes and Tolls",
		type: "spell",
		portrait: "school-gold.png",
		school: "@eval GOLD",
		cost: 0,
		loyalty_cost: 2,
		is_response: true,
		rules: "Pay all your mana. Your opponent must pay the same amount of mana or their card fizzles.",

		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		    if(game.stack = [] or not (game.stack[size(game.stack)-1] is class message.play_card), [], null)
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		if(info.choices,
			[
				// do whatever they chose
				if (info.choices[0] = 0,
					they_pay,
					fizzle),
				we_pay
			]
				asserting they_can_pay
			,
			if (they_can_pay,
				game.set_current_choice({
					card: me,
					info: info,
					player_index: 1 - info.player_index, // opponent of who played this card
					text: 'Choose whether to pay ' + str(game.players[info.player_index].resources) + ' mana or to let your card fizzle',
					options: [
							construct('choice.button', {
								text: 'Pay',
								tag: 0,
							}),
							construct('choice.button', {
								text: 'Do not Pay',
								tag: 1,
							})
						],
				}),
				// They can't afford to pay so skip the question
				[
					fizzle,
					we_pay
				]
			)
		)
			asserting game.stack != []
			where fizzle = set(their_spell.force_fizzle, true)
			where we_pay = set(game.players[info.player_index].resources, 0)
			where they_pay = add(game.players[their_spell.player_index].resources, -game.players[info.player_index].resources)
			where they_can_pay = (game.players[their_spell.player_index].resources >= game.players[info.player_index].resources)
			where their_spell = game.stack[size(game.stack) - 1]
		",
	},

	"Market": "Mine",

	"Stalwart Warrior": {
		name: "Stalwart Warrior",
		type: "creature",
		portrait: "stalwart-warrior.png",
//		set: "core",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			game_sounds: "soldier_mace",
			attack: 4,
			life: 3,
			move: 0,
			armor: 3,
		}
	},

	"Guard of the Keep": {
		name: "Guard of the Keep",
		type: "creature",
		portrait: "guard-of-the-keep.png",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval GOLD",

		rules: "Guard of the Keep may be summoned on any construct you control.",

		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [],
				game.players[avatar.controller].summoning_locs(game, creature) +
				filter([bldg.loc | bldg <- game.lands,
								   bldg.controller = avatar.controller],
				       (not game.creature_at_loc(value)))
			)
			asserting creature
		",
		creature: {
			tags: ['Dwarf'],
			attack: 4,
			life: 4,
			move: 1,
			image_num: 42,

			//carries a sword and shield
			overlays: [ { image_num: 13, }, { image_num: 20, } ],
		}
	},

	"Mine": {
		name: "Mine",
		type: "creature",
		set: "core",
		cost: 4,
		artist: "lucy",
		portrait: "mine.png",
		portrait_focus: [359,560],
		portrait_focus_height: 140,
		school: "@eval GOLD",
		flavor_text: "All the riches on the Earth,
and all the riches beneath it too.",

		creature: {
			tags: ["Mine"],
			is_land: true,

			passive_abilities: [{
				name: "Mine",
				icon: 'plus-mana.png',
				rules: '+1 mana pool',

				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.base_income, 1)),
					(def(class player p, map info) ->commands add(p.base_income, -1)),
					{}))
				",
			}],

		}

	},

	"Stormgard Armory": {
		name: "Stormgard Armory",
		type: "creature",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval GOLD",
		rules: "Creatures you control in this lane have +1/+0 and +1 armor.",
		creature: {
			tags: ["Forge"],
			life: 12,
			is_land: true,
			image_num: 0,

			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], [target.apply_static_effect('attack', 1), target.apply_static_effect('armor', 1)])",
		}
	},

	"Dwarf Forge": {
		name: "Dwarf Forge",
		type: "creature",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rules: "Creatures you control in this lane have +1 attack and +1 life.",
		creature: {
			tags: ["Forge"],
			life: 8,
			is_land: true,
			image_num: 0,

			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], [target.apply_static_effect('attack', 1), target.apply_static_effect('life_shield', 1)])",
		}
	},
	
	"Oldric's Guard": {
		name: "Oldric's Guard",
		type: "creature",
		portrait: "oldrics-guard.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 4,
			life: 4,
			move: 1,
			image_num: 71,
			activated_abilities: [{
				name: 'Sacrifice',
				rules: "Sacrifice Oldric's Guard. Your creatures in this lane are Indestructible this turn.",
				cost: 1,
				is_response: true,
				school: "@eval GOLD",
				on_play: "def(class game_state game, class message.play_card info) ->commands [
					set(creature.sacrificed, true),
					[friend.add_ability_until_end_of_turn('Indestructible') |
					 friend <- game.creatures,
					 friend.controller = creature.controller,
					 friend != creature, friend.loc[0] = creature.loc[0]]
				]
				  where creature = info.get_creature(game)",
			}],
		}		
	},

	"Shore Up": {
		name: "Shore Up",
		type: "spell",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		rules: "Target building gains +4 life and +1 armor.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.summoned, creature.is_valid_target(game, avatar.controller, me)])",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  [add(building.life, 4), add(building.armor, 1)]
		          where building = game.creature_at_loc_or_die(info.targets[0])"
	},
	
	"Armour Up": {
		name: "Armour Up",
		type: "spell",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 1,
		is_response: true,
		rules: "Target creature gains +1 armor.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(creature.armor, 1)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Whites of their Eyes": {
		name: "Whites of their Eyes",
		type: "spell",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		rules: "Ranged creatures you control gain +1 range, +2 attack, and First Strike this turn.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null null",
		on_play: "def(class game_state game, class message.play_card info) ->commands map(game.creatures, creature, if(creature.range > 1 and creature.controller = game.current_player, [
			creature.apply_effect_until_end_of_turn('range', 1-creature.range),
			creature.apply_effect_until_end_of_turn('attack', 2),
			creature.add_ability_until_end_of_turn('First Strike')]))",
	},
	
	"Forced March": {
		name: "Forced March",
		type: "spell",
		portrait: "forced-march.png",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
		rules: "Creatures you control get +2 move and -1 life this turn.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null null",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			[ [creature.apply_effect_until_end_of_turn('life', -1),
			   creature.apply_effect_until_end_of_turn('move', 2) ] |
			 creature <- game.creatures,
			 creature.controller = game.current_player_index,
			 not creature.is_building]"
	},
	
	"Blessing of Glothorn": {
		name: "Blessing of Glothorn",
		type: "spell",
		school: "@eval GOLD",
		cost: 0,
		loyalty_cost: 3,
		rules: "All Dwarves gain the ability 'Glothorn\'s Blessing: This creature gets +2 attack and -1 armor this turn.'",
		on_play: "def(class game_state game, class message.play_card info) ->commands map(game.creatures,
			if('Dwarf' in creature.tags and find(creature.activated_abilities, value.name = q(Glothorn's Blessing)) != null, 
			add(creature.activated_abilities, [{
				name: q(Glothorn's Blessing),
				cost: 1,
				school: GOLD,
				rules: 'This creature gets +2 attack and -1 armor this turn.',
				on_play: q(def(class game_state game, class message.play_card info) ->commands [
					creature.apply_effect_until_end_of_turn('attack', 1),
					creature.apply_effect_until_end_of_turn('armor', -1)
				] where creature = info.get_creature(game))
			}])) where creature = class creature :: value)",		
	},

	"Rune Cannon": {
		name: "Rune Cannon",
		type: "creature",
		school: "@eval GOLD",
		cost: 3,
		loyalty_cost: 3,
		creature: {
			tags: ["Cannon"],
			is_land: true,
			image_num: 7,
			attack: 0,
			life: 4,


			on_end_turn: "def(class game_state game) ->commands
			if(game.current_player_index = controller and has_action,
				add(me.energy, 1)
			)",

			activated_abilities: [{
				name: 'Fire',
				cost: 0,
				school: "@eval GOLD",
				loyalty_cost: 1,
				rules: "Remove all energy from this creature, and target creature or fortification is dealt that much damage.",
				possible_targets: "
				def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
				  if(targets = [], map(game.creatures, value.loc), null)",

				on_play: "def(class game_state game, class message.play_card info) ->commands [
					add(game.creature_at_loc_or_die(info.targets[0]).life, -creature.energy),
				]
				  where creature = info.get_creature(game)",

				on_pay_cost: "def(class game_state game, class message.play_card info) ->commands [
					set(creature.energy, 0),
				] where creature = info.get_creature(game)",
			}]
		}
	},
	

	"Training Dummy": {
		name: "Training Dummy",
		type: "creature",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Mechanical'],
			image_num: 77,
			overlays: [ { image_num: 2 }, { image_num: 8 } ],
			attack: 0,
			life: 2,
			move: 0,
		}
	},

	"Onager": {
		name: "Onager",
		type: "creature",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval GOLD",
		portrait: "loading-a-catapult.png",
		creature: {
			tags: ['Mechanical'],
            abilities: ['Ranged'],
			portrait_scale: 0.15,
			portrait_y_offset: -15,
			portrait_x_offset: -15,
			image_num: 78,
			attack: 3,
			life: 2,
			move: 1,
            passive_abilities: [{
				name: "Siege Engine",
				rules: "When attacking a building, Onager deals double damage.",
				static_effect: "def(class game_state game, class creature creature) ->commands 
                [if(size(creature.targets_attacking(game))>0 and creature.targets_attacking(game)[0].is_building, creature.apply_static_effect('attack', creature.attack))
                | target <- game.creatures,
				  (creature = target)
                ]"
			}],
		}
	},
	
	"Catapult": {
		name: "Catapult",
		type: "creature",
		cost: 7,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			tags: ['Mechanical'],
			abilities: ['Ranged'],
			attack: 4,
			life: 6,
			move: 1,
		}
	},

	"Need More Lumber": {
		name: "Need More Lumber",
		type: "spell",
		cost: 0,
		school: 1,
		rules: "Sacrifice a creature you control, you gain 2 mana.",

		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [], [creature.loc | creature <- game.creatures, creature.controller = game.current_player])
		",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		 if(game.current_player = creature.controller,[
		     set(creature.destroyed, true),
			 bind_command(fn, game.players[creature.controller]) where fn = def(class player p) add(p.resources, 2)

		]) where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	"Disarmament": {
		name: "Disarmament",
		type: "spell",
		school: "@eval GOLD",
		cost: 4,
		loyalty_cost: 3,
        is_response: false,
		rules: "All enemy units have 0 attack until end of the turn.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
            [creature.apply_effect_until_end_of_turn('attack', -creature.attack) | creature <- game.creatures, creature.controller != game.current_player]
        ",
	},

    "Shield Bearer": {
		name: "Shield Bearer",
		type: "creature",
        set: "core",
		portrait: "shield-bearer.png",
		artist: "lordbob",
		cost: 3,
		school: "@eval GOLD",
		creature: {
			game_sounds: "soldier_mace",
			tags: ['Human'],
            portrait: "shield-bearer.png",
			attack: 2,
			life: 3,
            armor: 3,
			move: 1,
		}
	},
}
