{
// Heroes
	"Eji, the Summoner": {
		name: "Eji, the Summoner",
		set: "core",
		type: "creature",
		portrait: "eji-the-summoner.png",
		cost: 8,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		rules: "You may summon creatures in tiles adjacent to Eji. You may summon creatures without paying their cost.",
		hero: true,
		creature: {
			tags: ['Human'],
			attack: 8,
			life: 8,
			move: 1,
			sprite_sheet: "mages",
			image_num: 8,

			passive_abilities: [{

				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].add_static_cost_filter(
				     construct('cost_filter', {
						filter_cost: q(def(class player p, class card_base card, int cost) ->int
						   if(card.creature and not card.creature.is_construct, 0, cost)),
					})))",

				allows_summoning: "def(class game game, class creature creature, class creature target) ->[Loc]
					if(not target.is_construct, 
						filter(game.all_locs, (game.locs_adjacent(value, creature.loc) or value = creature.loc) and game.creature_at_loc(value) = null), 
						[])
				",
			}],
		}
	},

	"Morpheus, Lord of Dreams": {
		name: "Morpheus, Lord of Dreams",
		set: "core",
		type: "creature",
		portrait: "morpheus.png",
		cost: 8,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Human'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 8,

			activated_abilities: [
				{
					name: 'Illusion',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval SAPIENZA",
					portrait: "school-scrolls.png",
					rules: "Replace a summoned creature with an illusion. Places the spell which summoned them in your hand.",
					is_response: true,
					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value.is_building = false and value.card_name), value.loc)
						)
					",

					on_play: "
					 def(class game game, class creature creature, class message.play_ability info) ->commands
					([
						// First add the card corresponding to the target to this creatures owner
						set(morpheus_player.hand, morpheus_player.hand + [target.card_name]),
						// Now replace the target with a freshly spawned instance of that unit
						target.transform(game, target),
					] asserting target.card_name is string
					where morpheus_player = game.players[creature.controller]
					where target = game.creature_at_loc_or_die(info.targets[0]))
					+
					([
						// Now set life and starting life to 1
						set(target.life, 1),
						set(target.starting_life, 1),
						// Add the 'Illusion' status effect (purely visual)
						set(target.status_effects, target.status_effects + ['Illusion']),
						// Copy-pasted the `silence` code
						set(target.abilities, []),
						set(target.activated_abilities, []),
						set(target.triggered_abilities, []),
						set(target.range, 0),
						set(target.move, 1),
						set(target.resistance, 0),
						set(target.passive_abilities, []),
					] where target = game.creature_at_loc_or_die(info.targets[0]))"
					// Have to do this again because there is a new creature there now.
				}
			],
		}
	},


// Basic foot soldiers

	"Cunning Wisp": {
		name: "Cunning Wisp",
		set: "core",
		type: "creature",
		cost: 3,
		loyalty_cost: 0,
		portrait: "cunningwisp.png",
		school: "@eval SAPIENZA",
		is_response: true,
		creature: {
			sound_summoned: "creatures/summon-wisp.wav",
			sound_death: "creatures/death-wisp.wav",
			attack: 4,
			life: 1,
			move: 1,

			portrait_x_offset: 90,
			portrait_y_offset: 280,
			portrait_scale: 0.6,

			activated_abilities: [
				{
					name: 'Switch',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval SAPIENZA",
					portrait: "school-scrolls.png",
					rules: "Cunning Wisp exchanges position with another creature you control.",
					is_response: true,
					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and value.controller = creature.controller), value.loc)
						)
					",

					on_play: "
					 def(class game game, class creature creature, class message.play_ability info) ->commands [
					 	set(creature.loc, info.targets[0]),
						set(game.creature_at_loc_or_die(info.targets[0]).loc, creature.loc),
					]"
				}
			]
		}
	},
		
	"Ilz Apprentice": {
		name: "Ilz Apprentice",
		set: "core",
		type: "creature",
		portrait: "ilz-apprentice.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Human'],
			attack: 3,
			life: 4,
			move: 1,
			image_num: 9
		}
	},

	"Acolyte": {
		name: "Acolyte",
		set: "core",
		type: "creature",
		portrait: "acolyte.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "When you cast Acolyte, draw a card.",
		on_play: "def(class game game, class message.play_card info) ->commands [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			tags: ['Human'],
			portrait_y_offset: 210,
			portrait_scale: 0.6,
			attack: 3,
			life: 3,
			move: 1,
		}
	},

	"Mystic Scholar": {
		name: "Mystic Scholar",
		set: "core",
		type: "creature",
		portrait: "mystic-scholar.png",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			activated_abilities: [
				{
					name: 'Consume',
					cost: 1,
					school: "@eval SAPIENZA",
					rules: "Sacrifice this creature, draw 2 cards.",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.destroyed, true),
						game.players[creature.controller].draw_cards(game, 2)
					]"
				}
			],
			tags: ['Human'],
			attack: 5,
			life: 5,
			move: 1,
			image_num: 20
		}
	},

// Mid range creature
	
	"Flesh Golem": {
		name: "Flesh Golem",
		set: "core",
		type: "creature",
		portrait: "golem.png",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
								sound_summoned: "creatures/summon-flesh-golem.wav",
					sound_death: "creatures/death-flesh-golem.wav",
			activated_abilities: [
				{
					name: 'Re-make',
					cost: 2,
					school: [1,4],
					is_response: false,
					rules: "Destroy Flesh Golem and summon a new Flesh Golem in its place.",
					is_usable: "def(class game game, class creature creature) ->bool true",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.destroyed, true),
						game.summon_creature(construct('creature', {
							name: 'Flesh Golem',
							tags: ['Construct', 'Golem'],
							school: SAPIENZA,
							attack: 8,
							controller: creature.controller,
							life: 8,
							move: 1,
							initiative: 20,
							image_num: 75,
							loc: creature.loc,
							activated_abilities: creature.activated_abilities,
							}))
					]"
				}
			],
			tags: ['Construct', 'Golem'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 75
		}
	},
    
    	"Channeler": {
		name: "Channeler",
		set: "core",
		type: "creature",
		portrait: "channeler.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval SAPIENZA",
        flavor_text: "Once power can be channeled, it becomes fluid: flexable and conservable.",
		rarity: 0,
		creature: {
			tags: ['Human'],
			attack: 4,
			life: 7,
			move: 1,
			sound_summoned: "creatures/summon-dark-emissary.wav",
			sound_death: "creatures/death-dark-emissary.wav",
			initiative: 20,
			image_num: 43,
			
			activated_abilities: [
			{
				name: "Draw Power",
				cost: 1,
				school: "@eval SAPIENZA",
				is_response: true,
				rules: "Take half of a friendly creatures attack.",
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.controller = creature.controller])
				",
				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
				[
					add(creature.attack, (target_creature.attack/2)),
                    add(target_creature.attack, -(target_creature.attack/2)),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			},
            {
				name: "Channel Power",
				cost: 2,
				school: "@eval SAPIENZA",
				is_response: true,
				rules: "Give half your attack to a friendly creature.",
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.controller = creature.controller])
				",
				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
				[
					add(target_creature.attack, (creature.attack/2)),
                    add(creature.attack, -(creature.attack/2)),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			},
			],
		}
	},
	
	"Blink Mage": {
		name: "Blink Mage",
		set: "core",
		type: "creature",
		cost: 7,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			activated_abilities: [
				{
					name: 'Blink',
					sound_resolve: 'teleport.wav',
					cost: 1,
					school: ["@eval SAPIENZA"],
					is_response: true,
					rules: "Blink Mage blinks to the opposite lane, if a space is available",
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], if(game.creature_at_loc(target_loc) = null, [target_loc], []), null)
						where target_loc = [game.columns - creature.loc[0] - 1, creature.loc[1]]
					",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.loc, info.targets[0])
					]"
				}
			],
			tags: ['Human', 'Mage'],
			attack: 6,
			life: 6,
			move: 1,
			image_num: 75
		}
	},

//Spells

	"Translocate": {
		name: "Translocate",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 4,
		loyalty_cost: 4,
		is_response: true,
		rules: "Two target creatures exchange ownership and location.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(size(targets) >= 2, null,
			 if(res != null, filter(res, value not in targets))
		     where res = all_creatures_as_possible_targets(game, nplayer, []))
		",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			a.set_loc(b.loc, 'move'),
			b.set_loc(a.loc, 'move'),
			set(a.controller, b.controller),
			set(b.controller, a.controller),
		] where a = game.creature_at_loc_or_die(info.targets[0])
		  where b = game.creature_at_loc_or_die(info.targets[1])
		",
	},

	"Tactical Blunder": {
		name: "Tactical Blunder",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rules: "Change the summoning location of target creature currently being summoned.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets != [], null, 
			 if(summoning and summoning.card, summoning.card.possible_targets(game, summoning.player_index, []), [])
			 where summoning = class message.play_card|null <-
			    find(reverse(game.stack), is_creature(value)))
		     where is_creature = overload(
			 	def(class message.play_card info) ->bool
				  info.card.type = 'creature' and
				  info.card != null and
				  (
				  creature_obj != null and
				  creature_obj.is_construct = false and
				  creature_obj.is_building = false
				  where creature_obj = info.card.creature_object) and
				  size(info.targets) = 1
				    asserting info.card,
				def(any info) ->bool false
			 )",
		on_play: "def(class game game, class message.play_card info) ->commands
		  set(summoning.targets, info.targets)
			 where summoning = class message.play_card <-
			   find(reverse(game.stack), is_creature(value))
		     where is_creature = overload(
			 	def(class message.play_card info) ->bool info.card.type = 'creature' and size(info.targets) = 1
				   asserting info.card,
				def(any info) ->bool false
			 )",

	},

	"Eji's Cunning": {
		name: "Eji's Cunning",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		rules: "Change the targets of an invocation that is being cast.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
			if(size(game_stack) = 0 or not (back(game_stack) is class message.play_card)
			   or (card_being_played = null or card_being_played.type != 'invocation'
			       where card_being_played = (class message.play_card <- back(game_stack)).card),
			[],
			card.possible_targets(game, msg.player_index, targets)
			where card = class card <- msg.card
			where msg = class message.play_card <- back(game_stack))

			//get the game stack, but if we ourselves are the card on top of the game stack,
			//we should pop ourselves off.
			where game_stack = if(our_stack_index = -1, game.stack, game.stack[:our_stack_index])
			where our_stack_index = index(game.stack, our_stack_frame)
			where our_stack_frame = find(game.stack, if(value is class message.play_card, (class message.play_card <- value).card = me, false))
		",

		on_play: "def(class game game, class message.play_card info) ->commands
		  set(msg.targets, info.targets)
			where card = class card <- msg.card
			where msg = class message.play_card <- back(game.stack)
		",
	},

	"Scry": {
		name: "Scry",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 0,
		loyalty_cost: 3,
		rules: "Look at the top 3 cards of your deck, put one of them into your hand and the rest on the bottom of your deck.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.scry(3, {card: me}, info)",
	},
	"Endless Studies": {
		name: "Endless Studies",
		set: "core",
		type: "invocation",
		portrait: "endless-studies.png",
		school: "@eval SAPIENZA",
		is_cantrip: true,
		cost: 0,
		loyalty_cost: 2,
		rules: "Draw two cards.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.players[game.current_player].draw_cards(game, 2)",
	},
	"Fireball": {
		name: "Fireball",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "fireball.png",
		cost: 3,
		loyalty_cost: 2,
	//	resolve_effect: "fire",
		rules: "Deal six damage to target creature or player.",
		possible_targets: "all_creatures_and_players_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -6),

		  //targeting a creature
		  add(creature.life, -max(0, 6 - creature.resistance))
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]))"
	},

	"Counter Spell": {
		name: "Counter Spell",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 1,
		loyalty_cost: 6,
		is_response: true,
		rules: "Make your opponent's spell currently being cast fizzle out",
		possible_targets: "
		  def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		    if(game.stack = [] or not (game.stack[size(game.stack)-1] is class message.play_card), [], null)
		",

		on_play: "def(class game game, class message.play_card info) ->commands
			set(game.stack[size(game.stack)-1].force_fizzle, true)
			asserting game.stack != []
		",
	},

	"Astral Walk": {
		name: "Astral Walk",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		
		rules: "Move target creature one tile forwards or backwards.",

		possible_targets: "
		  def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, nplayer, me), not creature.is_building],
			 if(size(targets) = 1,
			   filter([[targets[0][0], targets[0][1]+col] | col <- [-1,1]],
				      game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null)
			 ))",
		on_play: "def(class game game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).loc, info.targets[1])"
	},
	
	"Polymorph": {
		name: "Polymorph",
		set: "core",
		type: "invocation",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		is_response: true,
		rules: "Transform target creature into a Giant Frog.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands target.transform(game, lib.citadel.create_creature('Giant Frog'))
			asserting size(info.targets) = 1
			where target = game.creature_at_loc_or_die(info.targets[0])
		",
	},

//Constructs

	"Library": {
		name: "Library",
		set: "core",
		type: "creature",
		portrait: "greatlibrary.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "+1 hand size",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Library"],
			life: 6,
			is_construct: true,
			image_num: 8,
			passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
			}]
		}
	},

	"House of Meditation": {
		name: "House of Meditation",
		set: "core",
		type: "creature",
		portrait: "greatlibrary.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "When you cast House of Meditation, draw a card",
		on_play: "def(class game game, class message.play_card info) ->commands [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			is_construct: true,
		}
	},

	"Great Library of Turim": {
		name: "Great Library of Turim",
		set: "core",
		type: "creature",
		portrait: "greatlibrary.png",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "Whenever you cast a spell, draw a card.",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Library"],
			life: 6,
			is_construct: true,
			image_num: 8,
			triggered_abilities: [{
				name: 'Study',
				rules: 'Whenever you cast a spell, draw a card.',
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller,
					   player.draw_cards(game, 1))
				",
			}],
		}
	},


///// END OF MAIN SET, RANDOM/CANDIDATE CARDS BELOW //////


	"Blink": {
		name: "Blink",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		
		rules: "Move target creature to the same column in target lane.",

		possible_targets: "
		 def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, nplayer, me), not creature.is_building],
			 if(size(targets) = 1,
				[[row, targets[0][1]] | row <- range(game.rows), game.is_loc_on_board([row, targets[0][1]]), game.creature_at_loc([row, targets[0][1]]) = null]
			 ))",
		on_play: "def(class game game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).loc, info.targets[1])"
	},

	"Divine the Future": {
		name: "Divine the Future",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 2,
		loyalty_cost: 3,
		rules: "Look at the top 5 cards of your deck, discard them or put them back.",
		on_play: "def(class game game, class message.play_card info) ->commands if(info.choices, [
			if(info.choices[0] = 1, [
				map(game.player_obj.deck[:5],
				    game.player_obj.discard_visible(game, lib.citadel.create_card(value))),
				set(game.player_obj.deck, game.player_obj.deck[5:]),
			])
		],
		 if(game.player_obj.no_cards_to_draw, null,
		 [
		 	set(game.player_obj.deck, cards.deck),
		 	set(game.player_obj.discard_pile, cards.discard_pile),
			game.set_current_choice({
				card: me,
				info: info,
				text: 'Choose whether to discard the cards',
				options:
				map(cards.deck[:depth],
				construct('choice.card', {
					card: value,
					tag: -1,
				})) +
				
				[
				construct('choice.button', {
					tag: 0,
					text: 'Keep',
				}),
				construct('choice.button', {
					tag: 1,
					text: 'Discard',
				})
				]
			}),
		 ] where cards = game.player_obj.guarantee_deck_size(game, depth))
		) where depth = 5
		",
	},

	"Ejalah, the Summoner": {
		name: "Ejalah, the Summoner",
		type: "creature",
		portrait: "ejalah-the-summoner.png",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		rules: "You may summon creatures in tiles adjacent to Ejalah",
		creature: {
			tags: ['Mage'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 0,
			sprite_sheet: "mages",
			allows_summoning: "def(class game game, class creature target) ->[Loc]
			if(not target.is_construct,
			  filter(game.all_locs, (game.locs_adjacent(value, loc)) and
			         game.creature_at_loc(value) = null), [])",
		}
	},

	"Golem": "Flesh Golem",

	"Mana Gem": {
		name: "Mana Gem",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 1,
		loyalty_cost: 2,
		rules: "Mana does not drain from your mana pool this turn",
		on_play: "def(class game game, class message.play_card info) ->commands
			game.players[game.current_player].apply_static_effect(
				def(class player p, map info) add(p.hoard, 1),
				def(class player p, map info) add(p.hoard, -1),
				{}, DURATION_BEGINNING_NEXT_TURN
			)",
	},

	"Giant Frog": {
		name: "Giant Frog",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Frog'],
			attack: 6,
			life: 4,
			move: 1,
			image_num: 73
		}
	},

	"Charge!": {
		name: "Charge!",
		type: "invocation",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		rules: "Target creature gains Charge.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['Charge'])
					asserting size(info.targets) = 1",
	},
	
	"Council of Seven": {
		name: "Council of Seven",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 4,
		loyalty_cost: 3,
		rules: "Discard your hand, draw seven cards.",
		on_play: "def(class game game, class message.play_card info) ->commands [
			game.player_obj.discard_cards(game, range(size(game.player_obj.hand))),
			game.player_obj.draw_cards(game, 7)
		]",
	},
	
	"Confusion": {
		name: "Confusion",
		type: "invocation",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 3,
		loyalty_cost: 3,
		rules: "You gain control of target creature this turn. This creature cannot enter the endzone this turn.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		 [set(creature.controller, game.current_player_index),
			set(creature.can_enter_endzone, false),
			creature.add_triggered_ability_until_end_of_turn({
				on_end_turn: 'def(class creature creature, class game game) ->commands [set(creature.controller, int<- args.original_controller), 
					set(creature.can_enter_endzone, args.original_enter_endzone)]',
				args: { original_controller: creature.controller, original_enter_endzone: creature.can_enter_endzone }
			})]
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Humboldt's Curse": {
		name: "Humboldt's Curse",
		type: "invocation",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 2,
		loyalty_cost: 1,
		rules: "Target creature gets &-;&1;&move;.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play_on_creature: "def(class game game, class creature target) ->commands [add(target.move, -1)]",
	},
	
	"Humboldt's Trick": {
		name: "Humboldt's Trick",
		type: "invocation",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 3,
		loyalty_cost: 2,
		rules: "Target creature gets &+;&1;&move; and &-;&2;&attack;.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands [add(creature.move, 1), add(creature.attack, -2)]
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Rolland's Little Helper": {
		name:  "Rolland's Little Helper",
		type: "creature",
		school: "@eval SAPIENZA",
		cost: 3,
		loyalty_cost: 2,
		creature: {
			activated_abilities: [
				{
					name: 'Sacrifice',
					school: "@eval SAPIENZA",
					is_response: true,
					cost: 2,
					rules: "Sacrifice this creature, draw 3 cards.",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						game.player_obj.draw_cards(game,3), 
						set(creature.destroyed, true)]",
				}
			],
			tags: ['Arcane'],
			attack: 6,
			life: 6,
			move: 1,
			image_num: 49
		}
		
	},

	"Read Mind": {
		name: "Read Mind",
		type: "invocation",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval SAPIENZA",
		rules: "Look at your opponent's hand.\nYou gain +&1;&mana;.",

		on_play: "def(class game game, class message.play_card info) ->commands if(info.choices, null, [
		add(game.player_obj.resources, 1),
		if(game.opponent_obj.hand, game.set_current_choice({
			card: me,
			info: info,
			text: q(Look at your opponent's hand. Click a card when they're done.),
			options: map(game.opponent_obj.hand, construct('choice.card', {
				card: value,
				tag: index,
			}))
		}))])",
	},
	
	"Tower of Levitation": {
		name: "Tower of Levitation",
		type: "creature",
		cost: 3,
		loyalty_cost: 4,
		school: 4,
		rules: "Creatures you control in this lane have the ability: 'Levitate: This creature gains Flying this turn.'",
		creature: {
			tags: ["Tower"],
			life: 6,
			is_construct: true,
			image_num: 5,
			static_ability_effect: "if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0], 
				target.add_ability_static_duration({
					name: 'Levitate',
					cost: 2,
					school: 4,					
					is_response: true,
					rules: 'Gain Flying until the end of the turn',
					is_usable: 'def(class game game, class creature creature) ->bool not (q(Flying) in creature.abilities)',
					on_play: 'def(class game game, class creature creature, message.play_ability info) ->commands creature.add_ability_until_end_of_turn(q(Flying))'
				})
			)",
		}
	},
	
	"Golem Foundry": {
		name: "Golem Foundry",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 4,
		rules: "At the end of your turn, Golem Foundry gains &+;&1;&energy; if it has &0;&exhaust;.\nAt the beginning of your turn, if Golem Foundry has &3;&energy;, sacrifice it, summon a 5/5/1 'Iron Golem' creature in its place.",
		creature: {
			tags: ['Construct', 'Foundry'],
			life: 6,
			is_construct: true,
			image_num: 5,
			on_end_turn: "def(class game game) ->commands
				if(game.current_player_index = controller and not is_exhausted,
					add(me.energy, 1)
			)",
			on_begin_turn: "def(class game game) ->commands
			  if(me.energy = 3 and game.current_player_index = controller, [
				set(me.destroyed, true),
				game.summon_creature(construct('creature', {
					name: 'Iron Golem',			
					tags: ['Construct', 'Golem'],
					abilities: ['Haste'],
					school: 4, 
					attack: 10,
					controller: game.current_player_index,
					life: 10,
					move: 1,
					initiative: 20,
					image_num: 76,
					loc: me.loc,
				}))
			])",
		},
	},
	
	"Duff's Device": {
		name: "Duff's Device",
		type: "invocation",
		cost: 3,
		loyalty_cost: 3,
		school: 4,
		rules: "Creatures on Duff's Device can move to other Duff's Devices.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) -> [Loc]|null
		   if(size(targets) = 2, null,
		      filter(game.players[nplayer].summoning_locs(game, construct('creature', {name: q(Duff's Device), school: 4, is_construct: true, life: 6, image_num: 5})),
			         not (value in targets)))",
		on_play: "def(class game game, class message.play_card info) ->commands
		 map(info.targets, game.summon_construct(construct('creature', {
			name: q(Duff's Device),
			tags: ['Construct', q(Duff's Device)],
			school: 4,
			life: 6,
			controller: game.current_player,
			loc: value,
			image_num: 5,
			is_construct: true,
			static_ability_effect: q(if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0], 
				target.add_ability_static_duration({
					name: 'Teleport',
					cost: 3,
					school: 4,					
					is_response: true,
					exhausts_creature: true,
					rules: q(Teleport to another lane with a Duff's device in it),
					is_usable: q(def(class game game, class creature creature) ->bool
					   not ('Exhausted' in creature.status_effects)),
					possible_targets: q(def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], [[construct.loc[0], creature.loc[1]] | construct <- game.creatures, 
							q(Duff's Device) in construct.tags, 
							construct.controller = game.current_player_index, 
							creature.loc[0] != construct.loc[0], 
							game.creature_at_loc([construct.loc[0], creature.loc[1]]) = null]
						)
					),
					on_play: q(def(class game game, class creature creature, message.play_ability info) ->commands set(creature.loc, info.targets[0]) asserting size(info.targets) = 1),
				})
			))
		})))"
	},

	"Maxims and Arrows": {
		name: "Maxims and Arrows",
		type: "invocation",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval SAPIENZA",
		rarity: 0,
		rules: "Target creature gets a wound and &+;&1;&resist; for each &scrolls; creature you control.",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(class game game, class creature target) ->commands
			[add(target.life, -scrolls), add(target.resistance, scrolls)]
			where scrolls = count(game.creatures, value.controller = game.current_player_index and (SAPIENZA in value.school))
		",
	},
}
