{
	"Spell Warden": {
		name: "Spell Warden",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "spell-warden.png",
		cost: 3,
		school: "@eval SAPIENZA",

		creature: {
			attack: 3,
			life: 3,
			triggered_abilities: [{
				name: 'Spellbound',
				rules: "When you cast a spell, Spell Warden gets +1/+1",
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(info.player_index = creature.controller and info.card and info.card.type = 'spell', [
						add(creature.attack, 1),
						add(creature.life, 1),
					])
				",
			}],
		}
	},

	"Fate Seer": {
		name: "Fate Seer",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "fate-seer.png",
		portrait_focus: [482,260],
		portrait_focus_width: 200,
		portrait_focus_height: 200,
		cost: 4,
		school: "@eval SAPIENZA",

		creature: {
            tags: ['Human'],
			attack: 4,
			life: 4,
			passive_abilities: [{
                name: 'Seer',
                rules: "While unblocked, your opponent's hand is revealed.",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.is_unblocked(game),
				   game.players[creature.controller].add_static_effect(
				      construct('static_effect', {
					    apply_fn:  def(class player player, map info)->commands add(player.can_see_enemy_hand, 1),
						revert_fn: def(class player player, map info)->commands add(player.can_see_enemy_hand, -1)
					})))
				",
			}],
		},
 },
 
 "Ilz Riddlespinner": {
		name: "Ilz Riddlespinner",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "ilz-riddlespinner.png",
		cost: 6,
        loyalty_cost: 2,
		school: "@eval SAPIENZA",

		creature: {
			attack: 5,
			life: 5,
			passive_abilities: [{
				name: "Light and Shadow",
				rules: "Enemies engaged with <i>Ilz Riddlerspinner</i> have -4 armor and -4 attack.",
				static_effect: "def(class game game, class creature creature) ->commands
					if(not creature.targets_attacking(game) = [],
                    [creature.targets_attacking(game)[0].apply_static_effect('resistance', -4),
                     creature.targets_attacking(game)[0].apply_static_effect('attack', -4)])
				",
			}],
		},
 },
 
 "Dream Eater": {
		name: "Dream Eater",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "dream-eater.png",
		cost: 3,
        loyalty_cost: 0,
		school: "@eval SAPIENZA",

		creature: {
			attack: 5,
			life: 2,
			passive_abilities: [{
                name: 'Dream Feast',
                rules: "While unblocked, your your hand size is at +1 and your enemies hand size is at -1",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.is_unblocked(game),
				   [game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}),
                    if(creature.controller >= 0,
				   game.players[(creature.controller+1)%2].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					{}))])
				",
			}],
		},
 },

 "Fire Elemental": {
		name: "Fire Elemental",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "fire-elemental.png",
		portrait_focus: [370,175],
		portrait_focus_width: 200,
		portrait_focus_height: 200,
		artist: "lisanguyen",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
        
		school: "@eval SAPIENZA",
		creature: {
            sound_summoned: "creatures/summon-flesh-golem.wav",
            sound_death: "creatures/death-flesh-golem.wav",
            abilities: ['Haste'],
			tags: ['Elemental', 'Firebound'],
			attack: 5,
			life: 5,
            
            triggered_abilities: [{
				name: "Raging Blaze",
				rules: "Has <font tag='attack'>+2X </font><font tag='life'>  +X </font>",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.attack, creature.channel *2),
                    add(creature.life, creature.channel),
                    if(construct, set(construct.destroyed, true)),
                ] where construct = game.construct_at_loc(creature.loc)",
            },
            {
				name: "Burnout",
				rules: "Loses 3 life at start of your turn.",
				on_begin_turn: "def(class creature creature, class game game) ->commands
			             if(game.current_player_index = creature.controller,
							 add(creature.life, -3))",
            }],
		}
	}, //end Fire Elemental

// Heroes
	"Eji, the Summoner": "Eji, the Archmage",
	"Eji, the Archmage": {
		name: "Eji, the Archmage",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "eji-the-summoner.png",
		cost: 8,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		hero: true,
		creature: {
			tags: ['Human', 'Mage'],
			attack: 8,
			life: 8,

			triggered_abilities: [
			{
				name: 'Caster',
				rules: 'When you cast a spell, draw a card.
',
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller and info.card and info.card.type = 'spell',
					   player.draw_cards(game, 1))
				",
			},
			],
                             
			passive_abilities: [
			{
                name: 'Wizardry',
                rules: "Your spells have a minimum cost of 0",
				static_effect: "def(class game game, class creature creature) ->commands
				   game.players[creature.controller].add_static_cost_filter(
				     construct('cost_filter', {
						filter_loyalty_cost: 'def(class player p, class card_base card, int cost) ->int
							cost + card.cost
						',

						filter_base_cost: 'def(class player p, class card_base card, int cost) ->int
							if(card.type = q(spell), 0, cost)
						',
					 })
				   )",
			}
			],
		}
	},

// Basic foot soldiers

	"Cunning Wisp": {
		name: "Cunning Wisp",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 3,
		artist: "lucy",
		loyalty_cost: 0,
		portrait: "cunningwisp.png",
		portrait_focus: [515,452],
		portrait_focus_width: 250,
		portrait_focus_height: 100,
		school: "@eval SAPIENZA",
		is_response: true,
		creature: {
			sound_summoned: "creatures/summon-wisp.wav",
			sound_death: "creatures/death-wisp.wav",
			attack: 4,
			life: 1,

			portrait_x_offset: 90,
			portrait_y_offset: 280,
			portrait_scale: 0.6,

			activated_abilities: [
				{
					name: 'Switch',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval SAPIENZA",
					portrait: "cunningwisp.png",
					rules: "Cunning Wisp exchanges position with another creature you control.",
					is_response: true,
					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and value.controller = creature.controller), value.loc)
						)
					",

					on_play: "
					 def(class game game, class message.play_card info) ->commands [
					 	creature.set_loc(info.targets[0]),
						game.creature_at_loc_or_die(info.targets[0]).set_loc(creature.loc),
					] where creature = info.get_creature(game)"
				}
			]
		}
	},
		
	"Ilz Apprentice": {
		name: "Ilz Apprentice",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "ilz-apprentice.png",
		artist: "lordbob",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Human', 'Mage'],
			attack: 2,
			life: 3,
		}
	},

	"Acolyte": {
		name: "Acolyte",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "acolyte.png",
		portrait_focus: [356,347],
		portrait_focus_width: 180,
		portrait_focus_height: 120,
		artist: "lucy",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "When you cast Acolyte, draw a card.",
		on_play: "def(class game game, class message.play_card info) ->commands [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			tags: ['Human', 'Mage'],
			portrait_y_offset: 210,
			portrait_scale: 0.6,
            
			attack: 3,
			life: 3,
		}
	},

	"Morphling": {
		name: "Morphling",
		rarity: 1,
		set: "core",
		portrait: "morphling.png",
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			attack: 3,
			life: 6,
			activated_abilities: [{
				name: 'Transform',
				cost: 1,
                uses_action: false,
				school: "@eval SAPIENZA",
                is_instant: true,
				rules: "Switch attack and life",
				on_play: "def(class game game, class message.play_card info) ->commands [
					set(creature.attack, creature.life),
					set(creature.life, creature.attack),
				] where creature = info.get_creature(game)"
			}],
		},
	},

	"Mage's Apprentice": {
		name: "Mage's Apprentice",
		rarity: 1,
		type: "creature",
		portrait: "mages-apprentice.png",
		set: "core",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",

		creature: {
			attack: 4,
			life: 3,
			triggered_abilities: [{
				name: "Magic Missile",
				rules: "When summoned you may deal 2 damage to a target enemy creature.",
				on_summoned: "def(class creature creature, class game game) ->commands
					//Note: using trigger_ability_cast() allows the player to
					//not use the ability. Use trigger_ability_cast_mandatory()
					//to require them to use it if possible.
					game.trigger_ability_cast(creature, {
						name: 'Magic Missile',
						cost: 0,
						school: SAPIENZA,
						rules: q(Deal 2 damage to a target creature),
						possible_targets: q(enemy_creatures_as_possible_targets),

						on_play: q(def(class game game, class message.play_card info) ->commands
						  target.inflict_damage(game, 2)
						  asserting size(info.targets) = 1
						  where target = game.creature_at_loc_or_die(info.targets[0]))
					})
				",
			}],
            
		}
	},

	"Mystic Scholar": {
		name: "Mystic Scholar",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "mystic-scholar.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			activated_abilities: [
				{
					name: 'Mystic End',
					cost: 1,
                    uses_action: false,
					school: "@eval SAPIENZA",
                    is_instant: true,
					rules: "Sacrifice self, replenish your hand",
					on_play: "def(class game game, class message.play_card info) ->commands [
						player.draw_cards(game, player.calculate_card_draw(game) - size(player.hand)),
						set(creature.destroyed, true),
					] where player = game.players[creature.controller]
					  where creature = info.get_creature(game)"
				}
			],
			attack: 4,
			life: 4,
		}
	},
    
    "Spirit of Intellect": {
		name: "Spirit of Intellect",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "spirit-of-intellect.png",
		portrait_focus: [402,272],
		portrait_focus_height: 200,
		artist: "lisanguyen",
		cost: 5,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Spirit'],
			attack: 0,
			life: 6,
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Adviser",
				rules: "+1 hand size",
			},{
				static_effect: "def(class game game, class creature creature) ->commands
				[creature.apply_static_effect('attack', size(game.players[creature.controller].hand))
                | target <- game.creatures,
				  (creature = target)
                ]",
				
				name: "Power in Knowledge",
				rules: "Spirit of Intellect gains attack equal to the number of cards in your hand.",
			}],
		}
	},

// Mid range creature
        "Pyromancer": {
		name: "Pyromancer",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "pyromancer.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
        flavor_text: "Love is fire, but some love fire more.",
		creature: {
			tags: ['Human', 'Mage', 'Firebound'],
            abilities: ['Reload'],
			attack: 3,
			life: 4,
            range: 1,
			
			activated_abilities: [
			{
				name: "Blast",
				cost: 1,
				school: "@eval SAPIENZA",
				is_response: false,
				uses_action: true,
				rules: "Spend an action Pyromancer, inflict 3 damage to an adjacent creature or building.",
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, game.locs_adjacent(c.loc, creature.loc), c.is_valid_target(game, game.nplayer, me)])
				",
				on_play: "def(class game game, class message.play_card info) ->commands
				[
					target_creature.inflict_damage(game, 3),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])
				  where creature = info.get_creature(game)"
			},
			],
		}
	},
	
	"Blink Mage": {
		name: "Blink Mage",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		portrait: "blink-mage.png",
		artist: "wendyyoon",
		creature: {
			activated_abilities: [
				{
					name: 'Blink',
					sound_resolve: 'creatures/blink.wav',
					cost: 0,
                    uses_action: true,
					school: ["@eval SAPIENZA"],
					is_response: true,
					rules: "Spend an action, Blink Mage blinks to the opposite lane, if a space is available",
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], if(game.creature_at_loc(target_loc) = null, [target_loc], []), null)
						where target_loc = [game.rows - creature.loc[0] - 1, creature.loc[1]]
					",
					on_play: "def(class game game, class message.play_card info) ->commands [
						creature.set_loc(info.targets[0], 'blink')
					] where creature = info.get_creature(game)"
				}
			],
			tags: ['Human', 'Mage'],
			attack: 7,
			life: 7,
		}
	},

//Spells

	"Translocate": {
		name: "Translocate",
		set: "core",
		rarity: 2,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "translocate.png",
		artist: "lisanguyen",
		cost: 3,
		loyalty_cost: 3,
		is_response: true,
		rules: "Two target non-hero creatures exchange ownership and location. Exhaust the creatures.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(targets) >= 2, null,
			 if(res != null, filter(res, value not in targets))
		     where res = map(filter(game.non_building_creatures, not value.hero), value.loc)
			 )
		",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			a.set_loc(b.loc, 'move'),
			b.set_loc(a.loc, 'move'),
			set(a.controller, b.controller),
			set(b.controller, a.controller),
            a.exhaust(),
            b.exhaust(),
		] where a = game.creature_at_loc_or_die(info.targets[0])
		  where b = game.creature_at_loc_or_die(info.targets[1])
		",
	},

	"Tactical Blunder": {
		name: "Tactical Blunder",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "tactical-blunder.png",
		artist: "lordbob",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rules: "Change the summoning location of target creature currently being summoned.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets != [], null, 
			 if(summoning and summoning.card, summoning.card.possible_targets(game, game.players[summoning.player_index].creature_avatar, []), [])
			 where summoning = class message.play_card|null <-
			    find(reverse(game.stack), is_creature(value)))
		     where is_creature = overload(
			 	def(class message.play_card info) ->bool
				  info.card != null and
				  info.card.type = 'creature' and
				  (
				  creature_obj != null and
				  creature_obj.is_construct = false and
				  creature_obj.is_building = false
				  where creature_obj = info.card.creature_object) and
				  size(info.targets) = 1,
				def(any info) ->bool false
			 )",
		on_play: "def(class game game, class message.play_card info) ->commands
		  set(summoning.targets, info.targets)
			 where summoning = class message.play_card <-
			   find(reverse(game.stack), is_creature(value))
		     where is_creature = overload(
			 	def(class message.play_card info) ->bool info.card != null and info.card.type = 'creature' and size(info.targets) = 1,
				def(any info) ->bool false
			 )",

	},

	"Eji's Cunning": {
		name: "Eji's Cunning",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "ejis-cunning.png",
		artist: "lordbob",
		cost: 2,
		loyalty_cost: 5,
		is_response: true,
		rules: "Change the targets of a spell that is being cast.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(size(game_stack) = 0 or not (back(game_stack) is class message.play_card)
			   or (card_being_played = null or card_being_played.type != 'spell'
			       where card_being_played = (class message.play_card <- back(game_stack)).card),
			[],
			card.possible_targets(game, game.players[msg.player_index].creature_avatar, targets)
			where card = class card <- msg.card
			where msg = class message.play_card <- back(game_stack))

			//get the game stack, but if we ourselves are the card on top of the game stack,
			//we should pop ourselves off.
			where game_stack = if(our_stack_index = -1, game.stack, game.stack[:our_stack_index])
			where our_stack_index = index(game.stack, our_stack_frame)
			where our_stack_frame = find(game.stack, if(value is class message.play_card, (class message.play_card <- value).card = me, false))
		",

		on_play: "def(class game game, class message.play_card info) ->commands
		  set(msg.targets, info.targets)
			where card = class card <- msg.card
			where msg = class message.play_card <- back(game.stack)
		",
	},

	"Scry": {
		name: "Scry",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval SAPIENZA",
        is_instant: true,
		portrait: "scry.png",
		artist: "stephenwang",
		portrait_focus: [400,600],
		portrait_focus_width: 240,
		cost: 0,
		loyalty_cost: 3,
		rules: "Look at the top 3 cards of your deck, put one of them into your hand and the rest on the bottom of your deck.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.scry(3, {card: me}, info)",
	},
    
	"Endless Studies": {
		name: "Endless Studies",
		set: "core",
		rarity: 0,
		type: "spell",
		artist: "lucy",
		portrait: "endless-studies.png",
		portrait_focus: [373,314],
		portrait_focus_height: 280,
		school: "@eval SAPIENZA",
		is_instant: true,
		cost: 0,
		loyalty_cost: 2,
		rules: "Draw two cards.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.players[game.current_player].draw_cards(game, 2)",
	},
    
	"Fireball": {
		name: "Fireball",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "fireball.png",
		artist: "lucy",
		portrait_focus: [498,498],
		portrait_focus_height: 200,
		cost: 3,
		loyalty_cost: 2,
		//resolve_effect: "fire",
		arrow_texture: "effects/fire-texture.png",
		rules: "Deal six damage to target creature or player.",
		possible_targets: "all_creatures_and_players_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -6),

		  //targeting a creature
		  creature.inflict_damage(game, 6)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]))",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

	"Fated Shards": {
		name: "Fated Shards",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "fated-shards.png",
		cost: 1,
		loyalty_cost: 3,
		rules: "Discard your hand. Deal 2 damage to a random enemy for each discarded card.",
		
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		null",

		on_play: "def(class game game, class message.play_card info) ->commands
		[
			map(player.hand,
			if(target is class player,
			  add(target.life, -2),
			  target.inflict_damage(game, 2)
			)

				where target = class player|class creature :: choose(possible_targets)
			) where possible_targets = [game.players[(info.player_index+1)%2]] + filter(game.creatures, value.controller != info.player_index),
			player.force_discard(game, player.hand),
		] where player = game.players[info.player_index]
		",

	},
    
    "Chain Lightning": {
		name: "Chain Lightning",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "chain-lightning.png",
		artist: "eleazzaar",
		cost: 2,
		loyalty_cost: 3,
	//	resolve_effect: "fire",
		rules: "Target any number of adjacent creatures in a chain. Deal 3 damage to each of them.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building],
			 if(size(new_targets) > 0, new_targets, null))	 
             where new_targets = [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building, creature.is_valid_target(game, avatar.controller, me), game.locs_adjacent(creature.loc, targets[size(targets)-1]), creature.loc not in targets]
             ",
        
		on_play: "def(class game game, class message.play_card info) ->commands
		  map(info.targets, creature.inflict_damage(game, 3)
  where creature = game.creature_at_loc_or_die(value))",
	},

	"Hailstorm": {
		name: "Hailstorm",
		set: "core",
		type: "spell",
		portrait: "hail-storm.png",
		artist: "eleazzaar",
		school: "@eval SAPIENZA",
		cost: 0,
		loyalty_cost: 1,
		rules: "Inflict 1 damage to all creatures.",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures, creature, if((not creature.is_construct) and (not creature.is_building), [
			creature.inflict_damage(game, 1,)]))",
	},


	"Counter Spell": {
		name: "Counter Spell",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "counter-spell.png",
		artist: "eleazzaar",
		cost: 1,
		loyalty_cost: 6,
		is_response: true,
		rules: "Make your opponent's card currently being cast fizzle out",
		possible_targets: "
		  def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		    if(game.stack = [] or not (game.stack[size(game.stack)-1] is class message.play_card), [], null)
		",

		on_play: "def(class game game, class message.play_card info) ->commands
			set(game.stack[size(game.stack)-1].force_fizzle, true)
			asserting game.stack != []
		",
	},

	"Astral Walk": {
		name: "Astral Walk",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "astral-walk.png",
		portrait_focus: [322,132],
		portrait_focus_width: 380,
		artist: "wendyyoon",
		cost: 2,
		loyalty_cost: 4,
		is_response: true,
		
		rules: "Move target creature one tile forwards or backwards.",

		possible_targets: "
		  def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building],
			 if(size(targets) = 1,
			   filter([[targets[0][0], targets[0][1]+col] | col <- [-1,1]],
				      game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null)
			 ))",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.creature_at_loc_or_die(info.targets[0]).set_loc(info.targets[1], 'blink')"
	},
	
	"Polymorph": {
		name: "Polymorph",
		set: "core",
		rarity: 1,
		type: "spell",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		portrait: "polymorph.png",
		artist: "eleazzaar",
		is_response: true,
		rules: "Transform target creature into a 2/2 <i>Giant Frog</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			set(frog.portrait, 'polymorph.png'),
			target.transform(game, frog),
		]
		where frog = lib.citadel.create_creature('Giant Frog')
		where target = game.creature_at_loc_or_die(info.targets[0])
		",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

//Constructs

	"Library": {
		name: "Library",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "greatlibrary.png",
		artist: "lucy",
		portrait_focus: [276,406],
		portrait_focus_width: 200,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Library"],
			life: 6,
			is_construct: true,
			passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Archives",
				rules: "+1 hand size",
			}]
		}
	},

	"House of Meditation": {
		name: "House of Meditation",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "greatlibrary.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "When you cast House of Meditation, draw a card",
		on_play: "def(class game game, class message.play_card info) ->commands [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			is_construct: true,
		}
	},

	"Great Library of Turim": {
		name: "Great Library of Turim",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "great-library-of-turim.png",
		artist: "stephenwang",
		portrait_focus: [246,214],
		portrait_focus_width: 240,
		cost: 4,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
        rules: "Can only be played on top of a Library.",
        possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
        if(targets = [],
			 [creature.loc | creature <- game.permanents, creature.is_valid_target(game, avatar.controller, me), creature.controller = game.current_player_index, creature.is_construct, creature.name='Library'], null)",


		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Library"],
			life: 6,
			is_construct: true,
			triggered_abilities: [{
				name: 'Study',
				rules: 'Whenever you play a card, draw a card.
',
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller,
					   player.draw_cards(game, 1))
				",
			}],
		}
	},
    
    "Mistlands": {
		name: "Mistlands",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		portrait: "mistlands.png",
		rules: "Non-Minerva creatures in this tile have -2 attack.",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "mistlands.png",
			static_ability_effect: "if(creature.loc = target.loc and not target.is_construct and (not SAPIENZA in target.school), target.apply_static_effect('attack', -2))",
		},
	},

//Veiling Glyph is the card

    "Veiling Glyph": {
		name: "Veiling Glyph",
		//set: "core",
		rarity: 1,
		type: "spell",
        portrait: "veiling-glyph.png",
		is_response: false,
        tags: ['Rune'],
		cost: 3,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		rules: "This card is deappreciated.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(avatar.controller+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD}))
                      )), null
                      )",
		   on_play: "def(class game game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Veiling Ward', {
			name: 'Veiling Ward',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Veiling Ward": {
		name: "Veiling Ward",
		type: "creature",
		portrait: "veiling-glyph.png",
		cost: 3,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		rarity: 0,
		creature: {
			tags: ['Ward'],
			abilities: ['Fragile'],
            static_ability_effect: "if((creature.loc = target.loc or game.locs_adjacent(creature.loc, target.loc)) and (not target.is_construct) and (target.controller = creature.controller), target.add_ability_static_duration('Cover'))",
		}
	},

	"Altar of Storms": {
		name: "Altar of Storms",
		type: "creature",
		portrait: "altar-of-storms.png",
		cost: 6,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Altar'],
			portrait_scale: 0.5,
			is_construct: true,

			triggered_abilities: [{
				name: 'Static Charge',
				rules: 'Whenever you play a card, deal one damage to each enemy creature adjacent to any target of the card.',
				on_card_played: "def(class creature altar, class game game, class player player, class message.play_card info) ->commands
				[
					if(player.player_index = altar.controller and info.targets[0][0] != -1, //and is_sapienza_spell,
						if(game.creature_at_loc(info.targets[0]) != null,
							map( filter( game.all_locs, find(info.targets, game.locs_adjacent(value,loc)) != null where loc = value),
								if (target != null and target.controller != altar.controller,
									add(target.life, -1))
								where target = game.creature_at_loc(value))))
					//where is_sapienza_spell = info.card != null and (info.card.school = altar.school or altar.school in info.card.school)
				]",
			}],
		}
	},

"Mage Tower": {
		name: "Mage Tower",
		set: "core",
		rarity: 2,
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		portrait: "mage-tower.png",
		portrait_focus: [490,444],
		portrait_focus_width: 280,
		portrait_focus_height: 160,
		artist: "stephenwang",
		school: "@eval SAPIENZA",
		is_channeled: true,
		rules: "X charges. Imprint with three spells from your hand. It gains these spells as abilities.",
		on_play: "def(class game game, class message.play_card info) ->commands
			if(size(current_choices) = min(3, size(spells)),
			do_summons(game, info),

			if(spells, game.set_current_choice({
				card: me,
				info: info,
				text: 'Choose which spell to imprint',
				options: filter(map(spells, if(index not in current_choices, construct('choice.card', {
					card: value,
					tag: index,
				}))), value != null)
			}))

			)
			where current_choices = info.choices or []
			where spells = filter(game.player_obj.hand, value.type = 'spell')
		",

		creature: {
			is_construct: true,
            tags: ['Tower'],
			on_summoned: "def(class game game) ->commands [
				set(energy, channel),

				map(choices,
					add(me.activated_abilities, [lib.citadel.create_card(card.name, {
						on_play: 'def(class game game, class message.play_card info) ->commands
						          [add(info.get_creature(game).energy,-1), add(info.get_creature(game).actions,-1), base_on_play(game, info)]
								      where base_on_play = (' + (string<- card_info['on_play']) + ')',
						possible_targets: 'def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
						 if(avatar.energy > 0 and avatar.actions>0, if(base_possible_targets is function(class game, class creature, [Loc])->[Loc]|null, base_possible_targets(game, avatar, targets), null), [])
						  where base_possible_targets = (' + str(card_info['possible_targets']) + ')',
					})])
					where card_info = lib.citadel.get_card_info(card.name)
					where card = spells[value]
				)
				where spells = filter(game.player_obj.hand, value.type = 'spell')
			]
			",
		}
	},

///// END OF MAIN SET, RANDOM/CANDIDATE CARDS BELOW //////


	"Blink": {
		name: "Blink",
		set: "core",
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "blink.png",
		artist: "eleazzaar",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		
		rules: "Move target creature to the same column in target lane.",

		possible_targets: "
		 def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building],
			 if(size(targets) = 1,
				[[row, targets[0][1]] | row <- range(game.rows), game.is_loc_on_board([row, targets[0][1]]), game.creature_at_loc([row, targets[0][1]]) = null]
			 ))",
		on_play: "def(class game game, class message.play_card info) ->commands
          game.creature_at_loc_or_die(info.targets[0]).set_loc(info.targets[1], 'blink')"
	},

	"Divine the Future": {
		name: "Divine the Future",
		type: "spell",
		school: "@eval SAPIENZA",
		cost: 2,
		loyalty_cost: 3,
		rules: "Look at the top 5 cards of your deck, discard them or put them back.",
		on_play: "def(class game game, class message.play_card info) ->commands if(info.choices, [
			if(info.choices[0] = 1, [
				map(game.player_obj.deck[:5],
				    game.player_obj.discard_visible(game, value)),
				set(game.player_obj.deck, game.player_obj.deck[5:]),
			])
		],
		 if(game.player_obj.no_cards_to_draw, null,
		 [
		 	set(game.player_obj.deck, cards),
			game.set_current_choice({
				card: me,
				info: info,
				text: 'Choose whether to discard the cards',
				options:
				map(cards[:depth],
				construct('choice.card', {
					card: value,
					tag: -1,
				})) +
				
				[
				construct('choice.button', {
					tag: 0,
					text: 'Keep',
				}),
				construct('choice.button', {
					tag: 1,
					text: 'Discard',
				})
				]
			}),
		 ] where cards = game.player_obj.deck
		) where depth = 5
		)
		",
	},

	"Ejalah, the Summoner": {
		name: "Ejalah, the Summoner",
		type: "creature",
		portrait: "ejalah-the-summoner.png",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		rules: "You may summon creatures in tiles adjacent to Ejalah",
		creature: {
			tags: ['Mage'],
			attack: 8,
			life: 8,
			sprite_sheet: "mages",
			allows_summoning: "def(class game game, class creature target) ->[Loc]
			if(not target.is_construct,
			  filter(game.all_locs, (game.locs_adjacent(value, loc)) and
			         game.creature_at_loc(value) = null), [])",
		}
	},

	"Golem": "Flesh Golem",

	"Giant Frog": {
		name: "Giant Frog",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		portrait: "polymorph.png",
		creature: {
			tags: ['Frog'],
			attack: 2,
			life: 2,
		}
	},

	"Charge!": {
		name: "Charge!",
		type: "spell",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		rules: "Target creature gains Charge.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['Charge'])
					asserting size(info.targets) = 1",
	},
	
	"Council of Seven": {
		name: "Council of Seven",
		type: "spell",
		school: "@eval SAPIENZA",
		cost: 4,
		loyalty_cost: 3,
		rules: "Discard your hand, draw seven cards.",
		on_play: "def(class game game, class message.play_card info) ->commands [
			game.player_obj.discard_cards(game, range(size(game.player_obj.hand))),
			game.player_obj.draw_cards(game, 7)
		]",
	},
	
	"Confusion": {
		name: "Confusion",
		type: "spell",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 3,
		loyalty_cost: 3,
		rules: "You gain control of target creature this turn. This creature cannot enter the endzone this turn.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		 [set(creature.controller, game.current_player_index),
			set(creature.can_enter_endzone, false),
			creature.add_triggered_ability_until_end_of_turn({
				on_end_turn: 'def(class creature creature, class game game) ->commands [set(creature.controller, int<- args.original_controller), 
					set(creature.can_enter_endzone, args.original_enter_endzone)]',
				args: { original_controller: creature.controller, original_enter_endzone: creature.can_enter_endzone }
			})]
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Humboldt's Curse": {
		name: "Humboldt's Curse",
		type: "spell",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 2,
		loyalty_cost: 1,
		rules: "Target creature gets -1 move.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play_on_creature: "def(class game game, class creature target) ->commands [add(target.move, -1)]",
	},
	
	"Humboldt's Trick": {
		name: "Humboldt's Trick",
		type: "spell",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 3,
		loyalty_cost: 2,
		rules: "Target creature gets +1 move and -2 attack.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands [add(creature.move, 1), add(creature.attack, -2)]
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Rolland's Little Helper": {
		name:  "Rolland's Little Helper",
		type: "creature",
		school: "@eval SAPIENZA",
		cost: 3,
		loyalty_cost: 2,
		creature: {
			activated_abilities: [
				{
					name: 'Sacrifice',
					school: "@eval SAPIENZA",
					is_response: true,
					cost: 2,
					rules: "Sacrifice this creature, draw 3 cards.",
					on_play: "def(class game game, class message.play_card info) ->commands [
						game.player_obj.draw_cards(game,3), 
						set(creature.destroyed, true)]
					where creature = info.get_creature(game)",
				}
			],
			tags: ['Arcane'],
			attack: 6,
			life: 6,
		}
		
	},

	"Read Mind": {
		name: "Read Mind",
		type: "spell",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval SAPIENZA",
		rules: "Look at your opponent's hand.\nYou gain 1 mana.",

		on_play: "def(class game game, class message.play_card info) ->commands if(info.choices, null, [
		add(game.player_obj.resources, 1),
		if(game.opponent_obj.hand, game.set_current_choice({
			card: me,
			info: info,
			text: q(Look at your opponent's hand. Click a card when they're done.),
			options: map(game.opponent_obj.hand, construct('choice.card', {
				card: value,
				tag: index,
			}))
		}))])",
	},
	
	"Tower of Levitation": {
		name: "Tower of Levitation",
		type: "creature",
		cost: 3,
		loyalty_cost: 4,
		school: 4,
		rules: "Creatures you control in this lane have the ability: 'Levitate: This creature gains Flying this turn.'",
		creature: {
			tags: ["Tower"],
			life: 6,
			is_construct: true,
			static_ability_effect: "if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0], 
				target.add_ability_static_duration({
					name: 'Levitate',
					cost: 2,
					school: 4,					
					is_response: true,
					rules: 'Gain Flying until the end of the turn',
					is_usable: 'def(class game game, class creature creature) ->bool not (q(Flying) in creature.abilities)',
					on_play: 'def(class game game, message.play_card info) ->commands creature.add_ability_until_end_of_turn(q(Flying)) where creature = info.get_creature(game)'
				})
			)",
		}
	},
	
	"Golem Foundry": {
		name: "Golem Foundry",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 4,
		rules: "DEPRECATED",
		creature: {
			tags: ['Construct', 'Foundry'],
			life: 6,
			is_construct: true,
		},
	},
	
	"Duff's Device": {
		name: "Duff's Device",
		type: "spell",
		cost: 3,
		loyalty_cost: 3,
		school: 4,
		rules: "Creatures on Duff's Device can move to other Duff's Devices.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) -> [Loc]|null
		   if(size(targets) = 2, null,
		      filter(game.players[avatar.controller].summoning_locs(game, construct('creature', {name: q(Duff's Device), school: 4, is_construct: true, life: 6})),
			         not (value in targets)))",
		on_play: "def(class game game, class message.play_card info) ->commands
		 map(info.targets, game.summon_construct(construct('creature', {
			name: q(Duff's Device),
			tags: ['Construct', q(Duff's Device)],
			school: 4,
			life: 6,
			controller: game.current_player,
			loc: value,
			is_construct: true,
			static_ability_effect: q(if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0], 
				target.add_ability_static_duration({
					name: 'Teleport',
					cost: 3,
					school: 4,					
					is_response: true,
					uses_action: true,
					rules: q(Teleport to another lane with a Duff's device in it),
					is_usable: q(def(class game game, class creature creature) ->bool
					   not ('Exhausted' in creature.status_effects)),
					possible_targets: q(def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], [[construct.loc[0], creature.loc[1]] | construct <- game.creatures, 
							q(Duff's Device) in construct.tags, 
							construct.controller = game.current_player_index, 
							creature.loc[0] != construct.loc[0], 
							game.creature_at_loc([construct.loc[0], creature.loc[1]]) = null]
						)
					),
					on_play: q(def(class game game, message.play_card info) ->commands set(creature.loc, info.targets[0]) where creature = info.get_creature(game)),
				})
			))
		})))"
	},

	"Maxims and Arrows": {
		name: "Maxims and Arrows",
		type: "spell",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval SAPIENZA",
		rarity: 0,
		rules: "Target creature gets a wound and 1 armor for each scrolls creature you control.",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(class game game, class creature target) ->commands
			[add(target.life, -scrolls), add(target.resistance, scrolls)]
			where scrolls = count(game.creatures, value.controller = game.current_player_index and (SAPIENZA in value.school))
		",
	},

	"Changing of Seasons": {
		name: "Changing of Seasons",
//		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "changing-of-seasons.png",
		cost: 6,
		loyalty_cost: 3,
		school: "@eval SCROLLS",
		rules: "Summon three cunning wisps.",
		possible_targets: "
		def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		   if(size(targets) = 3, null,
		      filter(game.players[avatar.controller].summoning_locs(game, construct('creature', {name: 'Cunning Wisp', school: SCROLLS})),
			         not (value in targets)))",
		on_play: "def(class game game, class message.play_card info) ->commands
		  map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Cunning Wisp', {
			name: 'Cunning Wisp',
			controller: game.current_player,
			loc: value,
			portrait: 'cunningwisp.png',
			// XXX: why is this portait line ^ necessary?
		})))"
	},
}
