/*
Anybody can put cards in this set if he or she would like to design a few cards for the game.  


//	Card Lists
//--------------------- Entropia -------------------------
Death Knight: 	Entropia, 6 mana, creature: 7/6, devote 4 -> Revenant
Master Assassin:	Entropia, 6+2 mana, creatureï¼š 7/5, lethal; Assassinate
Sangromancer: 	Entropia, 4 mana, creautre: 5/4, activable(2) -> Drain 1 life from an adjacent creature
Cancer Mage:  	Entropia, 6 mana, creature: 5/5, activable(1A) -> Poison target creature; triggered -> at the end of each turn, adjacent poisoned creature get -1/-2
Devil Hound:	Entropia, 5 mana, creature: 6/5, triggered -> get +1/+1 when the player discard for the first time in a turn
Suck Blood:		Entropia, 3+1 mana, spell: target creature lose 3 life; Devote 2-> you get 3 life.
Suffering:		Entropia, 2+2 mana, spell:	Target creature or player loses 2 life; shuffle this spell into your deck.
Plague:			Entropia, 1+3 mana, spell:	Enchant a land, its controllor lose 2 life at the start of his turns.
Blood Burn:		Entropia, 0+2 mana, spell: 	pay 5 life, get 3 mana.
Rabidness:		Entropia, 2+1 mana, spell response:	Target creature gets +3/-2 this turn.
Spread Disease:	Entropia, 2+3 mana, spell:	Target a tile, poison all creatures in radius 1.
Blightstone:	Entropia, 2+1 mana, land: activable(1A) -> poison target creature in the lane
Cursed Armor:	Entropia, 1+2 mana, equipment:	Target creature summoned this turn gains -2 armor; effect -> poisons all adjacent enemy creatures

//---------------------- Aether ---------------------------
Chosen Warrior: 		Aether, 4 mana, creature: 5/4, devote 4, gain +0/+3 and cover
White Mage:				Aether, 3 mana, creature: 4/3, activable(2A): Let an adjacent creature get 2 life.
Converter:				Aether, 4 mana, creature:		5/3, The lands this creature moves into become Fragile.
Relinquisher:			Aether, 4+1 mana, creature:		4/4, Gain +1/+1 when you discard a non-Aether card.
Warrior of Light:		Aether, 7 mana, creature: 2/2, gain +2X/+2X on summon, where X is your devotion to Aether.
Angelic Favor:			Aether, 3 mana, spell:	Target creature get +2/+2.		Devote 5: indestructible and +2/+2 for the turn
Prayer of Endurance:	Aether, 1+1 mana, spell:	Target creature gets +0/+2; shuffle this spell into your deck
Tower of Faith:			Aether, 5+1 mana, land: 	Non Aether cards have 1 more loyalty cost.
Temple of Death Angel:	Aether, 6 mana, Heroic land:	Fragile; At the start of your turns, gain energy equal to your devotion to Aether. When the land has 50 energy, you win.


//---------------------- Gaea -----------------------------
Rafa Snake:			Gaea, 3 mana, creature: 4/3, haste; Feral unless devote 2.
Island Turtle:		Gaea, 3+1 mana, creature: 2/8
Spitter:			Gaea, 6 mana, creature:	7/5, At the start of each turn, Spitter deals 1 damage to adjacent enemy creatures.
Awaken the Beast:	Gaea, 3+2 mana, spell:	Put an Awakened Beast into hand
Vigour:				Gaea, 0+3 mana, spell:	Restore 2 mana; shuffle this spell into your deck.
Camouflage:			Gaea, 2 mana, spell:	Target friendly creature has <i>Cover</i> this turn.	Devoted 4-> Target creature has Cover permanently instead. 
Deep Cave:			Gaea, 3 mana, land:	While not engaged, creatures in this tile have <i>Cover</i> and +4 armor.
Dense Woodland:		Gaea, 4+2 mana, land:	Activable(2+2):	Summon an 8/8 immobile Treant Defender that persists till the start of your next turn.
Treant Valley:		Gaea, 2 mana, land:	Get +1 energy at the start of your turns.	Activable(1A) spend 2 energy, summon a X/X Treant.
Jade Portal:		Gaea, 3+1 mana, land:	Takes 2 turns to set up, then you can summon creatures on this land.


*Awakened Beast:	Gaea, 3 mana, creature: 9/7, 1 armor

//---------------------- Minerva --------------------------
Aspiring Student:	Minerva, 3 mana, creature: 	3/3, Devote 2: +1/+1;	Devote 5: +2/+2
Mistcaller:			Minerva, 5 mana, creature:	4/5, activable(2): Let an adjacent creature get -2/+0 and -2 armor this turn.
Silver Warden:		Minerva, 5 mana, creature Response: 4/7
Clear Mind:			Minerva, 1+2 mana, spell Response:	Shuffle your hand into your deck
Mind Shock:			Minerva, 2+2 mana, spell:	Shuffle the opponent's hand into his deck
Psychic Blast:		Minerva, 1+2 mana, spell:	Deal X damage to target creature, where X is the size of your hand. Then shuffle your hand into your deck. 
Denial:				Minerva, 2+5 mana, spell:	Make your opponent's card currently being cast fizzle out; shuffle this spell into your deck.
Landslide:			Minerva, 3+3 mana, spell:	Move target land into an adjacent tile, replacing the land in the destination if there is one.
Falling Star:		Minerva, 8+4 mana, spell:	Destroy the land in the target tile, and deal 8 damage to all creatures in radius 1.
Sapphire Portal:	Minerva, 3+2 mana, land:	Takes 3 turns to set up, then you can summon creatures in radius 1.
Silver Portal:		Minerva, 3 mana, land:		1-response-Blink
Fortezza Movente:	Minerva, 5+1 mana, fort:	4/8, Ranged, 2-Response-Blink
Quicken Spell:  	Minerva, 1+1 mana, spell:	Your next spell card will be played as an Instant action.

//---------------------- Materia --------------------------
Militia:			Materia, 2 mana, creature:  3/2
Archer:				Materia, 3 mana, creature:	3/2, range 1, reload
Trained Soldier:	Materia, 4 mana, creature:	5/4, 1 armor 	Devoted 3:	+1 armor 
Field Speechman:	Materia, 5 mana, creature:	6/5,	activable(1):Adjacent friendly creatures get <i>Valiant</i> this turn"
Masterwork Musket:	Materia, 3 mana, equipment:	Target creature summoned this turn gains Range 1.	Devoted 4: Target creature gets +3/+0
Enthusiasm:			Materia, 2+2 mana, spell:	Target creature gains +1/+1 and +1 armor; shuffle this spell into your deck
Demolition:			Materia, 0+1 mana, spell:	Destroy a land you control
Army of One Heart:	Materia, 2+2 mana, spell:	Target friendly adjacent creatures in a chain. Each creature get +X/+X this turn, where X is the number of targets.
Supply Station:		Materia, 4+1 mana, land:	Friendly creatures on this tile or in adjacent tiles have +1/+1
Camp of Pallon:		Materia, 3+1 mana, fort:	A Heroic Fortification that can upgrade for 3 times.
Trebuchet:			Materia, 4+2 mana, fort:	0/8, 1 armor; Takes 2 turns to set up, then deal 3 damage to opponent at the end of your turns.
Heir to the Throne:	Materia, 0+4 mana, equipment:	Target creature summoned this turn gains resistance 1 and grants adjacent troops +0/+1, plus bonus +1 mana pool and +1 hand size if reaches the enemy controller. Equipment transfers on death to killer.

//--------------------- Multi-school ----------------------
Haunted Camp:		Materia, 2+1 mana, land: 	At the start of your turns, Materia or Entropia creature standing on the land get +1/+1.
Cavern:				Entropia, 2+1 mana, land: 	At the start of your turns, Entropia or Gaea creature standing on the land get +1/+1.
Moon Glade:			Gaea, 2+1 mana, land: 		At the start of your turns, Gaea or Minerva creature standing on the land get +1/+1.
Monastry:			Minerva, 2+1 mana, land: 	At the start of your turns, Minerva or Aether creature standing on the land get +1/+1.
Warriors' Temple:	Aether, 2+1 mana, land: 	At the start of your turns, Aether or Materia creature standing on the land get +1/+1.

Arcane Filibuster:	Aether+Minerva, 0+1+1 mana, spell: Ends when the next spell is cast. That spell will fizzle.
Vulnerate:			Minerva, 1+1 mana, spell:	Target creature gets -X armor, where X is your devotion to Entropia
Thousand Arrows:	Entropia, 3+2 mana, spell:	Deal 2 damage for X times to target creature, where X is your devotion to Materia.
Promised Shelter:		Gaea, 2+2 mana, land:	At the start of your turns, if your health is below 2 times your devotion to Aether, heal you by 2.

Divine Illumination:	Aether, 1+3 mana, spell:	Gain 2 devotion to other schools until the start of next turn.
Ian's Laboratory:	Minerva, 4+1 mana, land:	Whenever you discard a card, gain 1 level in the corresponding school till the start of next turn.

*/



//*************************************************************************
// Codes Start 
//*************************************************************************
{
//Entropia--------------------------------------------------------------------------
	"Death Knight": {
		name: "Death Knight",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-blood.png",
		cost: 6,
		school: "@eval BLOOD",
		rarity: 1,
		help_strings: ["Devoted X"],		
		creature: {
			attack: 7,
			life: 6,			
            triggered_abilities: [{
				name: "Devoted 4",                  
				rules: "Death Knight gains <i>Revenant</i>",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(ENTROPIA)>=4,
						
					set(creature.triggered_abilities, 
					[
					construct('triggered_ability', {
						name: 'Revenant',
						once: true,
						rules: q(If Death Knight would die, it is fully restored instead.),
	
						on_die: q^def(class creature creature, class game_state game) ->commands
							if(not game.creature_at_loc(creature.loc), game.summon_creature(
							lib.citadel.create_creature(creature.name, {
								name: creature.name,
								controller: creature.controller,
								loc: creature.loc,
								card_name: creature.card_name,
								summon_id: creature.summon_id,
								triggered_abilities: filter(lib.citadel.create_creature(creature.name).triggered_abilities, value.name != 'Revenant')
							})
						))
						^,
					})
					])
						
					,set(creature.triggered_abilities, [])),
                ]",
            }],
		},

	},
	
	"Master Assassin": {
		name: "Master Assassin",
		set: "Experimental_1",
		rarity: 2,
		type: "creature",
		portrait: "school-blood.png",
		cost: 6,
		loyalty_cost: 2,
		school: "@eval ENTROPIA",
		creature: {
			game_sounds: "ghostly_creature",
			tags: ['Assassin'],
			abilities: ['Lethal','Assassinate'],
			sound_walk: "creatures/move-swift.wav",
			attack: 7,
			life: 5,
		}
	},	
	
	"Sangromancer": {
		name: "Sangromancer",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-blood.png",
		cost: 4,
		school: "@eval BLOOD",
		rarity: 1,	
		creature: {
			attack: 5,
			life: 4,			
			portrait: "school-blood.png",
			activated_abilities: [
			{
				name: "Drain",
				cost: 2,
				school: "@eval BLOOD",
				portrait: "school-blood.png",		
//				is_instant: true,
				is_response: true,
                once_per_turn: false,
				rules: "Drain 1 life from an adjacent creature.",
				possible_targets: "
					def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
							game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) != null), null)
					",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(creature.life, 1),
					add(target_creature.life, -1),
				] where creature = info.get_creature(game)
				  where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			}
			],
		},

	},	
	
	"Cancer Mage": {
		name: "Cancer Mage",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-blood.png",
		cost: 6,
		school: "@eval BLOOD",
		rarity: 2,	
		creature: {
			attack: 5,
			life: 5,			
			portrait: "school-blood.png",
			activated_abilities: [
			{
				name: "Infect",
				cost: 1,
				school: "@eval BLOOD",
				portrait: "school-blood.png",		
//				is_instant: true,
				is_response: false,
                once_per_turn: true,
				rules: "Target creature gets poisoned.",
				possible_targets: "all_creatures_as_possible_targets",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(target_creature.status_effects, ['Poisoned'])
				] 
				  where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			}],
			triggered_abilities: [{
				name: "Aggravation",
				rules: "At the end of each turn, adjacent poisoned creatures get -1/-2.",
				on_end_turn: "def(class creature creature, class game_state game) ->commands 
				[
				if('Poisoned' in target.status_effects,[
					add(target.life, -2),
					add(target.attack,-1),
				],)
				  | target <- game.creatures,
				    not target.is_building,
					game.locs_adjacent(creature.loc, target.loc)
				]",
			}],

		},

	},		
	
	"Blood Burn": {
		name: "Blood Burn",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		portrait: "school-blood.png",
		cost: 0,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rules: "Pay 5 life, restore 3 mana.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[	
			add(player.life, -5),
            map(range(0,3),player.gain_mana_from_card(game, me)),	
		]
		where player = game.players[info.player_index]",
	},	
	
	"Blightstone": {
		name: "Blightstone",
		type: "creature",
		set: "Experimental_1",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		portrait: "school-blood.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		help_strings: ["Cover"],
		creature: {
			is_land: true,
            portrait: "school-blood.png",
			image_num: 18,
			activated_abilities: [
			{
				name: "Blight",
				cost: 1,
				school: "@eval BLOOD",
				is_response: false,
				once_per_turn: true,
				rules: "Target creature in the lane gets poisoned.",
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, creature.loc[0]=c.loc[0], c.is_valid_target(game, game.nplayer, me), c.is_land=false, c.is_building=false])
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(target_creature.status_effects, ['Poisoned'])
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			},
			],
		},
	},		
	
	"Devil Hound": {
		name: "Devil Hound",
		set: "Experimental_1",
		rarity: 0,
		cost: 5,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		portrait: "school-blood.png",
		creature: {
			attack: 6,
			life: 5,
			portrait: "school-blood.png",			
			triggered_abilities: [{
				name: "Feed",
				rules: "When you discard a card for the first time in a turn, Devil Hound gains a +1/+1.",
				on_card_discarded: "def(class creature creature, class game_state game, class player player, class card card) ->commands
				if(player.team_index = game.team_index(creature.controller) and (creature.energy = 0),[ 
					creature.apply_effect_until_end_of_turn('energy', 1),
					add(creature.life, 1),
					add(creature.attack,1),
				])",
			}],

		}
	},	
	
	"Suck Blood": {
		name: "Suck Blood",
		set: "Experimental_1",
		rarity: 0,
		type: "spell",
		is_response: true,
		cost: 3,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		portrait: "school-blood.png",

		help_strings: ["Devoted X"],
		rules: "Target creature lose 3 life.

Devoted 2: You gain 3 life.",

		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			[
				add(game.creature_at_loc_or_die(info.targets[0]).life,-3),
				if(game.players[info.player_index].get_resource_level(BLOOD)>=2, add(game.players[info.player_index].life, 3)),
			]	
				asserting size(info.targets) = 1",
	},		
	
	"Rabidness": {
		name: "Rabidness",
		set: "Experimental_1",
		rarity: 0,
		type: "spell",
		school: "@eval ENTROPIA",
		portrait: "school-blood.png",
		cost: 2,
		loyalty_cost: 1,
		is_response: true,
		rules: "Target creature gets +3/-2 this turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play_on_creature: "def(class game_state game, class creature target_creature) ->commands
		[
			target_creature.apply_effect_until_end_of_turn('attack', 3),
			target_creature.apply_effect_until_end_of_turn('life', -2),
		]
		",
	},
	
	"Spread Disease": {
		name: "Spread Disease",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		portrait: "school-blood.png",
		school: "@eval [ENTROPIA]",
		cost: 2,
		loyalty_cost: 3,
        
        possible_targets: "all_tiles_as_possible_targets",
		rules: "Target a tile, poison all creatures in radius 1.",
		on_play: "def(class game_state game, class message.play_card info) ->commands 
        map(game.creatures, creature, 
        if(creature and (not creature.is_building) and (info.targets[0] = creature.loc or game.locs_adjacent(info.targets[0], [int<-creature.loc[0],int<-creature.loc[1],])), [
			add(creature.status_effects, ['Poisoned'])
		]))"
	},

	"Cursed Armor": {
		name: "Cursed Armor",
		type: "spell",
		artist: "lordbob",
		cost: 1,
		loyalty_cost: 2,
		set: "Experimental_1",
		rarity: 1,
		tags: ['Equipment'],
		school: "@eval [ENTROPIA]",
		portrait: "armory.png",
		portrait_focus: [612,453],
		portrait_focus_width: 100,			
		portrait_focus_height: 100,			
		hue_shift: 0.264706,
		sound_resolve: "gameplay/spell_equip_metal_armor",
		rules: "Target creature summoned this turn gains -2 armor.\nCursed Aura: Poisons all adjacent enemy creatures.",
		possible_targets: "equipment_targets",
		_invalid_target_reason: "equipment_invalid_reason",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  [add(game.creature_at_loc_or_die(info.targets[0]).armor, -2)
					asserting size(info.targets) = 1,
		   add(game.creature_at_loc_or_die(info.targets[0]).passive_abilities, [{
				name: 'Cursed Aura',
				rules: 'Poisons all adjacent enemy creatures.',
				particle_effects: ['cursed'],
				static_effect: 'def(class game_state game, class creature creature) ->commands
				[[
				  if(game.locs_adjacent(creature.loc, target.loc),
				    if(target.effects_tracking[effect_id] != effect_info,
				      [ add(target.status_effects, [q(Poisoned)]),
				        set(target.effects_tracking[effect_id], effect_info)
                                      ]) where effect_info = [creature.loc, target.loc],
				    if(effect_id in target.effects_tracking,
				      set(target.effects_tracking, remove_from_map(target.effects_tracking, effect_id))
				    )
				  )
				]| target <- game.creatures,
				    not target.is_building,
					target.controller != creature.controller
				] where effect_id=q('+info.card_uuid+')'
		   }])
		  ]",
	},	

	"Death Warp": {
		name: "Death Warp",
		set: "Experimental_1",
		rarity: 2,
		type: "spell",
		school: "@eval [ENTROPIA]",
		portrait: "command-magic.png",
		cost: 3,
		loyalty_cost: 3,

		is_response: true,
		help_strings: ["Restore"],
		ai_flags: "@eval [AI_CARD_SAVES]",

		rules: "Target <i>Undead</i> creature warps to a random tile, is exhausted, and is <i>Restored</i>. You lose 2 life.",
		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		    if(targets = [], [ creature.loc | creature <- game.creatures,
		      'Undead' in creature.tags, not creature.is_building, creature.is_valid_target(game, avatar.controller, me)]
		  )",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[ if(vacant, target.set_loc(game, choose(vacant), 'blink')),
		  target.exhaust(),
		  target.restore(game),
		  game.players[player_index].inflict_damage_cannot_kill(2),
		  add(game.animation_hints,
		    [ construct('animation.player_damage_hint',
		      { type: 'player_damage_hint',
		        target_player: player_index,
		        source: target,
		        amount: 2,
		        intensity: 1,
		        anim_type: 'bloodcord' })]),
		] where vacant = filter(game.all_locs, not game.creature_at_loc(value))
		  where target = game.creature_at_loc_or_die(info.targets[0])
		  where player_index = game.current_player_index
		",
	},

	
	
//Aether------------------------------------------	
	"Chosen Warrior": {
		name: "Chosen Warrior",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-faith.png",
		cost: 4,
		school: "@eval FAITH",
		rarity: 0,
		help_strings: ["Devoted X"],		
		creature: {
			attack: 5,
			life: 4,			
            triggered_abilities: [{
				name: "Devoted 4",                  
				rules: "Chosen Warrior gets +0/+3 and gains <i>Cover</i>",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(FAITH)>=4,
					[
						add(creature.abilities, ['Cover']),
						add(creature.life, 3),
					]	
					,),
					
					set(creature.triggered_abilities, [])
                ]",
            }],
		},

	},

	"White Mage": {
		name: "White Mage",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-faith.png",
		cost: 3,
		school: "@eval FAITH",
		rarity: 0,	
		creature: {
			attack: 4,
			life: 3,			
			activated_abilities: [
			{
				name: "Bless",
				cost: 2,
				school: "@eval FAITH",
				portrait: "school-faith.png",					
//				is_instant: true,
				is_response: true,
				once_per_turn: true,
				rules: "Let an adjacent creature gain 2 life.",
				possible_targets: "
					def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
							game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) != null), null)
					",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(target_creature.life, 2),
				] where creature = info.get_creature(game)
				  where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			}
			],
		},	
	},
	
    "Tower of Faith": {
		name: "Tower of Faith",
		type: "creature",
		set: "Experimental_1",
		cost: 5,
		loyalty_cost: 1,
		school: "@eval FAITH",
		portrait: "school-faith.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		creature: {
			tags: ["Tower"],
			is_land: true,
			portrait: "school-faith.png",
			passive_abilities: [
			{
                name: 'Censor Heresy',
                rules: "Non Aether cards have 1 more loyalty cost.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				   [
				   game.players[0].add_static_cost_filter(
				     construct('cost_filter', {
						filter_loyalty_cost: 'def(class player p, class card_base card, int cost) ->int
							if ((FAITH in card.school),cost,cost + 1)
						',
					 })
				   ),
				   game.players[1].add_static_cost_filter(
				     construct('cost_filter', {
						filter_loyalty_cost: 'def(class player p, class card_base card, int cost) ->int
							if ((FAITH in card.school),cost,cost + 1)
						',
					 })
				   )
				   ]",
			}
			],
		},
	},	
	
	"Angelic Favor": {
		name: "Angelic Favor",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		is_response: false,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		portrait: "school-faith.png",
		portrait_focus: [406,526],
		portrait_focus_height: 220,
		help_strings: ["Indestructible", "Devoted X"],
		artist: "lucy",
		rules: "Target friendly creature gets +2/+2.

Devoted 5: Target creature gets Indestructible and an additional +2/+2 this turn.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			add(creature.attack,2),
			add(creature.life,2),
			if(game.players[game.current_player_index].get_resource_level(FAITH)>=5,
			[
				creature.add_ability_until_end_of_turn('Indestructible'),
				creature.apply_effect_until_end_of_turn('life', 2),
				creature.apply_effect_until_end_of_turn('attack', 2),				
			],) 	
		] 	asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]),",

	},	
	
	"Temple of Death Angel": {
		name: "Temple of Death Angel",
		set: "Experimental_1",
		rarity: 2,
		type: "creature",
		hero: true,
		cost: 6,
		loyalty_cost: 0,
		school: "@eval FAITH",
		portrait: "school-faith.png",
		rules: "Gain <b>Energy</b> equal to your devotion to Aether at start of your turn. If the Temple has at least 50 energy, you win.",
		creature: {
			is_land: true,
			abilities: ['Fragile'],
			triggered_abilities: [{
				name: "Apocalypse",
				rules: "none",
				hidden_on_creature: true,
				on_begin_turn: "def(class creature creature, class game_state game) ->commands
				if(game.current_player_index = creature.controller, [

					if(creature.energy + faith_devotion>= 50,			// the new energy is not applied yet 
					[	add(game.players[(creature.controller+1)%2].life, -1000),
						add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', intensity: 1, target_player: (creature.controller+1)%2, source: creature, amount: 100})]),
					]),
					add(creature.energy, faith_devotion),					
				]) where faith_devotion = game.players[game.current_player_index].get_resource_level(FAITH)
				",
			}],
		},
	},	
	
	"Warrior of Light": {
		name: "Warrior of Light",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-faith.png",
		cost: 7,
		school: "@eval FAITH",
		rarity: 1,	
		creature: {
			attack: 2,
			life: 2,	
			tags: ["Spirit"],				
            triggered_abilities: [{
				name: "Enchanted",    	
				rules: "Gain +2X/+2X on summon, where X is your devotion to Aether.",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
					add(creature.life, 2*game.players[game.current_player_index].get_resource_level(FAITH)),
					add(creature.attack, 2*game.players[game.current_player_index].get_resource_level(FAITH)),					
                ]",
            }],
		},

	},	
	
	"Relinquisher": {
		name: "Relinquisher",
		set: "Experimental_1",
		rarity: 1,
		cost: 4,
		loyalty_cost: 1,
		school: "@eval FAITH",
		portrait: "school-faith.png",
		flavor_text: "In the end, one needs nothing but faith.",		
		creature: {
			attack: 4,
			life: 4,
			portrait: "school-faith.png",			
			triggered_abilities: [{
				name: "Relinquish",
				rules: "When you discard a non-Aether card, Relinquisher gains a +1/+1.",
				on_card_discarded: "def(class creature creature, class game_state game, class player player, class card card) ->commands
				if(player.team_index = game.team_index(creature.controller) and (not FAITH in card.school),[ 
					add(creature.life, 1),
					add(creature.attack,1),
				])",
			}],

		}
	},		

    "Divine Illumination": {
		name: "Divine Illumination",
		set: "Experimental_1",
		rarity: 2,
		type: "spell",
		cost: 1,
		loyalty_cost: 3,
		portrait: "school-faith.png",
		school: "@eval FAITH",
		is_response: false,
		sound_resolve: "gameplay/spell_bless",
		rules: "You gain 2 levels in other schools till the start of your next turn.",
		flavor_text: "She saw it all through the vision, only to taste the sorrow about her own pettiness.",
		on_play: "def(class game_state game, class message.play_card info) ->commands 
					game.players[info.player].add_static_effect(
						construct('static_effect', {
							apply_fn:  def(class player player, map info)->commands [
								add(player.base_resource_level[1], 2),
								add(player.base_resource_level[2], 2),
								add(player.base_resource_level[3], 2),
								add(player.base_resource_level[4], 2),
							],
							
							revert_fn: def(class player player, map info)->commands [
								add(player.base_resource_level[1], -2),
								add(player.base_resource_level[2], -2),
								add(player.base_resource_level[3], -2),
								add(player.base_resource_level[4], -2),
							],	
							
							duration:	DURATION_END_OF_TURN,
						})
					)					
		",
	},	
	
//Gaea----------------------------------------------------------------	
	"Rafa Snake": {
		name: "Rafa Snake",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-food.png",
		cost: 3,
		school: "@eval FOOD",
		rarity: 0,
		help_strings: ["Devoted X"],		
		creature: {
			attack: 4,
			life: 3,		
			abilities: ['Haste'],			
            triggered_abilities: [{
				name: "Devoted 2",                  
				rules: "Rafa Snake gets <i>Feral</i> unless this ability is triggered",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(FOOD)<2,
						add(creature.abilities, ['Feral'])
					,),	
					set(creature.triggered_abilities, [])
                ]",
            }],
		},
	},		
	
	"Camouflage": {
		name: "Camouflage",
		set: "Experimental_1",
		rarity: 0,
		type: "spell",
		is_response: true,
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "school-food.png",
		portrait_focus: [406,526],
		portrait_focus_height: 220,
		help_strings: ["Cover", "Devoted X"],
		artist: "lucy",
		rules: "Target friendly creature has <i>Cover</i> this turn.

Devoted 4: Target creature has Cover permanently instead.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			if(game.players[info.player_index].get_resource_level(FOOD)<4,
				creature.add_ability_until_end_of_turn('Cover'), 
				add(creature.abilities, ['Cover'])) 	
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0]),	

",

		ai_flags: ["@eval AI_CARD_USE_ONLY_TO_SAVE"],
	},	
	
	"Spitter": {
		name: "Spitter",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-food.png",
		cost: 6,
		school: "@eval FOOD",
		rarity: 1,	
		creature: {
			attack: 7,
			life: 5,			

            triggered_abilities: [{
				name: "Acid Spit",
				rules: "At the start of each turn, Spitter deals 1 damage to adjacent enemy creatures.",
                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			        [
                        map(game.creatures, if((value.controller!=creature.controller) and (not value.is_land) and (not value.is_building) and game.locs_adjacent(creature.loc, value.loc), [
						value.inflict_damage(game, 1),]))
					]",
            }],  
		},	
	},		
	
	"Island Turtle": {
		name: "Island Turtle",
		rarity: 0,
		set: "Experimental_1",		
		type: "creature",
		portrait: "school-food.png",

		cost: 3,
		loyalty_cost: 1,
		school: "@eval GAEA",
		creature: {
			attack: 2,
			life: 8,
		}
	},		
	
	"Awaken the Beast": {
		name: "Awaken the Beast",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		school: "@eval GAEA",
		portrait: "school-food.png",
		is_response: false,
		cost: 3,
		loyalty_cost: 2,
		rules: "Put an <i>Awakened Beast</i> into your hand",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[			
			set(the_player.hand, the_player.hand + ['Awakened Beast']),
		]where the_player = game.players[info.player_index]",		
	},		
	
	"Awakened Beast": {
		name: "Awakened Beast",
		rarity: 1,
		type: "creature",
		portrait: "school-food.png",

		cost: 3,
		school: "@eval GAEA",
		creature: {
			attack: 9,
			life: 7,
			armor: 1,
		}
	},	
	
	"Deep Cave": {
		name: "Deep Cave",
		type: "creature",
		set: "Experimental_1",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "school-food.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		help_strings: ["Cover"],
		rules: "While not engaged, creatures in this tile have <i>Cover</i> and +4 armor.",
		creature: {
			is_land: true,
            portrait: "school-food.png",
			image_num: 18,
			static_ability_effect: "if(creature.loc = target.loc and not target.is_land and (target.targets_attacking(game)=[]), [target.add_ability_static_duration('Cover'),target.apply_static_effect('armor', 4)])",
		},
	},	
	
	"Everspring Valley":"Treant Valley",
	"Treant Valley": {
		name: "Treant Valley",
		set: "Experimental_1",
		rarity: 1,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "school-food.png",
		rules: "Gain 1 <b>Energy</b> at start of your turns. ",
		creature: {
			is_land: true,
			
			triggered_abilities: [{
				name: "Evergrowth",
				rules: "none",
				hidden_on_creature: true,
				on_begin_turn: "def(class creature creature, class game_state game) ->commands
					if(game.current_player_index = creature.controller, add(creature.energy, 1))
				",			
			}],

			activated_abilities: [{
				name: 'Awaken',
				cost: 1,
				school: "@eval FOOD",
				is_response: false,
				once_per_turn: true,
				portrait: "treant-defender.png",
				rules: 'Spend 2 energy, summon a X/X Valley Treant.',
				possible_targets: "def(class game_state game, class creature corpse, [Loc] targets) ->[Loc]|null
					if(game.creature_at_loc(corpse.loc) != null or corpse.energy < 2, [], null)",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
				add(creature.energy, -2),
				game.summon_creature(
			    lib.citadel.create_creature('Valley Treant',
				{
					name: 'Valley Treant',
					controller: creature.controller,
					loc: creature.loc,
					attack: creature.energy,
					life:	creature.energy,
			    }))] where creature = info.get_creature(game)",
			}],				

		},
	},		
	
    "Valley Treant":
    {
		name: "Valley Treant",
        portrait: "treant-defender.png",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			tags: ['Treant'],
            portrait: "treant-defender.png",	
			attack: 3,
			life: 3,
			move: 1,		
		},
	},		
	
	"Jade Portal": {
		name: "Jade Portal",
		set: "Experimental_1",
		rarity: 2,
		type: "creature",
		portrait: "school-food.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval FOOD",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			is_land: true,
			energy: 2,

            passive_abilities: [{
                name: 'Portal',
                rules: "Takes 2 turns to setup, then you can summon creatures on this land.",
				allows_summoning: "def(class game_state game, class creature creature, class creature target) ->[Loc]
					if(not target.is_land and creature.energy=0 and game.creature_at_loc(creature.loc) = null, 
						[creature.loc], 
						[])
				",
			}],			
			
			triggered_abilities: [{
				name: "Setup",
				rules: "none",
				hidden_on_creature: true,
				on_begin_turn: "def(class creature creature, class game_state game) ->commands
				if(game.current_player_index = creature.controller and creature.energy>0, [
					add(creature.energy, -1),
				])
				",
			}],			
			
		}
	},		
	
//Minerva-----------------------------------------	
	"Aspiring Student": {
		name: "Aspiring Student",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-scrolls.png",
		cost: 3,
		school: "@eval SCROLLS",
		rarity: 0,
		help_strings: ["Devoted X"],
		creature: {
			attack: 3,
			life: 3,			
            triggered_abilities: [
			{
				name: "Devoted 2",                  
				rules: "Aspiring Student gets +1/+1",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                    if(game.players[game.current_player_index].get_resource_level(SCROLLS)>=2,
					[
						add(creature.life, 1),
						add(creature.attack, 1),
					],)",
            },
			{
				name: "Devoted 5",                  
				rules: "Aspiring Student gets +2/+2",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(SCROLLS)>=5,
					[
						add(creature.life, 2),
						add(creature.attack, 2),
					]	
					,),	
					set(creature.triggered_abilities, [])
                ]",
            }],
		},

	},		
	
	"Silver Warden": {
		name: "Silver Warden",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-scrolls.png",
		cost: 5,
//		loyalty_cost: 1,
		is_response: true,
		school: "@eval SCROLLS",
		rarity: 0,
		creature: {
			attack: 4,
			life: 7,			
		},
	},		
	
	"Mistcaller": {
		name: "Mistcaller",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-scrolls.png",
		cost: 5,
		school: "@eval SCROLLS",
		rarity: 0,	
		creature: {
			attack: 4,
			life: 5,			
			activated_abilities: [
			{
				name: "Mist",
				cost: 2,
				school: "@eval SCROLLS",
				portrait: "school-scrolls.png",					
//				is_instant: true,
				is_response: true,
				once_per_turn: false,
				rules: "Let an adjacent creature get -2/+0 and -2 armor this turn.",
				possible_targets: "
					def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
							game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) != null), null)
					",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					game.creature_at_loc_or_die(info.targets[0]).apply_effect_until_end_of_turn('attack', -2),
					game.creature_at_loc_or_die(info.targets[0]).apply_effect_until_end_of_turn('armor', -2),				
				]asserting size(info.targets) = 1"
			}
			],
		},	
	},	
	
	"Clear Mind": {
		name: "Clear Mind",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "school-scrolls.png",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rules: "Shuffle your hand into your deck.",
		
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		null",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			set(player.deck, shuffle(player.deck + player.hand)),	
			set(player.hand, []),
		] where player = game.players[info.player_index]
		",	
	},	
	
	"Mind Shock": {
		name: "Mind Shock",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "school-scrolls.png",
		cost: 2,
		loyalty_cost: 2,
		rules: "Shuffle your opponent's hand into his deck.",
		
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		null",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			set(opponent.deck, shuffle(opponent.deck + opponent.hand)),	
			set(opponent.hand, []),
		] where opponent = game.players[(info.player_index+1)%2]
		",	
	},

	"Quicken Spell": {
		name: "Quicken Spell",
		set: "Experimental_1",
		rarity: 0,
		type: "spell",
		school: "@eval MINERVA",
		is_instant: true,
		help_strings: ['Instant'],
		is_response: true,
		portrait: "haste.png",
		portrait_focus: [267, 90],
		portrait_focus_width: 92,
		cost: 1,
		loyalty_cost: 1,
		rules: "Your next spell will be cast as an Instant action.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			add(game.players[info.player_index].creature_avatar.passive_abilities,
			[
			construct('passive_ability', {
				name: 'Quicken Spell',
				rules: q(Your next spell will be cast as an Instant action.),
				static_effect: q^def(class game_state game, class creature creature) ->commands [
					creature.apply_creature_effect(game, apply_fcn, remove_fcn, {affected_cards: card_ids})
					where apply_fcn = def(class game_state game, class creature creature, map info)->commands [[
						set(c.is_instant, true),
						c.set_dirty(),

					]| c <- game.players[creature.controller].hand,
					   c._uuid in info.affected_cards
					]
					where remove_fcn = def(class game_state game, class creature creature, map info)->commands [[
						set(c2.is_instant, false),
						c2.set_dirty(),
					]| c2 <- game.players[creature.controller].hand,
					   c2._uuid in info.affected_cards
					]
					where card_ids = [
						c3._uuid
					| c3 <- game.players[creature.controller].hand,
					   c3.type = 'spell',
					   not c3.is_instant
					]
				]^,
			})
			]),

			add(game.players[info.player_index].creature_avatar.triggered_abilities,
			[
			construct('triggered_ability', {
				on_card_played: q^def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(info.card != null and info.player_index = ^ + str(info.player_index) + q^ and (class card <- info.card).type = 'spell' and (class card <- info.card).name != 'Quicken Spell',
						set(creature.passive_abilities, filter(creature.passive_abilities, value.name != 'Quicken Spell')),
					) 
				^,
			})
			]),

		]",
	},
	
	"Psychic Blast": {
		name: "Psychic Blast",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "school-scrolls.png",
		is_response: false,
		cost: 1,
		loyalty_cost: 2,
		rules: "Deal X damage to target creature, where X is the size of your hand. Then shuffle your hand into your deck.",
		
		arrow_texture: "effects/psychic-energy.png",		
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			if(info.targets[0][0] = -1,
			//targeting a player
				add(game.players[info.targets[0][1]].life, -damage_amount),

			//targeting a creature
				creature.inflict_damage(game, damage_amount)
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])) where damage_amount=size(the_player.hand),

			set(the_player.deck, shuffle(the_player.deck + the_player.hand)),					
			set(the_player.hand, []),
		]where the_player = game.players[info.player_index]",		
	},	
	
	"Sapphire Portal": {
		name: "Sapphire Portal",
		set: "Experimental_1",
		rarity: 2,
		type: "creature",
		portrait: "school-scrolls.png",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval SAPIENZA",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			is_land: true,
			energy: 3,

            passive_abilities: [{
                name: 'Portal',
                rules: "Takes 3 turns to setup, then you can summon creatures in radius 1.",
				allows_summoning: "def(class game_state game, class creature creature, class creature target) ->[Loc]
					filter(game.all_locs, 
								(game.locs_adjacent(value, creature.loc) or value = creature.loc) and
								not target.is_land	and 
								creature.energy=0 and
								game.creature_at_loc(value) = null
					)
				",
			}],			
			
			triggered_abilities: [{
				name: "Setup",
				rules: "none",
				hidden_on_creature: true,
				on_begin_turn: "def(class creature creature, class game_state game) ->commands
				if(game.current_player_index = creature.controller and creature.energy>0, [
					add(creature.energy, -1),
				])
				",
			}],			
			
		}
	},		
	
	"Fortezza Movente": {
		name: "Fortezza Movente",
		set: "Experimental_1",
		rarity: 1,
		type: "creature",
		cost: 5,
		loyalty_cost: 1,
		portrait: "school-scrolls.png",
		school: "@eval SCROLLS",
		creature: {
			life: 8,
            abilities: ['Ranged'],
			attack: 4,
			image_num: 0,
			is_building: true,
			activated_abilities: [
				{
					name: 'Blink',
					sound_resolve: 'gameplay/blink',
					cost: 2,
                    once_per_turn: false,
					school: ["@eval SAPIENZA"],
					is_response: true,
					rules: "Blink to the opposite lane",
					possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], if(game.creature_at_loc(target_loc) = null, [target_loc], []), null)
						where target_loc = [game.rows - creature.loc[0] - 1, creature.loc[1]]
					",
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.set_loc(game, info.targets[0], 'blink')
					] where creature = info.get_creature(game)"
				}
			],
		}
	},	
	
	"Silver Portal": {
		name: "Silver Portal",
		type: "creature",
        set: "Experimental_1",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval SCROLLS",
		portrait: "school-scrolls.png",

		creature: {
			tags: ["Portal"],
			is_land: true,
			activated_abilities: [
				{
					name: 'Blink',
					sound_resolve: 'gameplay/blink',
					cost: 1,
                    once_per_turn: false,
					school: ["@eval SAPIENZA"],
					is_response: true,
					rules: "Blink the creature on this tile to the opposite lane",
					possible_targets: " def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [],
							[creature_here.loc | creature_here <- game.creatures, creature_here.is_valid_target(game, creature.controller, me), not creature_here.is_building, creature_here.loc=creature.loc],
						if(size(targets) = 1,
							[[row, targets[0][1]] | row <- range(game.rows - creature.loc[0] - 1, game.rows - creature.loc[0]), game.is_loc_on_board([row, targets[0][1]]), game.creature_at_loc([row, targets[0][1]]) = null]
						))",
					on_play: "def(class game_state game, class message.play_card info) ->commands
							game.creature_at_loc_or_die(info.targets[0]).set_loc(game, info.targets[1], 'blink')",
				}
			],
		},
	},	
	
	"Falling Star": {
		name: "Falling Star",
		set: "Experimental_1",
		rarity: 2,
		type: "spell",
		portrait: "school-scrolls.png",
		school: "@eval [SAPIENZA]",
		cost: 8,
		loyalty_cost: 4,
        
        possible_targets: "all_tiles_as_possible_targets",
		rules: "Deal 8 damage to creatures in radius 1. Destroy the land in target hex if there is one.",
		on_play: "def(class game_state game, class message.play_card info) ->commands 
		[
			if(construct, set(construct.destroyed, true))
				where construct = game.land_at_loc(info.targets[0]), 
			map(game.creatures, creature, 
			if(creature and (info.targets[0] = creature.loc or game.locs_adjacent(info.targets[0], [int<-creature.loc[0],int<-creature.loc[1],])), [
				creature.inflict_damage(game, 8)]))	
		]"
	},	
	
	"Ian's Laboratory": {
		name: "Ian's Laboratory",
		set: "Experimental_1",
		rarity: 2,
		type: "creature",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval SCROLLS",
		flavor_text: "If you're throwing that thing away anyway...",		
		portrait: "school-scrolls.png",
		creature: {
			is_land: true,
			triggered_abilities: [{
				name: "Research",
				rules: "Whenever you discard a card, gain 1 level in corresponding schools till the start of next turn.",

				on_card_discarded: "def(class creature creature, class game_state game, class player player, class card card) ->commands
				if(player.team_index = game.team_index(creature.controller),[ 
					if (GOLD in card.school, 
						game.players[creature.controller].add_static_effect(
						construct('static_effect', {
							apply_fn:  def(class player player, map info)->commands [add(player.base_resource_level[GOLD], 1)],
							revert_fn:  def(class player player, map info)->commands [add(player.base_resource_level[GOLD], -1)],
							duration:	DURATION_END_OF_TURN,
						}))),
					if (BLOOD in card.school, 
						game.players[creature.controller].add_static_effect(
						construct('static_effect', {
							apply_fn:  def(class player player, map info)->commands [add(player.base_resource_level[BLOOD], 1)],
							revert_fn:  def(class player player, map info)->commands [add(player.base_resource_level[BLOOD], -1)],
							duration:	DURATION_END_OF_TURN,
						}))),
					if (FOOD in card.school, 
						game.players[creature.controller].add_static_effect(
						construct('static_effect', {
							apply_fn:  def(class player player, map info)->commands [add(player.base_resource_level[FOOD], 1)],
							revert_fn:  def(class player player, map info)->commands [add(player.base_resource_level[FOOD], -1)],
							duration:	DURATION_END_OF_TURN,
						}))),
					if (SCROLLS in card.school, 
						game.players[creature.controller].add_static_effect(
						construct('static_effect', {
							apply_fn:  def(class player player, map info)->commands [add(player.base_resource_level[SCROLLS], 1)],
							revert_fn:  def(class player player, map info)->commands [add(player.base_resource_level[SCROLLS], -1)],
							duration:	DURATION_END_OF_TURN,
						}))),
					if (FAITH in card.school, 
						game.players[creature.controller].add_static_effect(
						construct('static_effect', {
							apply_fn:  def(class player player, map info)->commands [add(player.base_resource_level[FAITH], 1)],
							revert_fn:  def(class player player, map info)->commands [add(player.base_resource_level[FAITH], -1)],
							duration:	DURATION_END_OF_TURN,
						}))),						
						
				],[])",
								
				
				
			}],
		},
	},	
	
//Materia------------------------------------------	

	"Archer": {
		name: "Archer",
		set: "Experimental_1",
		rarity: 0,
		type: "creature",
		cost: 3,
		loyalty_cost: 0,
		portrait: "school-gold.png",
		school: "@eval GOLD",
		creature: {
			tags: [],
            abilities: ['Ranged'],
			attack: 3,
			life: 2,
			move: 1,
		}
	},

	"Masterwork Musket": {
		name: "Masterwork Musket",
		set: "Experimental_1",
		rarity: 1,
		type: "school-gold",
		is_response: false,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval GOLD",
		portrait: "forest.png",
		portrait_focus: [406,526],
		portrait_focus_height: 220,
		help_strings: ["Devoted X"],
		rules: "Target creature summoned this turn gains Ranged.

Devoted 4: Target creature gets +3/+0",
		possible_targets: "equipment_targets",
		_invalid_target_reason: "equipment_invalid_reason",		
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[  
			
			add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['Ranged']),
			if(game.players[game.current_player_index].get_resource_level(GOLD)>=4, add(game.creature_at_loc_or_die(info.targets[0]).attack, 3))
		]	asserting size(info.targets) = 1",
	},	

	"Trained Soldier": {
		name: "Trained Soldier",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-gold.png",
		cost: 4,
		school: "@eval GOLD",
		rarity: 0,
		help_strings: ["Devoted X"],		
		creature: {
			attack: 5,
			life: 4,		
			armor: 1,
            triggered_abilities: [{
				name: "Devoted 3",                  
				rules: "Trained Soldier gains 1 armor",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(GOLD)>=3,
					[
						add(creature.armor, 1),
						
					]	
					,),
					
					set(creature.triggered_abilities, [])
                ]",
            }],
		},
	},		
	
	"Field Speechman": {
		name: "Field Speechman",
		type: "creature",
		set: "Experimental_1",
		portrait: "school-gold.png",
		cost: 5,
		school: "@eval GOLD",
		rarity: 1,	
		creature: {
			attack: 6,
			life: 5,			
			activated_abilities: [
			{
				name: "Speech",
				cost: 1,
				school: "@eval GOLD",
				portrait: "forest.png",					
//				is_instant: true,
				is_response: true,
                once_per_turn: false,
				rules: "Adjacent creatures you control get <i>Valiant</i> this turn",
					
				on_play: "def(class game_state game, class message.play_card info) ->commands 
				[   
				   target.add_ability_until_end_of_turn('Valiant')
				  | target <- game.creatures,
				    not target.is_building,
					target.controller = creature.controller,
					game.locs_adjacent(creature.loc, target.loc)
				]	where creature = info.get_creature(game)",
			}
			],
		},	
	},	

	"Militia": {
		name: "Militia",
		set: "Experimental_1",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		portrait: "school-gold.png",
		school: "@eval GOLD",
		creature: {
			attack: 3,
			life: 2,
		},
	},	
	
   	"Trebuchet": {
		name: "Trebuchet",
		set: "Experimental_1",
		rarity: 2,
		type: "creature",
		cost: 5,
		loyalty_cost: 2,
		portrait: "school-gold.png",
		school: "@eval GOLD",
		creature: {
			life: 6,
			armor: 0,
			attack: 0,
			energy: 1,	
			
			triggered_abilities: [{
				name: "Siege Attack",
//				hidden_on_creature: true,
				rules: "Takes 1 turn to setup, then it deals 2 damage to your opponent at the start of your turns.",
				on_begin_turn: "def(class creature creature, class game_state game) ->commands
				[
					if(game.current_player_index = creature.controller and creature.energy>0, [add(creature.energy, -1),]),

					if(game.current_player_index = creature.controller and creature.energy=0, [
									add(game.players[(creature.controller+1)%2].life, -2)]),
				]",
		
			}],	

			is_building: true,
		}
	},	

	"Heir to the Throne": {
		name: "Heir to the Throne",
		school: "@eval GOLD",
		type: "spell",
		artist: "johann",
		cost: 0,
		loyalty_cost: 4,
		set: "Experimental_1",
		rarity: 2,
		tags: ['Equipment'],
		portrait: "heir-to-the-throne.png",
		sound_windup: "spells/spell-windup-gold.wav",
		rules: "Wins +1 mana pool and +1 hand size on reaching the enemy citadel.\nSpoils of Death&emdash;transfers to killer.\nLeadership&emdash;Resistance +1; Grants adjacent allies +0/+1",
		possible_targets: "equipment_targets",
		_invalid_target_reason: "equipment_invalid_reason",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  [add(game.creature_at_loc_or_die(info.targets[0]).passive_abilities, [{
				name: 'Leadership',
				rules: 'Resistance +1; Adjacent allies have +0/+1.\n(transfers to killer)',
				//Resistance automatically gets its own blurb
				static_effect: 'def(class game_state game, class creature creature) ->commands 
				[[
				  target.apply_static_effect(q(life_shield), 1),
				]| target <- game.creatures,
				    creature.controller = target.controller,
				    not target.is_building,
				    game.locs_adjacent(creature.loc, target.loc)
				] + [ creature.apply_static_effect(q(resistance), 1) ]'
		   }]),
		  add(game.creature_at_loc_or_die(info.targets[0]).triggered_abilities, [{
			name: 'Heir to the Throne',
			rules: 'Wins +1 mana pool and +1 hand size on reaching the enemy citadel.\n(transfers to killer)',
			on_reach_endzone: 'def(class creature creature, class game_state game) ->commands
			[add(player.base_income, 1), add(player.card_draw, 1)] where player=game.players[creature.controller]',
		   }]),
		  add(game.creature_at_loc_or_die(info.targets[0]).triggered_abilities, [{
			name: 'Spoils of Death',
			hidden_on_creature: true,
			rules: '(transfers to killer)',
			on_die: 'def(class creature creature, class game_state game) ->commands
			if (killer != null and not killer.is_building and killer in game.creatures, [
				temp_card.on_play(game, class message.play_card <- construct(q(message.play_card), {
					player_index: game.current_player_index,
					respondable: false,
					targets: [killer.loc],
				})) where temp_card = lib.citadel.create_card(q(Heir to the Throne))
 			]) where killer = creature.killed_by_this_turn(game)',
		   }]),
		  ]",
	},	


	
	"Supply Station": {
		name: "Supply Station",
		set: "Experimental_1",
		rarity: 1,
		type: "school-gold",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval GOLD",
		portrait: "school-gold.png",
		portrait_focus: [385,497],
		portrait_focus_width: 200,
		creature: {
			tags: ["Station"],
			is_land: true,
			portrait_y_offset: 80,
			passive_abilities: [{
				name: "Supply",
				rules: "Friendly creatures in this tile or in adjacent tiles have +1/+1.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >=0, [   
                    if(creature.controller = target.controller and (game.locs_adjacent(creature.loc, target.loc) or (creature.loc = target.loc)),
				    [
						target.apply_static_effect('life', 1),
						target.apply_static_effect('attack', 1),
					])
				  | target <- game.creatures,
				    target.is_building = false
				])"
            }],
		}
	},
	
	"Army of One Heart": {
		name: "Army of One Heart",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		school: "@eval GOLD",
		portrait: "school-gold.png",
		cost: 2,
		loyalty_cost: 2,
		rules: "Target a number of adjacent friendly creatures in a chain. Each creature get +X/+X this turn, where X is the number of targets.",
		min_targets: "int :: 1",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [],
				[creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), creature.controller = avatar.controller, not creature.is_building],
				if(size(new_targets) > 0, new_targets, null)
			  where new_targets = [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building,      creature.is_valid_target(game, avatar.controller, me), game.locs_adjacent(creature.loc, targets[size(targets)-1]), creature.loc not in targets]
			)
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
			map(info.targets, 
				[
					creature.apply_effect_until_end_of_turn('attack', size(info.targets)),
					creature.apply_effect_until_end_of_turn('life', size(info.targets)),					
				]
			
			where creature = game.creature_at_loc_or_die(value))",
	},	
	
	
	
	
//A cycle of cards that reshuffles -- SHUFFLING DISABLED FOR NOW SINCE IT'S INBALANCED ----------------------------------------------------
	"Suffering": {
		name: "Suffering",
		set: "Experimental_1",
		rarity: 0,
		type: "spell",
        tags: ['Curse'],
		cost: 1,	
		loyalty_cost: 3,
		school: "@eval BLOOD",
		portrait: "school-blood.png",

		rules: "Target creature or player loses 2 life.",

		possible_targets: "all_creatures_and_players_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		game.players[game.current_player].draw_cards(game, 1),
		if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -2),

		  //targeting a creature
		  add(creature.life, -2)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]))
		] where the_player = game.players[info.player_index]",
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},	
	
	"Enthusiasm": {
		name: "Enthusiasm",
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		set: "Experimental_1",
		rarity: 0,
		school: "@eval GOLD",
		portrait: "school-gold.png",
		rules: "Target creature gains +1/+1 and +1 armor",
		possible_targets: "all_creatures_as_possible_targets",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, 1),
		  add(game.creature_at_loc_or_die(info.targets[0]).life, 1),
		  add(game.creature_at_loc_or_die(info.targets[0]).armor, 1),	
		] 	asserting size(info.targets) = 1
		where the_player = game.players[info.player_index]",
	},	

	"Vigour": {
		name: "Vigour",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		portrait: "school-food.png",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval FOOD",
		rules: "Restore 2 mana.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		 [
		   map(range(2), player.gain_mana_from_card(game, me)),
		 ]
		   where player = game.players[game.current_player_index]",
	},	
	
	"Denial": {
		name: "Denial",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		school: "@eval AETHER",
		portrait: "school-scrolls.png",
		artist: "eleazzaar",
		cost: 3,
		loyalty_cost: 4,
		is_response: true,
		rules: "Make your opponent's card currently being cast fizzle out.",
		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		    if(game.stack = [] or not (game.stack[size(game.stack)-1] is class message.play_card), [], null)
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
			[
				set(game.stack[size(game.stack)-1].force_fizzle, true)
				asserting game.stack != []
			]
		 where the_player = game.players[info.player_index]",
	},
	
	"Prayer of Endurance": {
		name: "Prayer of Endurance",
		set: "Experimental_1",
		rarity: 0,
		type: "spell",
		is_response: false,
		cost: 1,
		loyalty_cost: 1,
		school: "@eval FAITH",
		portrait: "school-faith.png",

		rules: "Target creature gets +0/+2.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  [
		    add(game.creature_at_loc_or_die(info.targets[0]).life, 2),
		  ] asserting size(info.targets) = 1
		   where the_player = game.players[info.player_index]",
	},	
	
//A cycle of cards land destroyers------------------------------------------------------------------------------

	"Landslide": {
		name: "Landslide",
		set: "Experimental_1",
		type: "spell",
		school: "@eval SCROLLS",
		portrait: "school-scrolls.png",
		cost: 3,
		loyalty_cost: 3,
		is_response: false,
		rarity: 1,
		rules: "Move target land into an adjacent tile, replacing the land in the destination if there is one.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			switch(size(targets),
			  0, filter(game.all_locs, game.land_at_loc(value)),
			  1, if(construct, filter(game.all_locs, game.locs_adjacent(value, construct.loc)), []) where construct = game.land_at_loc(targets[0]),
			  null)

		",
			
        on_play: "def(class game_state game, class message.play_card info) ->commands 
		[
			if(destination_construct, set(destination_construct.destroyed, true)),
			game.land_at_loc_or_die(info.targets[0]).set_loc(game, info.targets[1])

		]
			where construct = game.land_at_loc(info.targets[0])
			where destination_construct = game.land_at_loc(info.targets[1])",
	},	 
	
	
	"Converter": {
		name: "Converter",
		set: "Experimental_1",
		rarity: 0,
		type: "creature",
		portrait: "school-faith.png",
		cost: 4,
		loyalty_cost: 0,		
		school: "@eval FAITH",

		creature: {
			attack: 5,
			life: 3,
			triggered_abilities: [{
                name: 'Convert',
                rules: "The lands this creature moves into become Fragile.",
				on_move_over_construct: "def(class creature creature, class game_state game, class creature land) ->commands
				[
					add(land.abilities, ['Fragile']),
				]
				",
			}],
		},
	},	
	
	"Demolition": {
		name: "Demolition",
		set: "Experimental_1",
		type: "spell",
		school: "@eval MATERIA",
		portrait: "school-gold.png",
		cost: 0,
		loyalty_cost: 1,
		is_response: false,
		rarity: 0,	
		
		rules: "Destroy a land you control",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.lands, creature.controller = avatar.controller])",
        on_play: "def(class game_state game, class message.play_card info) ->commands 
			if(construct, set(construct.destroyed, true))
			where construct = game.land_at_loc(target) 
			where target = info.targets[0],",
	},		
	
	"Plague": {
		name: "Plague",
		set: "Experimental_1",
		type: "spell",
		school: "@eval BLOOD",
		portrait: "school-blood.png",
		cost: 1,
		loyalty_cost: 3,
		is_response: false,
		rarity: 0,	
		
		rules: "Enchant a land, its controllor lose 2 life at the start of his turns.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.lands])",
        on_play: "def(class game_state game, class message.play_card info) ->commands 
			if(construct, add(construct.triggered_abilities, [
			construct('triggered_ability',
			{
				name: 'Plagued',
				rules: q(At the start of your turns, this land deals 2 damage to its controller.),

				on_begin_turn: q^def(class creature creature, class game_state game) ->commands
					//deal 1 damage to controller at start of turn.
					if(game.current_player_turn_index = creature.controller, [
						add(game.players[creature.controller].life, -2),
						add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', target_player: creature.controller, source: creature, amount: 1, anim_type: 'bloodcord' })]),
					])
				^,

			})]))
		
			where construct = game.land_at_loc(target)  
			where target = info.targets[0],",
	},			
	
//-------------------------------------------------------------------------------------
	"Dense Woodland": {
		name: "Dense Woodland",
		type: "creature",
        set: "Experimental_1",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval FOOD",
		portrait: "school-food.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		artist: "sara",
		creature: {
			is_land: true,
            portrait: "forest.png",
			image_num: 18,
			activated_abilities: [{
				name: 'Awaken',
				cost: 2,
                loyalty_cost: 2,
				school: "@eval FOOD",
				is_response: false,
				once_per_turn: true,
				portrait: "treant-defender.png",
				rules: 'Summon an 8/8 immobile Treant Defender that persists till the start of your next turn.',
				possible_targets: "def(class game_state game, class creature corpse, [Loc] targets) ->[Loc]|null
					if(game.creature_at_loc(corpse.loc) != null, [], null)",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[game.summon_creature(
			    lib.citadel.create_creature('Treant Defender',
				{
					name: 'Treant Defender',
					controller: creature.controller,
					loc: creature.loc
			    }))] where creature = info.get_creature(game)",
			}],
		},
	},
    "Treant Defender":
    {
		name: "Treant Defender",
        portrait: "treant-defender.png",
		rarity: 0,
		type: "creature",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			tags: ['Treant'],
            portrait: "treant-defender.png",	
			attack: 8,
			life: 8,
			move: 0,
			triggered_abilities: [{
				name: "Hibernation",
				rules: "At the start of your turn, <i>Treant Defender</i> is sacrificed.",

				on_begin_turn: "def(class creature creature, class game_state game) ->commands
					if(game.current_player_turn_index = creature.controller, [
						set(creature.sacrificed, true)
					])
				",

			}],			
		},
	},	

// a cycle of radius-1_school land
	"Vast Highlands": {
		name: "Vast Highlands",
		type: "creature",
        set: "Experimental_1",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval GOLD",
		portrait: "highlands.png",
		portrait_focus: [567,268],
		portrait_focus_height: 200,
		artist: "stephenwang",
		rules: "Materia creatures in radius 1 have +1 armor",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",

		creature: {
			is_land: true,
            portrait: "highlands.png",
			image_num: 18,
			static_ability_effect: "if((game.locs_adjacent(creature.loc, target.loc) or (creature.loc = target.loc)) and not target.is_land and (GOLD in target.school), target.apply_static_effect('armor', 1))",
		},
	},	
	
    "Vast Swamp": {
		name: "Vast Swamp",
		type: "creature",
        set: "Experimental_1",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		portrait: "swamp.png",
		artist: "sara",
		rules: "Non-Entropia creatures radius 1 have -2 armor.",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",

		creature: {
			is_land: true,
            portrait: "swamp.png",
			image_num: 18,
			static_ability_effect: "if((game.locs_adjacent(creature.loc, target.loc) or (creature.loc = target.loc)) and not target.is_land and (not BLOOD in target.school), target.apply_static_effect('armor', -2))",
		},
	},	
	
	"Vast Forest": {
		name: "Vast Forest",
		type: "creature",
        set: "Experimental_1",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "forest.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		help_strings: ["Cover"],
		artist: "sara",
		rules: "Gaea creatures in radius 1 have <i>Cover</i>.",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",
		creature: {
			is_land: true,
            portrait: "forest.png",
			image_num: 18,
			static_ability_effect: "if((game.locs_adjacent(creature.loc, target.loc) or (creature.loc = target.loc)) and not target.is_land and (FOOD in target.school), target.add_ability_static_duration('Cover'))",
		},
	},	
	
	"Vast Mistlands": {
		name: "Vast Mistlands",
		type: "creature",
        set: "Experimental_1",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		portrait: "mistlands.png",
		rules: "Non-Minerva creatures in radius 1 have -2 attack.",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",
		creature: {
			is_land: true,
            portrait: "mistlands.png",
			static_ability_effect: "if((game.locs_adjacent(creature.loc, target.loc) or (creature.loc = target.loc)) and not target.is_land and (not SAPIENZA in target.school), target.apply_static_effect('attack', -2))",
		},
	},

//------------The Grand Fort of Pallon ----------------------------------
   	"Camp of Pallon": {
		name: "Camp of Pallon",
		set: "Experimental_1",
		rarity: 2,
		type: "creature",
		artist: "lucy",
		cost: 3,
		hero:	true,
		loyalty_cost: 1,
		portrait: "gatehouse.png",
		portrait_focus: [429,236],
		portrait_focus_height: 110,
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 5,
			armor: 1,
			portrait: "gatehouse.png",
            abilities: ['Ranged'],
			attack: 2,
			
			activated_abilities: [
				{
					name: 'Upgrade',
					cost: 3,
					once_per_turn: true,
					school: "@eval GOLD",
					rules: "Upgrade to the Hold of Pallon",			
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.transform(game, lib.citadel.create_creature('Hold of Pallon'))
					]
					  where creature = info.get_creature(game)",
				}
			],

			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
		}
	},
	
   	"Hold of Pallon": {
		name: "Hold of Pallon",
		rarity: 2,
		type: "creature",
		artist: "lucy",
		cost: 6,
		loyalty_cost: 2,
		portrait: "school-blood.png",
		portrait_focus: [429,236],
		portrait_focus_height: 110,
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			armor: 2,
			portrait: "gatehouse.png",
            abilities: ['Ranged'],
			attack: 3,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
			
			activated_abilities: [
				{
					name: 'Upgrade',
					cost: 4,
					once_per_turn: true,
					school: "@eval GOLD",
					rules: "Upgrade to the Fort of Pallon",			
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.transform(game, lib.citadel.create_creature('Fort of Pallon'))
					]
					  where creature = info.get_creature(game)",
				}
			],			
		}
	},	
	
   	"Fort of Pallon": {
		name: "Fort of Pallon",
		rarity: 2,
		type: "creature",
		artist: "lucy",
		cost: 8,
		loyalty_cost: 4,
		portrait: "gatehouse.png",
		portrait_focus: [429,236],
		portrait_focus_height: 110,
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 10,
			armor: 3,
			abilities: ['Ranged'],
			portrait: "gatehouse.png",
			attack: 5,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
			
            passive_abilities: [{
				name: "Bastion",
				rules: "Attacks all adjacent enemies",
			}],

			targets_attacking: "def(class game_state game) ->[class creature]
			if(has_action = false or attack <= 0, [],
			  filter(map(target_locs, if(target and target.controller != controller, target) where target = game.creature_at_loc(value)), value != null)
			   ) where target_locs = game.get_adjacent_locs(loc)",		
			
			activated_abilities: [
				{
					name: 'Upgrade',
					cost: 5,
					once_per_turn: true,
					school: "@eval GOLD",
					rules: "Upgrade to the Grand Fort of Pallon",			
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.transform(game, lib.citadel.create_creature('Grand Fort of Pallon'))
					]
					  where creature = info.get_creature(game)",
				}
			],
		},
			
	},		
	
   	"Grand Fort of Pallon": {
		name: "Grand Fort of Pallon",
		rarity: 2,
		type: "creature",
		artist: "lucy",
		cost: 11,
		loyalty_cost: 5,
		portrait: "gatehouse.png",
		portrait_focus: [429,236],
		portrait_focus_height: 110,
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			abilities: ["Ranged"],
			life: 12,
			armor: 4,
			portrait: "gatehouse.png",
			attack: 6,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			
            passive_abilities: [{
				name: "Bastion",
				rules: "Attacks all adjacent enemies",
			}],

			targets_attacking: "def(class game_state game) ->[class creature]
			if(has_action = false or attack <= 0, [],
			  filter(map(target_locs, if(target and target.controller != controller, target) where target = game.creature_at_loc(value)), value != null)
			   ) where target_locs = game.get_adjacent_locs(loc)",		
			
		},
			
	},		
	
//---------------- Multi School Cards --------------------------

	"Arcane Filibuster": {
		name: "Arcane Filibuster",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		cost: 0,
		loyalty_cost: 1,
		school: "@eval [SCROLLS, FAITH]",
		portrait: "tactical-blunder.png",
		artist: "lordbob",
		rules: "Arcane Filibuster ends when the next spell is cast. That spell will fizzle.",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			add(game.players[info.player_index].creature_avatar.triggered_abilities,
			[
			construct('triggered_ability', {
				name: 'Arcane Filibuster',
				rules: 'Arcane Filibuster ends when the next spell is cast. That spell will fizzle.',
				particle_effects: ['arcane_filibuster'],
				on_card_played: q^def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands [
					if(info.card != null and (class card <- info.card).type = 'spell', [
						set(creature.triggered_abilities, filter(creature.triggered_abilities, value.name != 'Arcane Filibuster'));
						[ set(spell.force_fizzle, true),
						  set(spell.respondable, false) 
						] where spell=game.stack[size(game.stack)-1]
						  asserting game.stack != []
					])
				]^,
			})
			]),

		]"
	},

	"Vulnerate": {
		name: "Vulnerate",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		cost: 1,
		loyalty_cost: 1,
		school: "@eval SCROLLS",
		portrait: "school-scrolls.png",

		rules: "Target creature gets -X armor, where X is your devotion to Entropia.",
		
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		add(game.creature_at_loc_or_die(info.targets[0]).armor, -1*game.players[info.player_index].get_resource_level(ENTROPIA))",
	},
	
	"Moon Glade": {
		name: "Moon Glade",
		set: "Experimental_1",
		rarity: 0,
		type: "creature",
		portrait: "school-food.png",
		cost: 2,
        loyalty_cost: 1,
		school: "@eval FOOD",
		creature: {
			is_land: true,
			image_num: 4,
            triggered_abilities: [{
				name:	'Bless',			
				rules: "At the start of your turns, Gaea or Minerva creature on this land gains +1/+1.",

                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			    if(game.current_player = creature.controller, [
					add(game.players[creature.controller].life, 1),
					[[add(c.life,1), add(c.attack,1)] | c <- game.creatures, c.is_building = false and not c.is_land, creature.loc = c.loc, MINERVA in c.school or GAEA in c.school],
				])",
			}],
		}
	},	
	
	"Monastry": {
		name: "Monastry",
		set: "Experimental_1",
		rarity: 0,
		type: "creature",
		portrait: "school-scrolls.png",
		cost: 2,
        loyalty_cost: 1,
		school: "@eval SCROLLS",
		creature: {
			is_land: true,
			image_num: 4,
            triggered_abilities: [{
				name:	'Bless',			
				rules: "At the start of your turns, Minerva or Aether creature on this land gains +1/+1.",

                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			    if(game.current_player = creature.controller, [
					add(game.players[creature.controller].life, 1),
					[[add(c.life,1), add(c.attack,1)] | c <- game.creatures, c.is_building = false and not c.is_land, creature.loc = c.loc, AETHER in c.school or MINERVA in c.school],
				])",
			}],
		}
	},		
	
	"Warriors' Temple": {
		name: "Warriors' Temple",
		set: "Experimental_1",
		rarity: 1,
		type: "creature",
		portrait: "school-faith.png",
		cost: 2,
        loyalty_cost: 1,
		school: "@eval FAITH",
		creature: {
			is_land: true,
			image_num: 4,
            triggered_abilities: [{
				name:	'Bless',
				rules: "At the start of your turns, Aether or Materia creature on this land gains +1/+1.",

                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			    if(game.current_player = creature.controller, [
					add(game.players[creature.controller].life, 1),
					[[add(c.life,1), add(c.attack,1)] | c <- game.creatures, c.is_building = false and not c.is_land, creature.loc = c.loc, MATERIA in c.school or AETHER in c.school],
				])",
			}],
		}
	},	

	"Demon's Camp": {
		name: "Demon's Camp",
		set: "Experimental_1",
		rarity: 0,
		type: "creature",
		portrait: "school-gold.png",
		cost: 2,
        loyalty_cost: 1,
		school: "@eval GOLD",
		creature: {
			is_land: true,
			image_num: 4,
            triggered_abilities: [{
				name:	'Bless',
				rules: "At the start of your turns, Materia or Entropia creature on this land gains +1/+1.",

                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			    if(game.current_player = creature.controller, [
					add(game.players[creature.controller].life, 1),
					[[add(c.life,1), add(c.attack,1)] | c <- game.creatures, c.is_building = false and not c.is_land, creature.loc = c.loc, ENTROPIA in c.school or MATERIA in c.school],
				])",
			}],
		}
	},		

	"Haunted Cavern": {
		name: "Haunted Cavern",	
		set: "Experimental_1",
		rarity: 1,
		type: "creature",
		portrait: "school-blood.png",
		cost: 2,
        loyalty_cost: 1,
		school: "@eval BLOOD",
		creature: {
			is_land: true,
			image_num: 4,
            triggered_abilities: [{
				name:	'Bless',
				rules: "At the start of your turns, Entropia or Gaea creature on this land gains +1/+1.",

                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			    if(game.current_player = creature.controller, [
					add(game.players[creature.controller].life, 1),
					[[add(c.life,1), add(c.attack,1)] | c <- game.creatures, c.is_building = false and not c.is_land, creature.loc = c.loc, GAEA in c.school or ENTROPIA in c.school],
				])",
			}],
		}
	},		
		
	"Thousand Arrows": {
		name: "Thousand Arrows",
		set: "Experimental_1",
		rarity: 1,
		type: "spell",
		school: "@eval BLOOD",
		portrait: "school-blood.png",
		cost: 3,
		loyalty_cost: 2,

		rules: "Deal 2 damage for X times to target creature, where X is your devotion to Materia.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		
		  map(range(game.players[info.player_index].get_resource_level(GOLD)),	creature.inflict_damage(game, 2))
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])
			
			",

			
	},
	
	"Promised Shelter": {
		name: "Promised Shelter",
		set: "Experimental_1",
		rarity: 1,
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval FOOD",
		portrait: "school-food.png",
		creature: {
			is_land: true,

			triggered_abilities: [{
				name: "Mercy",
				rules: "At the start of your turns. If your life is lower than 2 times your devotion to Aether, heal you by 2.",				

				on_begin_turn: "def(class creature creature, class game_state game) ->commands
				if( (game.current_player_index = creature.controller) and (game.players[creature.controller].life<(2*game.players[creature.controller].get_resource_level(FAITH))), 
					add(game.players[creature.controller].life, 2))
				",
			}],
		},
	},	
		
//---------EOF---------------------	
}
