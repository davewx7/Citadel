{
	id: "creature_land_flag",
	is_strict: true,
	always_active: true,

	properties: {

		controller: { type: "obj citadel_controller" },
		creature: { type: "obj creature" },

		banner_width: "int :: controller.tile_width/5",
		width: "int :: controller.tile_width/4 + banner_width",
		height: "int :: int(controller.tile_height*0.96)",

		has_mouseover: { type: "bool", default: false },

		is_enemy: { type: "bool" },

		raise_anim: { type: "decimal", default: 1.0 },

		animate_flag_raise: "def() ->commands
			execute(me,
			[
				set(raise_anim, 0.0),
				schedule(40,
				animate(me, {
					raise_anim: 1.0,
				}, {
					duration: 50,
					easing: lib.math.ease_out_elastic,
				});

				lib.sound.play_sound(me, if(is_enemy, 'gameplay/lose_village', 'gameplay/capture_village'))
				)
			]
			)
		",

		animate_flag_retraction: "def() ->commands
			execute(me,
			[
				animate(me, {
					raise_anim: 0.0,
				}, {
					duration: 50,
					on_complete: remove_object(me),
				})
			])
		",

		render: "def(int ww, int hh) ->frame

		lib.citadel.render_frame(c, ww, hh, [
			if(is_enemy,
			   c.set_source_rgba(0,0,0,if(has_mouseover, 1.0, 0.7)),
			   c.set_source_rgba(1,1,1,if(has_mouseover, 1.0, 0.8))
			),

			c.save(),
			if(is_enemy, [
				c.translate(ww, 0),
				c.scale(-1, 1),
			]),
			c.move_to(0, hh/2),
			c.line_to(ww - banner_width, 0),
			c.line_to(ww, 0),
			c.line_to(banner_width, hh/2),
			c.fill(),

			c.move_to(0, hh/2),
			c.line_to(ww - banner_width, hh),
			c.line_to(ww, hh),
			c.line_to(banner_width, hh/2),
			c.fill(),
			c.restore(),

			c.save(),

			if(is_enemy,
			   c.set_source_rgba(0.41,0.47,0.49,1.0),
			   c.set_source_rgba(0.81,0.49,0.23,1.0)
			),

			if(is_enemy, [
				c.translate(ww, 0),
				c.scale(-1, 1),
			]),

			c.set_line_width(hh*0.02),

			c.move_to(0, hh/2),
			c.line_to(ww - banner_width, hh*0.01),
			c.line_to(ww, hh*0.01),
			c.stroke(),

			c.move_to(0, hh/2),
			c.line_to(ww - banner_width, hh*0.99),
			c.line_to(ww, hh*0.99),
			c.stroke(),

			c.restore(),

			//c.translate(ww/2, 0),
			if(is_enemy, [
				c.translate(ww*0.15, hh*0.05),
				c.rotate(3.14/3),
			], [
				c.translate(ww*0.26, hh*0.5),
				c.rotate(-3.14/3),
			]),

			[
				c.translate(ww/2 - area.width/2, 0),
			]
			where area = c.text_extents(
				lib.font.regular_font, font_size,
				presented_land_name
			),
			c.set_font(lib.font.regular_font),
			c.set_font_size(font_size),
			if(is_enemy, c.set_source_rgba(1,1,1,1), c.set_source_rgba(0,0,0,1)),
			c.text_path(presented_land_name),
			c.fill(),
		]
		where font_size =
//			dump([
//				'font_size', lib.citadel.py(14), base_area.width, hh, hh * 0.55,
//				decimal(hh * 0.55) / decimal(base_area.width), 1,
//				lib.citadel.py(14) * 1.0,
//				lib.citadel.py(14) * decimal(hh * 0.55) / decimal(base_area.width),
//				returning, presented_land_name
//			], returning)
//			where returning =
			lib.citadel.py(14) *
				if(base_area.width > hh * 0.55,
					decimal(hh * 0.55) / decimal(base_area.width),
				// else
					1.0)
		where base_area =
//		dump(['base_area', presented_land_name, returning], returning) where returning =
		c.text_extents(lib.font.regular_font, lib.citadel.py(14), presented_land_name))
		where c = canvas()
		where presented_land_name =
			if(screen_width <= 1440,
				prune_land_name(creature.creature_object.name),
				creature.creature_object.name)
		where prune_land_name = def
			(string s) -> string
			switch(size(controller.state.lanes),
				1, prune_land_name_to(17, s),
				3, prune_land_name_to(15, s),
				5, prune_land_name_to(12, s),
				2, prune_land_name_to(15, s),
				4, prune_land_name_to(12, s),
				s)
		where prune_land_name_to = def
			(int i, string s) -> string
			if(size(s) > i,
				if(use_unicode_ellipsis,
					s[:i-1] + 'â€¦',
					s[:i-3] + '...'),
				s)
			asserting i > 5
			where use_unicode_ellipsis = true
		where screen_width = level.dimensions[2]
		",
	},

	on_type_updated: "fire_event('create')",

	on_mouse_enter: "set(has_mouseover, true); set(animation, render(width, height))",
	on_mouse_leave: "set(has_mouseover, false); set(animation, render(width, height))",

	on_create: "set(animation, render(width, height))",

	on_process: "[
		set(mid_y, creature.mid_y),
		set(mid_x, if(is_enemy, creature.mid_x + (controller.tile_width/2 - int(banner_width*0.1))*raise_anim,
		                        creature.mid_x - (controller.tile_width/2 - int(banner_width*0.3))*raise_anim)),
	]",

	on_show_tooltip: "[
		fire_event(creature, 'show_tooltip', { controller: ctrl })
	] where ctrl = obj citadel_controller <- arg.controller",

	on_click: "creature.clicked()",
}
