{
	id: "creature_status",
	is_strict: true,

	hidden_in_game: true,

	animation: [
	{
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	}
	],

	properties: {
		destroy: "def() ->commands [if(creature_child, remove_object(creature_child)), remove_object(me)]",

		creature_child: { type: "null|obj creature" },

		font: "'RobotoCondensed-Regular'",
		color: "'antique_white'",

		creature_object: {
		  type: "class creature",
		  set: "execute(me, ([
		    spawn('creature', me.mid_x + if(value.sprite_sheet = 'creature_large', 140, 50), me.mid_y,
			  {
				image_num: value.image_num,
				status_avatar: true,
				creature_object, value,
				zorder: zorder+5,
			  },
			  [if(value.sprite_sheet, set(child.animation, value.sprite_sheet), if(value.is_building or value.is_construct, set(child.animation, 'building'))), set(creature_child, child)]),
			set_widgets([
			  {
			  	type: 'grid',
				padding: [10,10],
				columns: 3,
				horizontal_padding: 5,
				x: 40,
				y: 60,
				children: fold(map(activated_abilities,
				 [
				  {
					type: 'grid',
					padding: [2,2],
					columns: value.cost,
					children: map(range(value.cost), {
						type: 'grid',
						columns: 2,
						children: map(context.value.school, {
							type: 'image',
							image: 'magic-icons.png',
							area: [3+(value-1)*17,3,18+(value-1)*17,18],
							image_width: if(size(context.context.value.school) > 1, 18, 36),
							image_height: if(size(context.context.value.school) > 1, 18, 36),
						})
				    })
				  },
				  if(controller.can_use_ability(new_creature_object, value.name),
				  //if we can use the ability show a clickable button.
				  {
					type: 'button',
					resolution: 'normal',
					//padding: [10, 10],
					wh: [100, 25],
					label: {type: 'label', text: value.name, font: font, size: 12, color: color},
					on_click: 'controller.ability_clicked(creature_object, q(' + value.name + '))'
				  },

				  //can't use the ability, show a label.
				  {
				    type: 'label',
					text: value.name,
					wh: [100, 25],
					font: font,
					color: color,
					size: 12
				  }
				  ),


				  {
					type: 'label',
					text: value.rules,
					font: font,
					color: color,
					size: 12
				  }
				 ]),
				 a + b
				)
			  }
			]) where activated_abilities = [a | a <- value.activated_abilities],
		    set(_data, value),
		  ] asserting controller
		    where new_creature_object = value,
		          controller = find(level.chars, value is obj citadel_controller)))",
		},
	},
}
