{
	id: "recent_games_dialog",
	is_strict: true,
	zorder: 10000,

	types: {
		PlayerInfo: "
		{
			name: null|string,
			avatar: string,
			deck_avatar: null|string,
			deck_category: null|string,
			deck_name: null|string,
			is_ai: null|bool,
		}
		",
		GameRecord: "
		{
			timestamp: int,
			end_timestamp: int,
			player_info: [PlayerInfo],
			players: [string],
			replay: null|[string],
			id: null|string,
			winner: {winner: string, loser: string, winner_quests: null|any, loser_quests: null|any},
		}
		",
	},

	properties: {
		controller: { type: "obj title_controller" },

		_width: "round_to_even(lib.citadel.py(800))",
		_height: "round_to_even(lib.citadel.py(600))",

		perspective: "string :: controller.username",

		render: "def() ->commands [
		set(animation, lib.citadel.render_frame(c, ww, hh,
		[
			c.set_source_rgba(0.2, 0.2, 0.2, 1.0),
			c.rectangle(0, 0, ww, hh),
			c.fill(),

			c.set_source_rgba(0.5, 0.5, 0.5, 1.0),
			c.set_line_width(lib.citadel.dpy(3.0)),
			c.rectangle(0, 0, ww, hh),
			c.stroke(),
		])) where c = canvas()
		    where ww = _width
		    where hh = _height
		]",

		create_objects: "def() ->commands [
			spawn('button_controller', {
				x: x2 - lib.citadel.py(150),
				y: y2 - lib.citadel.py(50),
				button_width: lib.citadel.py(140),
				button_height: lib.citadel.py(40),
				_font_size: lib.citadel.py(24),
				text: 'Close',
				on_click: me.close_dialog,
				zorder: me.zorder+10,
			});

			spawn('scrollable_pane', {
				x: x + lib.citadel.py(10),
				y: y + lib.citadel.py(10),
				area_width: _width - lib.citadel.py(20),
				area_height: _height - lib.citadel.py(80),
				elements: [],
				zorder: zorder+100,
				focus_on_mouseover: true,
			}, [
				set(_pane, child),
			]);

			update_games()
		]",

		_pane: { type: "null|obj scrollable_pane" },
		pane: "obj scrollable_pane<- _pane",

		close_dialog: "def() ->commands [
			remove_object(me),
		]",

		watch_game: "def(GameRecord game) ->commands
		set(controller.replay_perspective, if(myplayer, index(game.players, myplayer), 0)) where myplayer = find(game.players, value = controller.username);
		execute(me,
		if(game.id is string,
			remove_object(me);
			controller.watch_replay(game.id),

		   game.replay is [string],
			remove_object(me);
			controller.start_replay(game)
		)
		)
		",

		_elements: { type: "[custom_obj]", default: [] },

		update_games: "def() ->commands
		[
			set(_elements, []),

			map(all_games, [

			spawn('player_avatar', {
				mid_x: lib.citadel.py(150),
				mid_y: ypos,
				_avatar: value.player_info[0].avatar,
				_width: lib.citadel.py(80),
				_height: lib.citadel.py(80),
				_nick: value.players[0],
				face_right: true,
			}, [
				add(_elements, [child]),
			]),

			spawn('player_avatar', {
				mid_x: _width - lib.citadel.py(230),
				mid_y: ypos,
				_avatar: value.player_info[1].avatar,
				_width: lib.citadel.py(80),
				_height: lib.citadel.py(80),
				_nick: value.players[1],
				face_right: false,
			}, [
				add(_elements, [child]),
			]),

			spawn('label', {
				mid_x: lib.citadel.py(250),
				mid_y: ypos,
				_text: [lib.chat.nick_display(value.players[0])],
				_font_size: lib.citadel.py(24),
				_color: if(win, [0,1,0,1], [1,0,0,1]),
			}, [
				add(_elements, [child]),
			]) where win = (value.winner.winner = perspective),

			spawn('label', {
				mid_x: lib.citadel.py(350),
				mid_y: ypos,
				_text: ['vs'],
				_font_size: lib.citadel.py(24),
			}, [
				add(_elements, [child]),
			]),

			spawn('label', {
				mid_x: lib.citadel.py(450),
				mid_y: ypos,
				_text: [lib.chat.nick_display(value.players[1])],
				_font_size: lib.citadel.py(24),
				_color: if(win, [0,1,0,1], [1,0,0,1]),
			}, [
				add(_elements, [child]),
			]) where win = (value.winner.loser = perspective),

			[

			spawn('label', {
				_halign: 'left',
				x: _width - lib.citadel.py(160),
				mid_y: ypos,
				_text: if(value.id != null, ['ID: ' + value.id], []) +
				       [str(start_time.year) + '/' + str(start_time.month) + '/' + str(start_time.day),
				        str(start_time.hour) + ':' + str(start_time.minute),
						'Duration: ' + str((duration+30)/60) + ' minutes'],
				_font_size: lib.citadel.py(14),
			}, [
				add(_elements, [child]),
			])
			
			] where start_time = time(value.timestamp)
			  where duration = value.end_timestamp - value.timestamp,

			spawn('label', {
				_halign: 'left',
				mid_x: lib.citadel.py(360),
				mid_y: ypos + lib.citadel.py(25),
				_text: [if(win, 'Victory', loss, 'Defeat', '')],
				_font: lib.font.bold_font,
				_font_size: lib.citadel.py(14),
				_color: if(win, [0,1,0,1], [1,0,0,1]),
			}, [
				add(_elements, [child]),
			]) where win = (value.winner.winner = perspective)
			   where loss = (value.winner.loser = perspective),

			spawn('button_controller', {
				mid_y: ypos,
				x2: lib.citadel.py(80),
				text: 'Watch',
				button_width: lib.citadel.py(60),
				button_height: lib.citadel.py(20),
				_font_size: lib.citadel.py(14),
				on_click: (def()->commands watch_game(value)),
			}, [
				add(_elements, [child]),
			]),
		


			] where ypos = lib.citadel.py(50) + index*lib.citadel.py(100)),
		]
		 where all_games = [GameRecord] :: sort(filter((list<- (get_document('local-replays.cfg', [enum null_on_failure,enum user_preferences_dir]) or [])) + controller.recent_games,
		 	value is GameRecord
		 ), a.timestamp > b.timestamp)
		;

		map(_elements, remove_object(value));
		
		[
			map(pane.elements, remove_object(value.obj)),
			set(pane.elements, []),

			set(pane.elements, map(_elements, {
				obj: value,
				xpos: value.x - lib.citadel.py(10),
				ypos: value.y,
			}));
			pane.recalculate(),
		]
		 ",
	},

	on_create: "[set(c.paused, true) | c <- level.chars, c != me, not c is obj matchmaking_base]; render(); create_objects()",
	on_type_updated: "fire_event('being_removed'); fire_event('create')",

	on_being_removed: "map(level.chars, set(value.paused, false)); map(spawned_children, remove_object(value))",
}
