{
	id: "rival_avatar",
	is_strict: true,

	properties: {
		halo: { type: "decimal", default: 0.0 },
		rival: { type: "class rival" },
		complete: { type: "bool", default: false },
		border_size: "int :: lib.gui.py(10)",
		render: "def() ->commands [
			set(animation, lib.gui.render_frame(c, ww + border_size*2, hh + border_size*2,
			[
				c.translate(border_size, border_size),
				c.rectangle(0, 0, ww, hh),
				c.clip(),

				c.rectangle(0, 0, ww, hh),
				c.set_source_rgba(0, 0, 0, 1),
				c.fill(),

				c.save(),
				c.rectangle((ww*2)/4, 0, ww/2, hh),
				c.clip(),

				c.translate((ww*3)/4, hh/2),
				[
					c.scale(lib.gui.dpy(adj.scale)),
					c.paint_image('images/portraits/card-size/' + (card.portrait or 'null'), [-adj.xpos, -adj.ypos]),
				] where adj = _adjustments(rival.avatar),
				c.restore(),

				c.set_linear_pattern((ww*2)/4, 0, (ww*2)/4 + ww*0.25, 0, [
					{ offset: 0, red: 0, green: 0, blue: 0, alpha: 1.0 },
					{ offset: 1, red: 0, green: 0, blue: 0, alpha: 0.0 },
				]),
				c.rectangle((ww*2)/4, 0, ww*0.25, hh),
				c.fill(),

				c.save(),
				c.translate(hh*if(rival.icon != null or rival.school != null, 0.9, 0.2), hh*0.15),

				c.set_source_rgba(1, 1, 1, 1),

				map(fragments, [
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]) where fragments = c.markup_text(q(<font size=') + lib.gui.py(14) + q('>) + rival.name + if(complete, q(<font weight='+30%'>&emdash;complete</font>), '') + q(</font>\n<font size=') + lib.gui.py(12) + q('>) + rival.title + q(</font>), ww),

				c.restore(),

				if(rival.icon != null, [
					c.save(),

					c.translate(hh*0.15, hh*0.2),
					c.draw_svg('images/icons/' + rival.icon, hh*0.6, hh*0.6),

					c.restore(),
				], rival.school != null, [
					c.save(),
					c.translate(hh*0.15, hh*0.2),
					c.set_source_color(lib.citadel.school_info[rival.school].color),
					c.draw_svg('images/icons/school-hex.svg', hh*0.6, hh*0.6),
					c.set_source_color([0,0,0,1]),
					c.draw_svg('images/icons/school-' + lower(lib.citadel.school_info[rival.school].name) + '.svg', hh*0.6, hh*0.6),
					c.restore(),
				]),

			]
			)) where focus = card.portrait_focus or [400,400]
			   where card = lib.citadel.create_card(rival.avatar)
			   where ww = _width
			   where hh = _height
			   where c = canvas()
		]",

		mouseover_handler: { type: "null|function(obj rival_avatar) ->commands" },
		mouseoff_handler: { type: "null|function(obj rival_avatar) ->commands" },
		click_handler: { type: "null|function(obj rival_avatar) ->commands" },

		_width: { type: "int", init: "lib.gui.py(250)" },
		_height: { type: "int", init: "lib.gui.py(46)" },

		_adjustments: "def(string id) ->RivalAvatarAdj
		switch(id,
			'Catherine, Lady of the Blade', {
				scale: 0.8,
				xpos: 100.0,
				ypos: 80.0,
			},
			'Gezzix, Lord of Death', {
				scale: 0.6,
				xpos: 180.0,
				ypos: 80.0,
			},
			'Rihn, Incarnate', {
				scale: 0.4,
				xpos: 160.0,
				ypos: 160.0,
			},
			'Blink Mage', {
				scale: 0.5,
				xpos: 150.0,
				ypos: 190.0,
			},
			'Eji, the Archmage', {
				scale: 0.8,
				xpos: 220.0,
				ypos: 60.0,
			},
			'Grizzis, Lord of the Hunt', {
				scale: 0.4,
				xpos: 200.0,
				ypos: 120.0,
			},
			'Astral Walk', {
				scale: 0.5,
				xpos: 180.0,
				ypos: 80.0,
			},
			'Acolyte', {
				scale: 0.7,
				xpos: 170.0,
				ypos: 170.0,
			},
			q(Rihn's Anointed), {
				scale: 0.7,
				xpos: 170.0,
				ypos: 220.0,
			},
			q(Fireball), {
				scale: 0.3,
				xpos: 210.0,
				ypos: 240.0,
			},
			q(Outsmart the Guards), {
				scale: 0.3,
				xpos: 200.0,
				ypos: 230.0,
			},
			q(Silence), {
				scale: 0.4,
				xpos: 170.0,
				ypos: 200.0,
			},
			q(Cover), {
				scale: 0.35,
				xpos: 180.0,
				ypos: 230.0,
			},
			q(Dawn Obelisk), {
				scale: 0.3,
				xpos: 170.0,
				ypos: 230.0,
			},
			q(Dark Emissary), {
				scale: 0.5,
				xpos: 170.0,
				ypos: 250.0,
			},
			q(Cunning Wisp), {
				scale: 0.7,
				xpos: 240.0,
				ypos: 220.0,
			},
			q(Purrsan Ambusher), {
				scale: 0.4,
				xpos: 150.0,
				ypos: 260.0,
			},
			q(Divine Restoration), {
				scale: 0.5,
				xpos: 240.0,
				ypos: 230.0,
			},
			q(Fated Shards), {
				scale: 0.4,
				xpos: 230.0,
				ypos: 180.0,
			},
			{
				scale: 1.0,
				xpos: 0.0,
				ypos: 0.0,
			})
		",
	},

	types: {
		RivalAvatarAdj: "{
			scale: decimal,
			xpos: decimal,
			ypos: decimal,
		}",
	},

	on_create: "
		render()
	",

	on_mouse_enter: "if(mouseover_handler, [
		lib.sound.play_sound(me, 'interface/rival-mouseover'),
		mouseover_handler(me)
	])",
	on_mouse_leave: "if(mouseoff_handler, mouseoff_handler(me))",
	on_click: "if(click_handler, [
		swallow_mouse_event(),
		lib.sound.play_sound(me, 'interface/rival-mouseclick'),
		click_handler(me)
	])",

	on_type_updated: "render()",

	shader: {
		name: "rival_avatar_render",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		",

		fragment: "
		uniform sampler2D u_anura_tex_map;
		uniform vec4 u_anura_sprite_area;
		uniform float u_alpha;
		uniform float u_halo;
        varying vec2 v_texcoord;
		void main()
		{
			vec4 col = texture2D(u_anura_tex_map, v_texcoord);

			if(col[3] < 0.01) {
				float sprite_area_width = u_anura_sprite_area[2] - u_anura_sprite_area[0];
				float sprite_area_height = u_anura_sprite_area[3] - u_anura_sprite_area[1];
				float dist_x = 5.0*min(v_texcoord[0] - u_anura_sprite_area[0], u_anura_sprite_area[2] - v_texcoord[0])/sprite_area_height;
				float dist_y = min(v_texcoord[1] - u_anura_sprite_area[1], u_anura_sprite_area[3] - v_texcoord[1])/sprite_area_width;

				gl_FragColor = vec4(1, 1, 1, ((min(dist_x,dist_y)-0.10)*u_halo*2.0))*u_alpha;
			} else {
				if(col[3] < 0.1) {
					col[3] = 0.0;
				}
				gl_FragColor = col*u_alpha;
			}
		}
		",

		draw: "[
			set(uniform_commands.u_alpha, parent.alpha/255.0),
			set(uniform_commands.u_halo, parent.halo),
		]",
	},
}
