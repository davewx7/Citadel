{
    id: "campaign_encounter_dialog",
    is_strict: true,

    zorder: -5,

    properties: {
        controller: { type: "obj title_controller" },

        encounter: { type: "class campaign_encounter" },

		location_name: { type: "string" },

        _buttons: { type: "[obj button_controller]", default: [] },

        _text: { type: "null|obj scrolling_text" },

		_edit_widgets: { type: "[custom_obj]", default: [] },

        button_pressed: "def(string option_name) ->commands
		map(_tips, remove_object(value));
		set(_tips, []);
		encounter.choose_option(controller, option_name);  //choose the option. The ; is very important here since it makes sure this is all done before continuing.
[
    set(_have_created_buttons, false),   //reset back to not having created buttons
    clear_children(),
    if(encounter.finished, leave_encounter(),
		encounter.scenario,
		[
			set(controller.return_from_game_override, me.return_from_game);
			controller.set_specified_reward(encounter.victory_reward);
			controller.play_single_player_game(encounter.scenario + { node_id: encounter.node_id }),
		],
		show()
	),
]
",
	
		return_from_game: "def(bool result, null|class game_state state)->commands
			map(_starting_objects, if(value not in level.chars, add_object(value)));
			set(encounter.scenario, null);
			add_object(me);
			clear_children();
			set(_previous_image, null);
			set(_previous_particles, []);
			update_campaign_quest_progress();
			if(result, [
				controller.set_campaign_location(location_name),
				lib.citadel.register_campaign_encounter_victory(encounter.title),
				encounter.win_battle(controller),
			],
				encounter.lose_battle(controller)
			);
			show();
			create_widgets();
			map(_edit_widgets, add_object(value))
		",

		leave_encounter_override: { type: "null|function()->commands" },

		leave_encounter: "def() ->commands
		if(leave_encounter_override != null,
		leave_encounter_override(),
		[
			lib.sound.play_sound(me, 'interface/leave-library'),
			controller.transition_screen(
			; [
				remove_object(me),
				remove_object(controller),
				add_object(controller);
				controller.show_ui();
				controller.show_campaign()
			],
			[enum transition_after_zoom] + if(encounter.transition_zoom_in, [enum transition_zoom_in], []))
		]
		)
		",

		button_enter: "def(int n) ->commands
		if(n >= 0 and n < size(_buttons), [
			set(_buttons[n].green, 0),
			set(_buttons[n].blue, 0),
		])
		",

		button_leave: "def(int n) ->commands
		if(n >= 0 and n < size(_buttons), [
			set(_buttons[n].green, 255),
			set(_buttons[n].blue, 255),
		])
		",


         create_buttons: "def() ->commands
		set(_buttons, []);
			map(encounter.options,
    		spawn('button_controller', {
        		zorder: zorder+2,
        		x2: x2 - lib.gui.py(20) - lib.gui.py(210)*(size(encounter.options)-(index+1)),
				mid_y: y2,
				text: value,
        		on_click: def()->commands if(enabled, button_pressed(value)),
				button_width: lib.gui.py(180),

				color_scheme: lib.citadel.library_color_scheme,

				has_focus: (index = 0),

				 //_enter_buttons: ['Return', ' '],
				 //_tab_buttons: [9, 'Right'],
				 //_prev_buttons: ['Left'],
			}, [
			    add(_buttons, [child]),
			]
			)
			where enabled = lib.campaign_encounter.eval_condition(controller, encounter.option_condition(index))
		)
    	",

        _have_created_buttons: { type: "bool", default: false },

		_calculate_image_area: "def() -> [decimal,decimal,decimal,decimal]
		//dump(['IMAGE_AREA::', res, ww, hh, left_raw, right_raw, top_raw, bot_raw, encounter.image_focus_x, encounter.image_focus_y], res)
		//where res =

		if(encounter.image_area != null, encounter.image_area,

		[
			clamp(left_raw + h_adj, 0.0, image_dim.x),
			clamp(top_raw + v_adj, 0.0, image_dim.y),
			clamp(right_raw + h_adj, 0.0, image_dim.x),
			clamp(bot_raw + v_adj, 0.0, image_dim.y),
		]

		where h_adj = if(left_raw < 0.0, -left_raw, right_raw > image_dim.x, -(right_raw - image_dim.x), 0.0)
		where v_adj = if(top_raw < 0.0, -top_raw, bot_raw > image_dim.y, -(bot_raw - image_dim.y), 0.0)

		where left_raw = encounter.image_focus_x - ww/2.0
		where right_raw = encounter.image_focus_x + ww/2.0
		where top_raw = encounter.image_focus_y - hh/2.0
		where bot_raw = encounter.image_focus_y + hh/2.0

		where hh = ww*0.66666
		where ww = image_dim.x/encounter.image_zoom
		where image_dim = c.image_dim('images/' + encounter.image)
		where c = canvas()
		)
		",

		_particles: { type: "[obj dialog_particle_editor]", default: [] },
		_previous_particles: { type: "[obj dialog_particle_editor]", default: [] },
		_image: { type: "null|obj image_widget" },
		_previous_image: { type: "null|obj image_widget" },

		render: "def(int ww, int hh) ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
				//here go the cairo instructions to render the dialog.
				/*
				c.save(),
				c.scale(_scale*decimal(ww)/decimal(image_dim.x)),
				c.translate(_translate_x*image_dim.x, hh/4 - image_dim.y/2 + _translate_y*image_dim.y),
				c.paint_image('images/' + encounter.image),
				c.restore(),
				*/
			//	c.rectangle(0, 0, ww, hh),
			//	c.set_source_rgba(1,1,1,1),
			//	c.fill(),

				c.save(),
				c.translate(0, decimal((hh*0.3333333)*2.20)),
				c.scale(decimal(ww)/decimal(textbox_dim.x),decimal(hh/3.75)/decimal(textbox_dim.y)),
				c.paint_image('images/dialog-background.png'),
				c.restore(),
				c.translate(50, 0),
			])
			where textbox_dim = c.image_dim('images/dialog-background.png')
			where image_dim = c.image_dim('images/' + encounter.image)
			 where c = canvas(),
		})
		",

		show: "def() ->commands
		[
			render(lib.gui.py(924), lib.gui.py(840));

			set(mid_xy, [lib.gui.py(684), lib.gui.py(452)]);
			spawn('scrolling_text', {
				zorder: zorder+1,
				x: lib.gui.py(270),
				y2: y2 - lib.gui.py(30),
				width: lib.gui.py(766),
				height: lib.gui.py(160),
				font_size: 28,
				border_width: lib.gui.py(10),
				text: encounter.text,
			}, [
				set(_text, child),
			]);

			spawn('image_widget', {
				x: x,
				y: y,
				zorder: zorder-5,
				image: encounter.image,
				image_area: if(_previous_image != null and _previous_image.image = encounter.image,
				               _previous_image.image_area, _calculate_image_area()),
				draw_width: lib.gui.py(924),
				draw_height: lib.gui.py(620),
			}, [
				if(has_next, [
					set(encounter.image_area, encounter.next_image_area or encounter.image_area),
					set(encounter.image_focus_x, encounter.next_image_focus_x or encounter.image_focus_x),
					set(encounter.image_focus_y, encounter.next_image_focus_y or encounter.image_focus_y),
					set(encounter.image_zoom, encounter.next_image_zoom or encounter.image_zoom),

					set(encounter.next_image_focus_x, null),
					set(encounter.next_image_focus_y, null),
					set(encounter.next_image_zoom, null),
				]);
				if(has_next or _previous_image != null and _previous_image.image = encounter.image,
					animate(child, {
						image_area: _calculate_image_area(),
					}, {
						duration: encounter.image_animate_time,
						easing: encounter.image_animate_easing or lib.math.linear,
						name: 'move',
						replace_existing: true,
					})
				),

				if(_previous_image != null and _previous_image.image != encounter.image and encounter.image_transition != null,
					add_object(_previous_image);
					add(_previous_image.zorder, 1);
					if(encounter.image_transition = enum fade,
						animate(_previous_image, {
							alpha: 0,
						}, {
							duration: encounter.image_transition_time,
							on_complete: remove_object(_previous_image),
						})
					)
				),
				set(_previous_image, _image),
				set(_image, child),
			] where has_next = encounter.next_image_area != null or encounter.next_image_zoom != null or encounter.next_image_focus_x != null);


			map(encounter.particle_effects,
			if(previous != null,
				[
				add_object(previous),
				add(_particles, [previous]),
				],

				spawn('dialog_particle_editor', {
					particle_node: lib.campaign_encounter.get_dialog_particles(value),
					_image: _image,
					hidden: true,
					zorder: zorder+5,
				}, [
					add(_particles, [child])
				])
			)

				where previous = find(_previous_particles, value.particle_node.id = context.value)
			);
			set(_previous_particles, _particles),
		]
		",

		clear_children: "def() ->commands [
			remove_object(_text),
			set(_text, null),
			map(_buttons, remove_object(value)),
			set(_buttons, []),
			set(_previous_image, _image),
			set(_previous_particles, _particles),
			remove_object(_image),
			set(_image, null),

			map(_particles, remove_object(value)),
			set(_particles, []),
		]
		",

		create_widgets: "def() ->commands [
			remove_widgets(),
		]",

		remove_widgets: "def() ->commands [
			map(_widgets, remove_object(value)),
			set(_widgets, []),
		]
		",

		_widgets: { type: "[custom_obj]", default: [] },

		_quest_display: { type: "[obj campaign_quest_display]", default: [] },

		_tips: { type: "[obj tip_dialog]", default: [] },

		update_campaign_quest_progress: "def(string|null new_quest=null) ->commands
		[
			map(_quest_display, remove_object(value)),
			set(_quest_display, []),

			map(lib.citadel.campaign_quest_progress,
			[
				set(quest.progress, progress);

				if(existing, [
					animate(existing, {
						y: lib.gui.py(400 + index*50),
					}, {
						duration: 20,
					})
				], [
					spawn('campaign_quest_display', {
						x: lib.gui.py(8),
						y: lib.gui.py(400 + index*50),
						quest: quest,
						alpha: if(new_quest = quest.id, 0, 255),
					}, [
						add(_quest_display, [child]),

						if(new_quest = quest.id, [
							animate(child, {
								alpha: 255,
							}, {
								duration: 10,
							}),

							spawn('tip_dialog', {
								zorder: 25000,
								_width: lib.gui.py(260),
								_height: lib.gui.py(160),
								x: child.x + lib.gui.py(300),
								y: child.y - lib.gui.py(100),
								_title: 'Quest Unlocked',
								_tip: {
									key: 'campaign_quest_tip_temporary',
									text: sprintf(q(You have unlocked <i>%s</i>!), quest.display_name),
									targets: [child],
								},
							}, [
								add(_tips, [child])
							])
						])
					]),
				])
			]
			where existing = find(level.chars, value is obj campaign_quest_display and value.quest.id = quest.id)
			where progress = value
			where quest = lib.citadel.get_campaign_quest(key))
		];

		if(_progressing_quest != null, progress_campaign_quest(_progressing_quest, _progressing_quest_amount))
		",

		_progressing_quest: { type: "null|string" },
		_progressing_quest_amount: { type: "int", default: 0 },

		progress_campaign_quest: "def(string quest_id, int amount) ->commands
		if(quest_display = null, [
			set(_progressing_quest, quest_id),
			set(_progressing_quest_amount, amount),
		], [
			set(_progressing_quest, null),

			set(quest_display.quest_progress_anim, decimal(final_amount - amount));
			animate(quest_display, {
				quest_progress_anim: decimal(final_amount),
			}, {
				duration: max(amount, 20),
			})
		])
		
		where quest_display = find(level.chars, value is obj campaign_quest_display and value.quest.id = quest_id)
		where final_amount = (lib.citadel.campaign_quest_progress[quest_id] or 0)",

		complete_campaign_quest: "def(string quest_id) ->commands

		if(quest_display != null, [
			animate(quest_display, {
				alpha: 0,
			}, {
				duration: 20,
				on_complete: remove_object(quest_display),
			})
		])
			
		where quest_display = find(level.chars, value is obj campaign_quest_display and value.quest.id = quest_id);

		update_campaign_quest_progress()
		",

		_starting_objects: { type: "[custom_obj]", default: [] },
	},

	events: {
		create: "[
			create_widgets(),
			update_campaign_quest_progress();
			button_pressed('')
		]",


		process: "if(_text != null and _text.has_finished and _have_created_buttons = false, [
			set(_have_created_buttons, true),
			create_buttons(),
		])",

		being_removed: "[clear_children(), remove_widgets()]",

		type_updated: "fire_event('create')",


	},
}
