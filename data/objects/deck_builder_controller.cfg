{
	id: "deck_builder_controller",
	prototype: ["citadel_controller_base"],
	next_animation: "'normal'",
	is_human: true,
	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	types: {
		Deck: "class deck",
		DeckMap: "{string -> Deck}",
	},

	properties: {
		font: "'RobotoCondensed-Regular'",
		color: "'antique_white'",

		//have this just because citadel_controller has it and cards/creatures
		//expect it of their controller.
		animation_move_time: 0,

		filter_text: { type: "string", default: "" },
		current_deck_name: { type: "string", default: "" },

		// card_list is a map of card_name:card_widget_objects
		card_list: { type: "{string -> custom_object_widget}", default: {}},

		// filtered cards is purely a list of card_widget_objects
		filtered_cards: { type: "[custom_object_widget]", default: [] },

		// map of <card name>:<count>
		deck: { type: "{string -> int}", default: {} },

		// List of <deck_name> that correspond to the selections in the deck_grid widget.
		deck_list: { type: "[string]", default: [] },

		// Map of <deck_name>:{name:<deck_name>, cards:[(list of cards], schools:[(list of schools)]}
		user_decks: { type: "DeckMap", default: {} },

		info_text: "label<- me.widgets.info_text",

		level_width: "level.dimensions[2]",
		level_height: "level.dimensions[3]",
		set_info_text: "def(string txt, Color color='green') ->commands
		  [set(info_text.text, txt), set(info_text.color, color)]",
		draw_cards: "commands<- set(card_grid.children, filtered_cards)
		  where card_grid = grid<- me.widgets.card_grid",

		show_blood_cards: true,
		show_faith_cards: true,
		show_food_cards: true,
		show_gold_cards: true,
		show_scrolls_cards: true,
		show_colorless_cards: true,
		
		show_spell_cards: true,
		show_creature_cards: true,
		show_construct_cards: true,
		
		deck_changed: false,

		exit_commands: { type: "commands", default: null },
		
		// Figure out how many copies of the card with name we can put in the deck
		max_copies: "def(string card_name) ->int 3",
		
		build_card_widget: "def(string ident, int cnt) ->custom_object_widget
		custom_object_widget<- widget(me, {
			type: 'object',
			object: object('card', 0, 0, 1, {
				controller: find_or_die(level.chars, value is obj deck_builder_controller),
				card_type: construct('card', lib.json.get_document_map('data/cards.cfg')[ident]),
				zorder: 50,
				card_size: 1.0,
				x: 0,
				y: 0,
			}), 
			id: ident,
			handle_process: true,
			on_click: '[debug(q(Fired on_click)), if(mouse_button = 1,
				if(id in deck, if(deck[id] < max_copies(id), add(deck[id], 1)), set(deck[id], 1)), 
				if(id in deck, if(deck[id] < 2, set(deck, remove_from_map(me.deck, id)), add(deck[id], -1)))), 
				set(deck_changed, true),
				fire_event(q(redraw_deck))]',
		} + if(cnt > 0, {overlay: {type:'label', size:108, text:str(cnt), font:font, color:'black'}}, {}))",

		filter_cards_school: "def([custom_object_widget] cards) ->[custom_object_widget]
		  filter(cards, find(get_card(value).card_type.school, value in allowed_schools) != null) where allowed_schools =
		  if(show_colorless_cards, [0], []) +
		  if(show_gold_cards, [1], []) +
		  if(show_blood_cards, [2], []) +
		  if(show_food_cards, [3], []) +
		  if(show_scrolls_cards, [4], []) +
		  if(show_faith_cards, [5], [])",

		filter_cards_spells: "def([custom_object_widget] cards) ->[custom_object_widget]
		  filter(cards, get_card(value).card_type.creature or show_spell_cards)",
		filter_cards_creatures: "def([custom_object_widget] cards) ->[custom_object_widget]
		  filter(cards, creature = null or creature.is_construct or show_creature_cards where creature = get_card(value).card_type.creature_object)",
		filter_cards_buildings: "def([custom_object_widget] cards) ->[custom_object_widget]
		  filter(cards, get_card(value).card_type.creature = null or
		    (creature and not creature.creature_object.is_construct) or
			show_construct_cards
			 where creature = get_card(value).creature)",
		
		// Allow regular expressions
		//filter_by_text: "def(cards) filter(cards, if(filter_text, regex_match(get_card(value).card_type.name, filter_text), true))",
		// Allow simple text filtering -- this is way easier and more intuitive than using a regex
		filter_by_text: "def([custom_object_widget] cards) ->[custom_object_widget]
		  filter(cards, if(filter_text, strstr(lower(get_card(value).card_type.name), lower(filter_text)), true))",
		
		filter_cards: "def({string -> custom_object_widget} cards) ->[custom_object_widget]
			filter_cards_school(
			  filter_cards_spells(
			    filter_cards_creatures(
				  filter_cards_buildings(
				    filter_by_text(map(cards, value))))))",

		get_card: "def(custom_object_widget w) -> obj card
		obj card<- w.object",

		make_card_frame: "def([custom_object_widget] cards) ->widget
		widget(me, {
			type: 'dialog',
			id: 'cards_dlg',
			rect: [0, 0, 2*level_width/3, 2*level_height/3],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [10, 10],
			children: [{
				type: 'grid',
				columns: 1,
				children: [{
					type: 'label',
					id: 'info_text',
					text: 'Number of cards selected ' + str(size(cards)),
					color: 'green',
					font: font,
					size: 12,
				}]
			}, {
				type: 'grid',
				id: 'card_grid',
				columns: 4 + (level.dimensions[2]-1024)/200,
				column_width: if(cards and size(cards), cards[0].width, 146),
				max_height: 2*level_height/3,
				children: cards,
			}],
		})",
		
		check_saved: "def(commands cmds=[]) ->commands
		 [if(me.deck_changed, [set(me.widgets.child, {
			type: 'dialog',
			id: 'check_save_dlg',
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			rect: [0.2*level_width, 0.2*level_height, 0.6*level_width, 0.3*level_height],
			zorder: 2000,
			on_close: def(cancelled) [if(not cancelled, save_deck(cmds)), schedule(1,enable_frames(true)), set(me.widgets.check_save_dlg, null)],
			children: [{
				type: 'label', 
				text: 'Deck has changed. Save changes?',
				color: color,
				font: font,
				size: 28,
				xy: [0.45*level_width, 10],
				align_h: 'middle',
			}, {
				type: 'button',
				rect: [0.2*level_width, 0.3*level_height - 75, 150, 40],
				label: {type: 'label', font:font, size: 20, color:color, text: 'Yes'},
				on_click: (def() ->commands [save_deck(cmds), schedule(5,enable_frames(true)), set(me.widgets.check_save_dlg, null)]),
				align_h: 'middle',
			}, {
				type: 'button',
				rect: [0.55*level_width, 0.3*level_height - 75, 150, 40],
				label: {type: 'label', font:font, size: 20, color:color, text: 'No'},
				on_click: (def() ->commands [schedule(1,enable_frames(true)), set(me.deck_changed,false), set(me.widgets.check_save_dlg, null)]+[cmds]),
				align_h: 'middle',
			}],
		}), enable_frames(false)
		], cmds)]",
		
		enable_frames: "def(bool en=true) ->commands
		  map(me.widget_list, set(value.disabled, not en))",

		make_school_icon: "def(int school) ->widget
		 switch(school, 
			// Colorless -- mana only
			0, widget(me, {type: 'label', text:'Mana', font: font, color: color, size: 14}),
			// gold
			1, widget(me, {type:'image', image:'magic-icons.png', area:[3,3,18,18]}),
			// blood
			2, widget(me, {type:'image', image:'magic-icons.png', area:[20,3,35,18]}),
			// food
			3, widget(me, {type:'image', image:'magic-icons.png', area:[37,3,52,18]}),
			// scrolls
			4, widget(me, {type:'image', image:'magic-icons.png', area:[54,3,69,18]}),
			// faith
			5, widget(me, {type:'image', image:'magic-icons.png', area:[71,3,86,18]})) 
			asserting school >= 0 and school <= 5",
			
		delete_deck_confirm: "commands<-
		[set(me.widgets.child, {
			type: 'dialog',
			id: 'delete_confirm_dlg',
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			rect: [0.2*level_width, 0.2*level_height, 0.6*level_width, 0.3*level_height],
			zorder: 2000,
			on_close: (def(bool cancelled) ->commands [if(not cancelled, save_deck()), schedule(1,enable_frames(true)), set(me.widgets.delete_confirm_dlg, null)]),
			children: [{
				type: 'label', 
				text: 'Erase deck?',
				color: color,
				font: font,
				size: 28,
				xy: [0.35*level_width, 10],
				align_h: 'middle',
			}, {
				type: 'button',
				rect: [0.2*level_width, 0.3*level_height - 75, 150, 40],
				label: {type: 'label', font:font, size: 20, color:color, text: 'Yes'},
				on_click: def() [
					set(me.user_decks, new_user_decks), 
					set(me.deck_list, map(new_user_decks, key)),
					schedule(1, enable_frames(true)), 
					set(me.widgets.delete_confirm_dlg, null),
					write_document('user-decks.cfg', new_user_decks),
					do_new_deck, 
				] where new_user_decks = remove_from_map(me.user_decks, current_deck_name),
				align_h: 'middle',
			}, {
				type: 'button',
				rect: [0.55*level_width, 0.3*level_height - 75, 150, 40],
				label: {type: 'label', font:font, size: 20, color:color, text: 'No'},
				on_click: def() [schedule(1,enable_frames(true)), set(me.widgets.delete_confirm_dlg, null)],
				align_h: 'middle',
			}],
		}), enable_frames(false)
		]",
		
		make_selector_frame: "def(DeckMap user_decks, bool do_default_select=true) ->widget widget(me, {
			type: 'dialog',
			id: 'selection_dlg',
			rect: [2*level_width/3, 0, level_width/3, 2*level_height/3],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [20, 10],
			children: [{
				type: 'grid',
				columns: 4,
				children: [{
					// New button
					type: 'button',
					label: {
						type: 'image',
						image: 'dialog-icons.png',
						area: [11,0,20,10],
					},
					wh: [50, 35],
					on_click: def() check_saved(do_new_deck),
				}, {
					// Save button
					type: 'button',
					label: {
						type: 'image',
						image: 'dialog-icons.png',
						area: [0,0,10,10],
					},
					wh: [50, 35],
					on_click: def() save_deck(),
				}, {
					// Delete button
					type: 'button',
					label: {
						type: 'image',
						image: 'dialog-icons.png',
						area: [35,0,45,10],
					},
					wh: [50, 35],
					on_click: def() delete_deck_confirm,
				}, {
					// Exit button
					type: 'button',
					label: {
						type: 'label',
						text: 'Exit',
						size: 20,
						font: font,
						color: color,
					},
					wh: [50, 35],
					on_click: def() check_saved([fire_event('exit_to_titlescreen')])
				}]
			}, {
				type: 'grid',
				columns: 2,
				column_alignments: ['left', 'left'],
				column_widths: level_width/6,
				children: [{
					type: 'grid',
					columns: 1,
					children: [{
						type: 'label',
						font: font,
						color: color,
						size: 16,
						text: 'Search',
					}, {
						type: 'label', 
						text: '',
					}, {
						type: 'label',
						font: font,
						color: color,
						size: 16,
						text: 'Deck Name',
					}]
				}, {
					type: 'grid',
					columns: 1,
					children: [{
						type: 'text_editor', 
						id: 'filter_box',
						font_size: 16, 
						//font: font,
						color: color,
						width: 150, 
						height: 30,
						text: filter_text,
						on_change: 'if(me.filter_text != text, [set(me.filter_text, text), fire_event(q(do_redraw))])',
					}, {
						type: 'label', 
						text: '',
					}, {
						type: 'text_editor', 
						id: 'deck_name_box',
						font_size: 16, 
						//font: font,
						color: color,
						width: 150, 
						height: 30,
						text: current_deck_name,
						on_change: 'if(me.current_deck_name != text, set(me.current_deck_name, text))',
					}]
				}],			
			}, {
				type: 'grid',
				columns: 1,
				children: [{
					type: 'grid',
					columns: 2,
					children: [{
						type: 'checkbox',
						text: make_school_icon(2),
						checked: show_blood_cards,
						wh: [100, 35],
						on_click: '[set(me.show_blood_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: make_school_icon(5),
						checked: me.show_faith_cards,					
						wh: [100, 35],
						on_click: '[set(me.show_faith_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: make_school_icon(3),
						checked: show_food_cards,
						wh: [100, 35],
						on_click: '[set(me.show_food_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: make_school_icon(1),
						checked: show_gold_cards,
						wh: [100, 35],
						on_click: '[set(me.show_gold_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: make_school_icon(4),
						checked: show_scrolls_cards,
						wh: [100, 35],
						on_click: '[set(me.show_scrolls_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: make_school_icon(0),
						//text: {type:'image', image:'magic-icons.png', area:[20,3,35,18]},
						checked: show_colorless_cards,
						wh: [100, 35],
						on_click: '[set(me.show_colorless_cards, checked), fire_event(q(do_redraw))]',
					}],
				}, {
					type: 'grid',
					columns: 1,
					children: [{
						type: 'checkbox',
						text: {type: 'label', text:'Show Spells', font: font, color: color, size: 14},
						checked: show_spell_cards,
						wh: [150, 30],
						on_click: '[set(me.show_spell_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type: 'label', text:'Show Constructs', font: font, color: color, size: 14},
						checked: show_construct_cards,
						wh: [150, 30],
						on_click: '[set(me.show_construct_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type: 'label', text:'Show Creatures', font: font, color: color, size: 14},
						checked: show_creature_cards,
						wh: [150, 30],
						on_click: '[set(me.show_creature_cards, checked), fire_event(q(do_redraw))]',
					}]
				}],
			}, {
				type: 'label',
				text: 'Decks',
				font: font,
				size: 16,
				color: color,
			}, {
				type: 'grid', 
				allow_selection: true,
				draw_selection_highlighted: true,
				id: 'deck_grid',
				columns: 1,
				column_widths: level_width/3-50,
				max_height: 100,
				children: make_deck_list(user_decks),
				on_select: def(selection) if(selection >= 0 and me.user_decks, check_saved([do_load_deck(me.user_decks[me.deck_list[selection]])])),
			} + if(do_default_select, {default_select:if(size(user_decks), 0, -1)}, {})],
		})",
		
		make_deck_list: "def(DeckMap user_decks) ->[widget]
		map(user_decks, widget(me, {
			type: 'grid', 
			columns: 2,
			column_alignments: ['left', 'right'],
			column_widths: (level_width/3-50)/2,
			children: [{
				type:'label', 
				font:font, 
				size:16, 
				color:color, 
				text:value.name
			}, {
				type: 'grid',
				columns: size(value.schools),				
				children: map(value.schools, make_school_icon(value)),
			}],
		}))",
		
		deck_to_internal: "def([string] deck) ->{string -> int} fold(map(unique(deck), {(value):size(filter(deck, value=context.value))}), a+b)",
		
		do_new_deck: "commands<- [
			set(me.current_deck_name, ''), 
			set(me.deck, {}), 
			set(me.widgets.deck_dlg, make_deck_frame({})),
			if(level.player, fire_event(level.player, q(redraw_selector))),
		]",
		
		do_load_deck: "def(Deck new_deck) ->commands [
			set(me.current_deck_name, new_deck.name), 
			set((text_editor_widget<- me.widgets.deck_name_box).text, new_deck.name), 
			set(me.deck, new_cards), 
			set(me.widgets.deck_dlg, make_deck_frame(new_cards))
		] where new_cards = deck_to_internal(new_deck.cards)",
		
		make_deck_frame: "def({string -> int} deck) ->widget
		widget(me, {
			type: 'dialog',
			id: 'deck_dlg',
			rect: [0, 2*level_height/3, level_width, level_height/3],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [10, 10],
			children: [{
				type:'label',
				id: 'info_text',
				text: 'Cards in deck ' + if(size(deck), str(fold(map(deck, value), a+b)), 0),
				color: 'green',
				font: font,
				size: 12,				
			}, {
				type: 'grid',
				columns: 6 + (level.dimensions[2]-1024)/160,
				column_width: if(deck and size(deck), card_list[keys(card_list)[0]].width, 146),
				max_height: level_height/3 - 20,
				children: map(deck, build_card_widget(key, value)),
			}],
		})",
		
		make_current_deck: "DeckMap<- if(current_deck_name, {(current_deck_name): construct('deck', { 
			name: current_deck_name,
			schools: unique([int] :: flatten(map(me.deck, (obj card<- card_list[key].object).card_type.school))),
			cards: flatten(map(me.deck, [key]*value))
		})}, {})",
		
		save_deck: "def(commands cmds=[]) ->commands if(not current_deck_name, set_info_text('Deck not saved, no deck name.', 'red'), 
			if(sv, set_info_text(sv, 'red'), [
				set_info_text('Save successful'), 
				set(me.deck_changed, false), 
				set(me.user_decks, new_user_decks), 
				set(me.deck_list, map(new_user_decks, key)),
				if(level.player, fire_event(level.player, q(redraw_selector))),
				] + [cmds]
		)) where sv = write_document('user-decks.cfg', new_user_decks) where new_user_decks = remove_from_map(me.user_decks,current_deck_name) + make_current_deck
		",
		
		draw_interface: "def([custom_object_widget] cards, {string -> int} deck,DeckMap user_deck) ->commands set(me.widgets, [make_card_frame(cards), make_selector_frame(user_deck), make_deck_frame(deck)])",
	},
	
	on_create: "[
		console_output_to_screen(false), 
		set(x, 0), set(y, 0),
		set(me.card_list, card_objs),
		set(me.filtered_cards, filtered),
		if(user_decks is DeckMap, [set(me.user_decks, user_decks), set(me.deck_list, map(user_decks, key))]),
		draw_interface(filtered, me.deck, if(user_decks is DeckMap, user_decks, me.user_decks)),

		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
	] where filtered = filter_cards(card_objs) 
	  where card_objs = fold(map({string -> map}<- get_document('data/cards.cfg'), {(key):build_card_widget(key, 0)}), a+b),
	  user_decks = get_document('user-decks.cfg',['null_on_failure','user_preferences_dir'])",
	
	on_window_resize: "[
		set(level.dimensions, [0,0,new_width,new_height]),
		fire_event(me, 'redraw_interface'),
	] where new_width = max(int<- arg.width,800)-1
	  where new_height = max(int<- arg.height,480)-1
	",

	on_redraw_interface: "draw_interface(filtered_cards, me.deck, me.user_decks)",
	
	on_do_redraw: "[
		set(me.widgets.cards_dlg, make_card_frame(filtered)),
		set(me.filtered_cards, filtered)
	] where filtered = filter_cards(card_list)",
	
	on_redraw_deck: "set(me.widgets.deck_dlg, make_deck_frame(me.deck))",
	
	on_redraw_selector: "set(me.widgets.selection_dlg, make_selector_frame(me.user_decks, false))",
	
	on_exit_to_titlescreen: "if(exit_commands, exit_commands,
	  teleport('titlescreen.cfg', '', 'fade', playable) 
		where playable = object_playable('title_controller', 0, 0, 0))
	",

	on_end_anim: "animation('normal')",
	zorder: 50,
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},
	
	editor_info: {
		category: "controllers",
		var: [
			{
				name: "x_bound",
				type: "x",
				value: "x-100",
			},
			{
				name: "x2_bound",
				type: "x",
				value: "x+150",
			},
			{
				name: "y_bound",
				type: "y",
				value: "y-100",
			},
			{
				name: "y2_bound",
				type: "y",
				value: "y+150",
			},
		],
	},
}
