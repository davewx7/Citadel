{
	id: "library_new_deck",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	properties: {

		py: "def(int pixels) ->int lib.gui.py(pixels)",

		area: "{width: py(260), height: py(72)}",

		highlighted: {
			type: "bool",
			default: false,
			set: "
				if (
					_data != value,
						[
							set(_data, value)
							;
							render(false)
						],
					// else
						debug(['library_new_deck#highlighted#set: this code should never run'])
				)
			"
		},

		_show_plus: { default: true },
		_text: { default: "Create Deck" },

		_font: { type: "string", init: "lib.font.regular_font" },

		render: "def (bool creating) -> commands
		[
		map(range(transition_steps),
		schedule(step + delay,
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: area.width, h: area.height,
			scale: 1, frames: 1,
			fbo: c.render(area.width, area.height, [
				c.rectangle(0, area.height*0.1, area.width, area.height*0.8),
				c.set_source_rgba(0.06, 0.09, 0.13, 1.0),
				c.fill(),

				if(highlighted,
						c.set_source_rgba(
							if (creating, 1.0, clamp(mix(.29, 1.0, (step + 1) / transition_steps_dec), .29, 1.0)),
							if (creating, 1.0, clamp(mix(.33, 1.0, (step + 1) / transition_steps_dec), .33, 1.0)),
							if (creating, 1.0, clamp(mix(.36, 1.0, (step + 1) / transition_steps_dec), .36, 1.0)),
							1.0
						),
						c.set_source_rgba(
							if (creating, .29, clamp(mix(1.0, .29, (step + 1) / transition_steps_dec), .29, 1.0)),
							if (creating, .33, clamp(mix(1.0, .33, (step + 1) / transition_steps_dec), .33, 1.0)),
							if (creating, .36, clamp(mix(1.0, .36, (step + 1) / transition_steps_dec), .36, 1.0)),
							1.0
						)
				),
				c.rectangle(0, area.height*0.1, area.width, area.height*0.8),
				c.set_line_width(py(20)/10.0),
				c.stroke(),

				c.set_source_rgba(1, 1, 1, 1),

				if(_show_plus, [
					c.save(),
					c.translate(py(14), py(53)),
					c.set_font(lib.font.bold_font),
					c.set_font_size(py(48)),
					c.text_path_in_bounds('+', area.width, ['left']),
					c.fill(),
					c.restore(),
				]),

				c.save(),
				c.translate(py(54), py(45)),
				c.set_font(_font),
				c.set_font_size(py(28)),
				c.text_path_in_bounds(_text, area.width, ['left']),
				c.fill(),
				c.restore(),

			]),
		}
		  where c = canvas()
		)  //   set(animation, ...)
		)  //   schedule(int, set(animation, ...))
		//   A little bit of syntactic sugar.
		where step = value
		)  //   map(range(...), schedule(int, set(animation, ...)))
		//   Casted to `decimal` for convenience.
		where transition_steps_dec = transition_steps * 1.0
		where transition_steps = if (
			highlighting,
				if (
					creating,
						1,
					// else 'not creating'
						//   Original.
//						1
						//   Candidate.
						10
				),
			// else 'unhighlighting'
				if (
					creating,
						1,
					// else 'not creating'
						//   Original.
//						1
						//   Candidate.
						16
				)
		)
		where delay = if (
			highlighting,
				0,
			// else 'unhighlighting'
				if (
					creating,
						0,
					// else 'not creating'
						//   Original
//						0
						//   Candidate
						8
				)
		)
		//   A little bit of syntactic sugar.
		where highlighting = highlighted
		,
		set(x2, x2),
		set(y, y)
		]",

		_click_handler: { type: "function()->commands" },
	},

	on_click: "[
		lib.sound.play_sound(me, 'interface/create-deck'),
		swallow_mouse_event(),
		_click_handler()
	]",

	on_mouse_enter: "set(highlighted, true)",
	on_mouse_leave: "set(highlighted, false)",

	on_create: "render(true)",
	on_type_updated: "render(true)",
}
