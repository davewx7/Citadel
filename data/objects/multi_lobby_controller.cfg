{
	id: "multi_lobby_controller",
	hidden_in_game: true,
	is_strict: true,

	types: {
	},

	properties: {
		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: (level_width - (level_height*4)/3)/2",
		gui_right_edge: "int :: level_width - gui_left_edge",

		title_controller: { type: "obj title_controller" },
		return_controller: { type: "custom_obj|null" },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		create_objects: "def() ->commands
		[
		if (not title_controller.offline_mode,
		spawn('users_online_pane', {
			title_controller: title_controller,
			x: lib.gui.py(4),
			y: lib.gui.py(44),
			zorder: 0,
			_width: lib.gui.py(212),
			_height: lib.gui.py(840),
		})),

		spawn('combo_label', 0, 0, {
			x: lib.gui.py(44),
			y: level_height - lib.gui.py(64),
			zorder: 1000,
			_text: 'Main Menu',
			_font_size: lib.gui.py(26),
			left_rect: lib.gui.py(-4),
			right_rect: lib.gui.py(2),
			grouping: 'back',
			index: 0,
			click_handler: def(obj combo_label lb) ->commands me.exit_to_titlescreen(),
		}, [
		]),

		spawn('rival_pane', {
			x: lib.gui.py(1130),
			y2: lib.gui.py(844),
			title_controller: title_controller,
			zorder: 4000,
		}),

		_spawn_battle_buttons(),

		]
		",

		exit_to_titlescreen: "def() ->commands [
			if(_queued_for_battle, cancel_play_game()),

			lib.sound.play_sound(me, 'interface/leave-library'),

			title_controller.transition_screen(
			; [
				remove_object(title_controller),
				add_object(title_controller);
				title_controller.show_ui()
			],
			[enum transition_after_zoom, enum transition_no_remove_objects]),
		]",

		play_game: "def() ->commands
		execute(me,
		[
			title_controller.set_specified_deck(scenario.player_deck),
			if(scenario.scenario_type = 'multiplayer', [
				title_controller.send_matchmaking_request({ type: 'pvp' }),

				set(_queued_for_battle, true); _spawn_battle_buttons()


			], [
				title_controller.play_single_player_game(scenario)
			])
		]
		where scenario = Scenario<- (rival_pane.get_scenario() + game_map)
		where game_map = rival_pane.get_map()
		where rival_pane = find_or_die(level.chars, value is obj rival_pane)
		)",
		
		cancel_play_game: "def() ->commands
		execute(me, [
			title_controller.send_cancel_matchmaking_request(),
			set(_queued_for_battle, false); _spawn_battle_buttons()
		])
		",

		_spawn_battle_buttons: "def() ->commands
			map(_battle_widgets, remove_object(value));
			set(_battle_widgets, []);
			set(_battle_pending_label, null);

			if(_queued_for_battle, [
				spawn('label', {
					x: lib.gui.py(924),
					y: lib.gui.py(830),
					_text: ['Queued'],
					_halign: 'left',
					_font_size: lib.gui.py(26),
					zorder: me.zorder+10,
				}, [
					add(me._battle_widgets, [child]),
					set(me._battle_pending_label, child),
				]),

				spawn('button_controller', {
					x: lib.gui.py(1050),
					y: lib.gui.py(840),
					button_width: lib.gui.py(80),
					button_height: lib.gui.py(34),
					text: 'Cancel',
					on_click: me.cancel_play_game,
				}, [
					add(me._battle_widgets, [child]),
				])
			],

				spawn('button_controller', {
					x: lib.gui.py(910),
					y2: lib.gui.py(878),
					button_width: lib.gui.py(210),
					button_height: lib.gui.py(52),
					text: 'Play',
					image: 'images/gui/end-turn-button.png',
					_font_size: lib.gui.py(38),
					_font_weight: 65,
					on_click: me.play_game,
				}, [
					add(me._battle_widgets, [child]),
				])
			)
		",

		_process_battle_widgets: "def() ->commands
		if(_battle_pending_label != null and cycle%10 = 0,
		   _battle_pending_label.set_text(['Queued' + fold(map(range((cycle/10)%4), '.'), a+b, '')])
		)
		",

		_queued_for_battle: { type: "bool", default: false },

		_battle_widgets: { type: "[custom_obj]", default: [] },
		_battle_pending_label: { type: "null|obj label" },
	},

	events: {

		process: "[
			_process_battle_widgets()
		]",

		being_added: "
			create_objects()
		",

		being_removed: "set(_queued_for_battle, false)",
		type_updated: "[map(spawned_children, remove_object(value)); fire_event('being_added')]",
	}
}
