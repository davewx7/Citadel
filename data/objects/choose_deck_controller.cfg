{
	id: "choose_deck_controller",
	is_human: true,
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },
		return_controller: { type: "custom_obj|null" },
		current_controller: { type: "custom_obj" },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		right_side: { default: false, type: "bool" },

		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: x + lib.gui.py(int(20*scaling))",
		gui_right_edge: "int :: x2 - lib.gui.py(int(20*scaling))",

		gui_top_edge: "int :: y - lib.gui.py(4)",

		_width: "int :: lib.gui.py(int((136*3 + 53)*scaling))",

		scaling: { type: "decimal", default: 1.0 },

		_at_start_of_game: { type: "bool", default: false },

		starter_decks_selected: "bool :: lib.citadel.preferences.deck_category != 'custom'",

		select_deck_category: "def(obj combo_label lb) ->commands execute(me, [
			add(lib.citadel.preferences, {deck_category: if(starter, 'starter', 'custom')}),
			[set(c.selected, c = lb) | c <- level.chars, c is obj combo_label, c.grouping = lb.grouping],

			show_decks(starter, if(starter, DeckMap<- lib.json.get_document_map('data/starting-decks.cfg'), filter(title_controller.decks, not value.archived))),

		]) where starter = (lb.index = 0)",
		
		_num_decks: "int :: if(starter_decks_selected, size(lib.json.get_document_map('data/starting-decks.cfg')), size(filter(title_controller.decks, size(value.cards) >= 50 and not value.archived)))",

		_selected_deck: {
			type: "null|obj deck_avatar",

			set: "if(_data != value, [
				if(_data, animate(_data, { halo: 0.0 }, { duration: 10 })),
				if(value, animate(value, { halo: 20.0*scaling }, { duration: 10 })),
				set(_data, value),
			])"
		},

		deck_mouseover: "def(obj deck_avatar deck) ->commands
		if(deck != _selected_deck,
			animate(deck, {
				halo: 10.0,
			}, {
				duration: 10,
			})
		)
		",

		deck_mouseoff: "def(obj deck_avatar deck) ->commands
		if(deck != _selected_deck,
			animate(deck, {
				halo: 0.0,
			}, {
				duration: 10,
			})
		)
		",

		_deck_preview_widget: { type: "null|obj deck_preview_widget" },

		edit_deck_clicked: "def() ->commands
		if(_selected_deck,
		[
			if(starter_decks_selected, [
				add(title_controller.account_info.decks, {
					(new_deck_name): {
						cards: starter.cards,
						name: new_deck_name,
						schools: starter.schools,
						notes: starter.notes,
						avatar: starter.avatar,
						creation_time: time().unix,
						mod_time: time().unix,
						archived: false,
					}
				}) where starter = Deck<- lib.json.get_document_map('data/starting-decks.cfg')[_selected_deck.deck_name];
				set(lib.citadel.preferences.selected_custom_deck, new_deck_name);

				select_deck_category(lb)
				where lb = find_or_die(level.chars, value is obj combo_label and value.grouping = 'deck_type' and value.index = 1);

				title_controller.transition_screen(
					; title_controller.enter_library(current_controller, new_deck_name),
					[enum transition_zoom_in, enum transition_after_zoom]
				)
			] where new_deck_name = lib.citadel.get_non_clashing_deck_name(_selected_deck.deck_name, title_controller.decks),

			title_controller.transition_screen(
				; title_controller.enter_library(current_controller, _selected_deck.deck_name),
					[enum transition_zoom_in, enum transition_after_zoom]
			)

			)
		]
		)
		",

		_deck_widget_width: { type: "int", default: 206 },

		select_deck: "def(obj deck_avatar deck) ->commands
		execute(me,
		[
			set(_selected_deck, deck),
			add(lib.citadel.preferences, {(if(starter_decks_selected, 'selected_starter_deck', 'selected_custom_deck')): deck.deck_name}),

			remove_object(_deck_preview_widget),

			spawn('deck_preview_widget', 0, 0, {
				x: if(right_side, gui_right_edge + lib.gui.py(30), gui_left_edge - lib.gui.py(228)),
				mid_y: mid_y,
				_width: _deck_widget_width,
				deck: deck_info,
				zorder: zorder+100,
				title_controller: title_controller,
				current_controller: current_controller,
				edit_deck_tooltip: if(_collapsed or _at_start_of_game, '',
				            starter_decks_selected,
				            'Make your own custom deck based on this deck',
							'Edit this deck in the library'),
				edit_deck_label:
					if(_collapsed or _at_start_of_game, null,
						starter_decks_selected,
						if(num_decks < lib.citadel.max_decks, 'Customize'),
						'Edit'
					),
				edit_deck_handler: if (_at_start_of_game, null,
					_collapsed, def()->commands if(not _shown, me.toggle_shown()),
					not starter_decks_selected
							or num_decks < lib.citadel.max_decks,
						me.edit_deck_clicked,
					null
				),
			}, [
				set(_deck_preview_widget, child),
			]),
		])
		asserting deck_info != null | [deck.deck_name, keys(deck_choices), starter_decks_selected]
		where deck_info = Deck | null :: if (
			deck_choices[deck.deck_name] is not null,
				deck_choices[deck.deck_name],
			// else,
				other_deck_choices[deck.deck_name]
		)
		//   This `other_deck_choices` variable is a fail-safe in case
		// the asserting operation would be going to fail.
		//   FIXME Make sure `starter_decks_selected` is always set to
		// the proper value and so then this fail-safe variable may be
		// safely removed.
		where other_deck_choices = if (
			not starter_decks_selected,
				DeckMap <- lib.json.get_document_map('data/starting-decks.cfg'),
			// else,
				filter(title_controller.decks, not value.archived)
		)
		where deck_choices = if(starter_decks_selected, DeckMap<- lib.json.get_document_map('data/starting-decks.cfg'), filter(title_controller.decks, not value.archived))
		where num_decks = size(filter(title_controller.decks, not value.archived))
		",

		right_click_deck: "def(obj deck_avatar deck) ->commands
		if(not _at_start_of_game,
		spawn('context_menu', {
			x: lib.gui.mouse_pos(level)[0],
			y: lib.gui.mouse_pos(level)[1],
			color_scheme: lib.citadel.library_color_scheme,
			items: [{
				text: 'Play vs',
				on_select: def()->commands title_controller.play_against_deck(deck.deck.cards),
			}]
		})
		)
		",

		_hideable_widgets: { type: "[custom_obj]", default: [] },
		_shown: { type: "bool", default: true },

		_paused: { type: "[custom_obj]", default: [] },

		hide: "def() ->commands
		execute(me,
		[
			[set(p.paused, false) | p <- _paused],
			set(_paused, []),
			set(_shown, false),
			add(zorder, -10000),
			set(alpha, 0),
			map(_hideable_widgets, remove_object(value)),
		])",

		show: "def() ->commands
		execute(me,
		[
			[[set(p.paused, true), add(_paused, [p])] | p <- level.chars, p.paused = false, p != _deck_preview_widget, not p is obj matchmaking_base, p != me],
			set(_shown, true),
			add(zorder, 10000),
			set(alpha, 255),
			map(_hideable_widgets, add_object(value)),
		])",

		_toggle_shown_on_mouse_up: { type: "bool", default: false },

		toggle_shown: "def() ->commands
		if(_shown, hide(), show())
		",

		_collapsed: { type: "bool", default: false },
		_first_time_collapsed: { type: "bool", default: true },

		_no_decks_label: { type: "null|obj text_area" },

		show_decks: "def(bool starter, DeckMap decks) ->commands
		add(lib.citadel.preferences, {deck_category: if(starter, 'starter', 'custom')});
		render();
		[
			remove_object(_no_decks_label),
			[remove_object(c) | c <- level.chars, c is obj deck_avatar],

			if(not decks_sorted, spawn('text_area', {
				_text: sprintf(q(<font size='%d'>%s</font>), lib.gui.py(16), if(decks, q(None of your custom decks are legal for play. Legal decks must have fifty cards that you own. Go to the library to edit your decks), q(You don't seem to have any custom decks yet. Go to the library to make some.))),
				
				text_width: int(ww*0.9),
				x: gui_left_edge + lib.citadel.py(30),
				y: gui_top_edge + lib.citadel.py(20),
				zorder: zorder+100,
			}, [
				set(_no_decks_label, child),
				remove_object(_deck_preview_widget),
			])
				where ww = _width - lib.citadel.py(60)
			),

			map(decks_sorted, spawn('deck_avatar', {
				x: gui_left_edge + int((index%3)*lib.citadel.py(138)*scaling),
				y: gui_top_edge + int((lib.citadel.py(8) + (index/3)*lib.citadel.py(160))*scaling),
				_width: lib.gui.py(int(130*scaling)),
				_scaling: scaling,
				_portrait: avatar_card.portrait or 'acolyte.png',
				_name: value.name,
				click_handler: me.select_deck,
				right_click_handler: me.right_click_deck,
				mouse_enter_handler: me.deck_mouseover,
				mouse_leave_handler: me.deck_mouseoff,
				deck: value,
				zorder: zorder+100,
			}, [
				add(_hideable_widgets, [child]),
			]) where avatar_card = lib.citadel.create_card(value.avatar or if(value.cards, value.cards[0], 'Acolyte')));

			(
			[
			if(selected_obj != null, select_deck(selected_obj)),
			set(_selected_deck, selected_obj),
			]

			where selected_obj = find(level.chars, value is obj deck_avatar and value.deck_name = selected_deck) or find(level.chars, value is obj deck_avatar)

			where selected_deck = lib.citadel.preferences[if(starter, 'selected_starter_deck', 'selected_custom_deck')]
			)
		] where decks_sorted = if (starter,
			// Assume starter decks will always be carefully
			// crafted with at least 50 cards each.
			sort(values(decks), [a.custom_sort] < [b.custom_sort]),
			sort(
				filter(values(decks), size(value.cards) >= 50),
				[a.creation_time, a.name] <
					[b.creation_time, b.name])
		);

		if(_collapsed and _first_time_collapsed, [
			hide(),
			set(_first_time_collapsed, false),
		])
		",

		create_objects: "def() ->commands [
			spawn('combo_label_controller', {
				xpos: x + lib.gui.py(int(228*scaling)),
				ypos: y2 - lib.gui.py(10),
				zorder: zorder+10,
				items: ['Starter Decks', 'Custom Decks', 'Library'][:if(_at_start_of_game, 2, 3)],
				click_handler: (def(int n)->commands if(n <= 1, 
					me.select_deck_category(find_or_die(level.chars, value is obj combo_label and value.grouping = 'deck_type' and value.index = n)),
					me.visit_library()
				)),

				grouping: 'deck_type',
				_font_size: lib.citadel.py(int(14*scaling)),
			}, [
				add(_hideable_widgets, [child]),
			]),

			if(return_controller,
			spawn('combo_label', 0, 0, {
				x: gui_left_edge + lib.citadel.py(480),
				y2: level_height - lib.citadel.py(14),
				_text: 'Main Menu',
				_font_size: lib.citadel.py(24),
				grouping: 'deck_type',
				index: 2,
				left_rect: lib.citadel.py(-10),
				right_rect: lib.citadel.py(-2),
				click_handler: def(obj combo_label lb) ->commands me.return_to_main_menu(),
			})
			),

		];
		
		select_deck_category(find_or_die(level.chars, value is obj combo_label and value.grouping = 'deck_type' and value.index = if(starter_decks_selected, 0, 1)))",

		visit_library: "def() ->commands
		title_controller.transition_screen(
			; title_controller.enter_library(current_controller),
			[enum transition_zoom_in, enum transition_after_zoom]
		)",

		return_to_main_menu: "def() ->commands
		if(return_controller != null,
		title_controller.transition_screen(
		(
		; [
			title_controller.return_to_main(),
			add_object(return_controller)
		]),
		[enum transition_after_zoom]
		)
		asserting title_controller != null
		)

		",


		render: "def() ->commands
		(
		set(animation, lib.citadel.render_frame(c, ww, hh,
		[
			c.set_operator('SOURCE'),
			outline_path,
			c.set_source_rgba(0.1,0.1,0.1,0.7),
			c.fill(),

			c.set_operator('OVER'),
			outline_path,
			c.set_source_rgba(0.22,0.25,0.29,1),
			c.set_line_width(lib.citadel.py(100)/100.0),
			c.stroke(),
		] where outline_path = [
			c.move_to(left_edge,0),
			c.line_to(right_edge,0),
			if(right_side, [
				c.line_to(right_edge,hh-lib.citadel.py(int(270*scaling))),
				c.line_to(right_edge + lib.citadel.py(12),hh-lib.citadel.py(int(250*scaling))),
				c.line_to(right_edge,hh-lib.citadel.py(int(230*scaling))),
			]),
			c.line_to(right_edge,hh),
			c.line_to(left_edge,hh),
			if(not right_side, [
				c.line_to(left_edge,hh-lib.citadel.py(int(230*scaling))),
				c.line_to(left_edge - lib.citadel.py(12),hh-lib.citadel.py(int(250*scaling))),
				c.line_to(left_edge,hh-lib.citadel.py(int(270*scaling))),
			]),
			c.line_to(left_edge,0),
		] where left_edge = lib.gui.py(int(20*scaling))
		  where right_edge = ww - lib.gui.py(int(20*scaling))
		)); [
		])

		where ww = _width
		where hh = get_height()
		where c = canvas()
		",

		get_height: "def() ->int
			lib.citadel.py(int((160*((max(9, _num_decks)+2)/3) + 40)*scaling))
		",
		
	},

	on_create: "[
		if(_num_decks <= 0, add(lib.citadel.preferences, {deck_category: 'starter'}));
		render();
		create_objects()
	]",
	on_being_removed: "map(spawned_children, remove_object(value))",
	on_type_updated: "[map(spawned_children, remove_object(value)), fire_event('create')]; render()",
	"on_mouse_down*": "if(_collapsed and _shown and lib.gui.is_mouseover_object(level, me) = false, set(_toggle_shown_on_mouse_up, true))",
	"on_mouse_up*": "if(_toggle_shown_on_mouse_up, [set(_toggle_shown_on_mouse_up, false), toggle_shown()])",
}
