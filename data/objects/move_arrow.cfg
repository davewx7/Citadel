{
	id: "move_arrow",
	is_strict: true,

	properties: {
		src_tile: { type: "[int,int]" },
		dst_tile: { type: "[int,int]" },
		creature: { type: "class creature" },

		_ctrl: { type: "obj citadel_controller" },

		src: "[int,int] :: _ctrl.get_tile_pos(src_tile)",
		dst: "[int,int] :: _ctrl.get_tile_pos(dst_tile)",

		selectable: { type: "bool", default: true },

		is_leap: { type: "bool" },

		render: "def(int ww, int hh) ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [


				c.scale(ww, hh),
				c.save(),

				c.move_to(0.5 + width_base*0.5, begin_base),

				arrow_path,

				c.set_linear_pattern(0, 1.0, 0, 0.0,
				[
					{offset: 0.0, red: if(is_leap, 0.0, 1.0), green: 0.0, blue: if(is_leap, 1.0, 0.0), alpha: 0.0},
					{offset: 0.5, red: if(is_leap, 0.0, 1.0), green: 0.0, blue: if(is_leap, 1.0, 0.0), alpha: 1.0},
					{offset: 1.0, red: if(is_leap, 0.0, 1.0), green: 0.0, blue: if(is_leap, 1.0, 0.0), alpha: 1.0},
				]),

				c.fill(),

				c.new_path(),
				arrow_path,
				c.set_line_width(0.01),
				c.set_source_rgba(0, 0, 0, 1),
				c.stroke(),
				c.restore(),
			]

			where arrow_path =
			[
				map(range(steps_base),
					c.line_to(0.5 + 0.5*mix(width_base, width_neck, r), mix(begin_base, end_base, r))
					where r = index / decimal(steps_base-1)
				),

				map(range(steps_tip),
					c.line_to(0.5 + 0.5*mix(width_flare, width_tip, r), mix(end_base, end_tip, r))
					where r = index / decimal(steps_tip-1)
				),

				reverse(map(range(steps_tip),
					c.line_to(0.5 - 0.5*mix(width_flare, width_tip, r), mix(end_base, end_tip, r))
					where r = index / decimal(steps_tip-1)
				)),

				reverse(map(range(steps_base),
					c.line_to(0.5 - 0.5*mix(width_base, width_neck, r), mix(begin_base, end_base, r))
					where r = index / decimal(steps_base-1)
				))
			]

			where width_base = 0.5
			where width_neck = 0.3
			where width_flare = 0.6
			where width_tip = 0.0
			where begin_base = 0.9
			where end_base = 0.3
			where end_tip = 0.05

			where steps_base = 20
			where steps_tip = 5
			),
		})
		where c = canvas()
		",

		_height: "int :: int(sqrt((dst.x - src.x)*(dst.x - src.x) + (dst.y - src.y)*(dst.y - src.y)))",

		dying: { default: false, type: "bool" },

		fade_away_and_die: "def() ->commands
		if(not dying,
		execute(me, [
			set(dying, true),
			animate(me, { alpha: 0 }, { duration: 10, on_complete: remove_object(me) })
		])
		)
		",

		activate_and_die: "def() ->commands
		if(not dying,
		execute(me, [
			set(dying, true),
			animate(me, { alpha: 0, scale: 2.0 }, { duration: 20, on_complete: remove_object(me) })
		])
		)
		",

		click: "def() ->commands _ctrl.send_move_creature_message(creature)",
	},

	events: {
		create: "set(alpha, if(is_leap, 255, 128)); render(100, _height); set(mid_x, (src.x+dst.x)/2); set(mid_y, (src.y+dst.y)/2); set(rotate, -atan2(src.x - dst.x, src.y - dst.y))",
		type_updated: "fire_event('create')",

		mouse_enter: "if(selectable, animate(me, { alpha: 255 }, { duration: 10 }))",
		mouse_leave: "if(selectable, animate(me, { alpha: 128 }, { duration: 10 }))",

		click: "if(selectable, swallow_mouse_event(); if(arg.mouse_button = 1, click()))",
	},
}
