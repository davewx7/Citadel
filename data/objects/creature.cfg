{
	is_strict: true,
	"animation": [

		{
			"frames": 81,
			"frames_per_row": 9,
			"id": "creature",
			"image": "citadel-creatures.png",
			"pad": 3,
			"rect": [5,3,39,36],
			feet_x: 16,
			feet_y: 30,
			duration: 1
		},

		{
			"frames": 3,
			"frames_per_row": 3,
			"id": "creature_large",
			"image": "citadel-large-creatures.png",
			"pad": 3,
			"rect": [45,2,84,47],
			feet_x: 62,
			feet_y: 30,
			duration: 1
		},

		{
			"frames": 27,
			"frames_per_row": 9,
			"id": "building",
			"image": "citadel-buildings.png",
			"pad": 3,
			"rect": [3,4,37,44],
			feet_x: 18,
			feet_y: 36,
			duration: 1
		},

		{
			id: "explosion",
			frames: 21,
			frames_per_row: 7,
			image: "effects/explosion4.png",
			pad: 1,
			rect: [65,1,126,126],
			feet_x: 30,
			feet_y: 70,
			duration: 4,
		},
	],
	
 	"hitpoints": 1,
	"id": "creature",
	mouseover_delay: 20,

	on_click: "if(controller is obj citadel_controller, controller.creature_clicked(me))",
	
	on_spawned: "set(controller, spawner)",
	
	on_mouse_enter: "[if(creature and creature.is_on_board, [set(me.widgets.child, tooltip_w), set(tooltip_w.x, if(facing < 0, -tooltip_w.width, me.img_w))]), 
		set_gui_stats_alpha(255)] where tooltip_w = create_tooltip_widget(creature_object, 'tooltip'), creature = creature_object",
	on_mouse_leave: "[if(me.widgets.tooltip, set(me.widgets.tooltip, null)), if(creature_object, set_gui_stats_alpha(creature_object.stats_alpha))]",

	on_process: "[
	  //TODO: make attachments update more efficiently than in on_process.
	  map(attached_objects, [set(value.alpha, alpha*value.alpha_multiply), /*set(value.facing, facing),*/ set(value.mid_x, mid_x), set(value.mid_y, mid_y)]),
	  if(creature_object.is_on_board and (not creature_object.summoned), set(me.alpha, 128 + (64*wave(cycle*10))/1000)),
	   if(_targetxy != null,
	  if(mid_xy = _targetxy, set(_targetxy, null),
	   [if(abs(_targetxy[0] - mid_x) <= move_speed,
	          set(mid_x, _targetxy[0]), add(mid_x, move_speed*sign(_targetxy[0] - mid_x))),
	    if(abs(_targetxy[1] - mid_y) <= move_speed,
	          set(mid_y, _targetxy[1]), add(mid_y, move_speed*sign(_targetxy[1] - mid_y)))]) where move_speed = _animate_move_speed)]",
	
	on_destroy: "[remove_object(me)]",

	on_end_explosion_anim: "destroy()",

	properties: {
		regen_start_position: { type: "null|object" },
		regen_attrib_cycle: { type: "null|object" },

		regen_start_cycle: { type: "int", default: 0 },
		regen_end_cycle: { type: "int", default: -1 },

		//this is just an avatar in the status bar and shouldn't show
		//on map etc.
		status_avatar: { type: "bool", default: false },

		furthest_animation_hint: { type: "int", default: 0 },
		texture: { type: "null|object" },

		_animate_move_speed: { type: "int", default: 0 },
		_targetxy: { type: "null|Loc" },
		controller: { type: "null|custom_obj" },
		destroy: "def() ->commands execute(me, fire_event('destroy'))",
		image_num: { type: "int", dynamic_initialization: true, set: "[set(time_in_animation, value), set(time_in_animation_delta, 0)]", get: "time_in_animation" },
		
		set_gui_stats_alpha: "def(decimal alpha_value) ->commands
		  if(stats_grid, set(stats_grid.alpha, int(alpha_value))) where stats_grid = widget<- me.widgets.gui_stats_grid",
		
		create_tooltip_widget: "def(class creature creature, string tooltip_id) ->object widget(me, {type:'dialog', alpha:175, clear_background_alpha:128, padding:0, frame_padding:[10,10], zorder:1000, cursor:[10, 10], y:-20, background_frame:'empty_window', id:tooltip_id, children:[
			({type:'label', font:'RobotoCondensed-Regular', alpha:255, size:16, color:switch(creature.controller, -1, 'light_gray', 0, 'yellow', 1, 'orange'), text:creature.name} asserting creature.name != null | creature)]
			+ if(creature.rules, [{type: 'rich_text_label', width: 400, font: 'RobotoCondensed-Regular', size: 14, color: 'antique_white', children: singleton('gui_widgets').parse_markup_into_widgets(creature.rules, 14, 'antique_white')}], [])
			+ map(creature.status_effects, {type: 'label', font: 'RobotoCondensed-Regular', size: 14, color: 'crimson', text: value})
			+ map(creature.abilities, {type: 'label', font: 'RobotoCondensed-Regular', size: 14, color: 'lime_green', text: value})
			+ if(callable_abilities, [{type:'grid', columns:2, column_alignments:['left', 'center'], children:[{type:'grid', columns:1, horizontal_padding:5, children:map(callable_abilities, {type: 'label', font: 'RobotoCondensed-Regular', size: 14, color: 'chocolate', text: value.name})},
				{type:'grid', columns:1, horizontal_padding:5, children:map(callable_abilities, {type: 'label', font: 'RobotoCondensed-Regular', size: 14, color: 'coral', text: value.rules})}]}], [])
			+ if(triggered_abilities, [{type:'grid', columns:2, column_alignments:['left', 'center'], children:[{type:'grid', columns:1, horizontal_padding:5, children:map(triggered_abilities, {type: 'label', font: 'RobotoCondensed-Regular', size: 14, color: if(value.duration_hint, 'dark_turquoise','dodger_blue'), text: value.name})},
				{type:'grid', columns:1, horizontal_padding:5, children:map(triggered_abilities, {type: 'label', font: 'RobotoCondensed-Regular', size: 14, color:if(value.duration_hint,'aquamarine','deep_sky_blue'), text: value.rules})}]}], [])
			}) where callable_abilities = creature.activated_abilities, triggered_abilities = creature.triggered_abilities",
		
		play_animation_hint: "def(map hint) ->commands execute(me, switch(hint.type,
		  'summoned', [
		  	set(me.alpha, 0),
			[schedule(cycle, set(me.alpha, min(255, cycle*10))) | cycle <- range(27)]
		  ],
		  'regeneration', [
		  	set(regen_start_cycle, cycle+10),
		  	set(regen_end_cycle, cycle+70),
		  ],
		  null))",

		play_attack_animation: "def(class creature new_creature) ->commands
		if(controller is obj citadel_controller, [
		  if(size(new_creature.attack_hint.attacks) = 1,
		     [
			  if(new_creature.range <= 1,
			     null,
				 execute(me, map(range(attack.damage),
				   [
				    schedule(controller.animation_move_time + 10 + (value*30)/attack.damage,
				     spawn('creature.missile', src_x, src_y, sign(dst_x - src_x),
					       [set(child.zorder, zorder+950),
						    set(child.velocity_x, ((dst_x - src_x)*100)/10)]))
					 ]
					 where src_x = calculate_x(new_creature, new_creature.loc)
					 where src_y = calculate_y(new_creature, new_creature.loc)
					 where dst_x = calculate_x(class creature<- attack.target, attack.target_loc)))),
				    controller.reserve_animation_time(controller.animation_move_time + 20),

					  ]
					  where attack = new_creature.attack_hint.attacks[0]
		  )])
		",

		play_death_animation: "def(class creature new_creature) ->commands
		  if(creature_object.is_on_board = false or not (controller is obj citadel_controller), me.destroy(),
			if(controller is obj citadel_controller,
		    [
			 controller.reserve_animation_time(controller.animation_move_time + 70),
			switch(new_creature.death_animation_hint,
			'explosion',
			[
			   execute(me, schedule(controller.animation_move_time + 16, [
			             set(me.animation, 'explosion'),
						 set(me.time_in_animation_delta, 3)
			           ])),
			],

			[
			   execute(me, [map(range(30), schedule(controller.animation_move_time + 40 + value, add(me.alpha, -30))),
			   schedule(controller.animation_move_time + 70, me.destroy())])
			])])) asserting creature_object
		    ",
		play_endzone_animation: "def() ->commands if(controller is obj citadel_controller, [
		  controller.reserve_animation_time(controller.animation_move_time + 52),
		  execute(me, [map(range(30), schedule(controller.animation_move_time + 20 + value, add(me.brightness, 10))),
		     schedule(controller.animation_move_time + 52, me.destroy())])
		  ])
		  ",

		lifebar_settings: "map<- {
						type: 'bar',
						left_cap:{area:[0,7,2,7], image:'life.png'}, right_cap:{area:[27,7,3,7], image:'life.png'}, bar:{area:[2,7,2,7], image:'life.png'},
						align_h: 'center',
						drained_tick_color: [96,96,96,255],
					}",

		creature_object: {
		type: "class creature",
		set_type: "class creature",
		default: null,
		set: "
		  execute(me, if(status_avatar, set(_data, value),
		  [
			set(shader.uniform_commands.is_poisoned, if(value, 'Poisoned' in value.status_effects, false)) asserting shader,
		    set(me.attached_objects, []),
		    map(value.overlays, [if(value.alpha, set(obj.alpha_multiply, value.alpha)), set(obj.time_in_animation, value.image_num), add(me.attached_objects, [obj])] where obj = object('creature.equipment', mid_x, mid_y, facing)),
			if(value.is_building or value.is_construct and not value.is_terrain, [set(obj.time_in_animation, value.controller + 1), add(me.attached_objects, [obj])] where obj = object('creature.banner', mid_x, mid_y, 1)),
		    set(me.alpha, 255),
		    set(_data, value),

			if(_data = null or _data.sprite_sheet != value.sprite_sheet or _data.image_num != value.image_num,
			[
			  set(me.animation, if(value.sprite_sheet, value.sprite_sheet, if(value.is_building or value.is_construct, 'building', 'creature'))),
			  set(me.image_num, value.image_num),
			]),

			[
			set_widgets([value.gui_stats_grid(facing, img_w, img_h)] +
				(if(status_grid, [status_grid], [])
					where status_grid = value.gui_status_grid) +
			if(not value.is_construct, [lifebar], []) +
			if(buildbar, [buildbar], [])
			),
			set(lifebar.segments, max(0, value.life)),
			debug('wounds ' + value.wounds),
			if(controller is obj citadel_controller,
			  schedule(controller.animation_move_time + 10,
			           set(lifebar.drained, value.wounds))),
			if(buildbar, [
				set(buildbar.segments, value.summoning_time),
				set(buildbar.drained, value.summoning_time - value.summoning_counters),
			])
			] where lifebar = (bar_widget<- (widgets.lifebar or
				widget(me,
					lifebar_settings + {
						id: 'lifebar',
						x: 20,
						y: 60,
						drained: value.wounds,
						segments: value.life,
					}
				)))
			  where buildbar = (null|bar_widget<- if(not value.summoned,
			    widgets.buildbar or
				  widget(me,
				  	lifebar_settings + {
						id: 'buildbar',
						x: 20,
						y: 40,
						drained: value.summoning_time - value.summoning_counters,
						segments: value.summoning_time,
					}
				  ))),

			set(me.facing, value.direction_moving),

			if(value.is_on_board,
			 (if(_data = null,
			     set(me.mid_xy, [target_x, target_y]),
			    [set(me._targetxy, [target_x, target_y]),
				 set(me._animate_move_speed, max(abs(target_x - mid_x), abs(target_y - mid_y))/30),
				 
					if(_data.wounds != value.wounds and
					   controller is obj citadel_controller,
					[
		  			controller.reserve_animation_time(controller.animation_move_time + 40),
					set(shader.uniform_commands.start_cycle, cycle + controller.animation_move_time + 15),
					set(shader.uniform_commands.end_cycle, cycle + controller.animation_move_time + 25),
					set(shader.uniform_commands.cycle, {value: cycle, increment: true}),
					schedule(controller.animation_move_time + 20, spawn('creature.damage_label', target_x, target_y - 20, 1, [set(child.label_value, value.wounds - _data.wounds)]))
					]) asserting shader,
				 ])
			    where target_x = calculate_x(value, value.loc)
				where target_y = calculate_y(value, value.loc))
				 ),
			if(value.is_on_board, set(me.zorder, (value.loc[0]+1)*10 + if(not value.is_construct, 1, 0))),
			if(_data != null and
			   value.attack_hint and ((not _data.attack_hint) or
			   _data.attack_hint.turn != value.attack_hint.turn),
			   me.play_attack_animation(value)),
			if(not value.alive, me.play_death_animation(value)),
			if(value.reached_endzone, me.play_endzone_animation()),

			[play_animation_hint(hint) |
			 hint <- value.animation_hints,
			 hint.hint_id > furthest_animation_hint],

			if(value.animation_hints, set(furthest_animation_hint, int<- value.animation_hints[size(value.animation_hints)-1].hint_id))
			]))" },

	  calculate_x: "def(class creature value, Loc loc) ->int 132 + (level.dimensions[2] - 1024)/2 + loc[1]*90 + if(loc[0]%2 = 1, 45, 0) + if(value.is_building or value.is_construct, 2, 0)",
	  calculate_y: "def(class creature value, Loc loc) ->int 92 + loc[0]*52 + if(value.is_building or value.is_construct, -10, 0)",
	},

	object_type: [
		{
			id: "damage_label",
			animation: [
				{
					id: "normal",
					"image": "citadel-creatures.png",
					"rect": [0,0,1,1],
					"duration": 50,
					velocity_y: -100,
				}
			],

			zorder: 500,

			on_end_normal_anim: "remove_object(me)",

			properties: {
				label_value: {
				set_type: "int",
				type: "null",
				get: "null",
				set: "
				  execute(me, set_widgets([
				    {
						type: 'label',
						color: if(value > 0, 'red', 'green'),
						border_color: 'black',
						text: str(abs(value)),
						size: 32,
					}
				  
				  ]))
				" },
			}
		},

		{
			id: "equipment",
			animation: [
				{
					id: "normal",
					image: "citadel-equipment.png",
					rect: [5, 5, 39, 38],
					pad: 3,
					frames_per_row: 9,
					frames: 28,
					duration: 1,
				},
			],
			on_create: "set(time_in_animation_delta, 0)",
			properties: {
				alpha_multiply: 1.0
			}
		},
		{
			id: "banner",
			animation: [
				{
					id: "normal",
					image: "citadel-buildings.png",
					rect: [3, 48, 37, 88],
					pad: 3,
					frames_per_row: 3,
					frames: 3,
					duration: 1,
				},
			],
			on_create: "set(time_in_animation_delta, 0)",
			properties: {
				alpha_multiply: 1.0
			}
		},
		{
			id: "missile",
			animation: [
				{
					id: "normal",
					image: "missile.png",
					rect: [0,0,71,71],
					frames: 1,
					duration: 10,
					scale: 1,
				}
			],

			on_end_normal_anim: "die()"
		},
	],

	shader: {
		program: "hurt_flash",
		create: "[
			set(uniforms.u_tex_map, 0),
			set(uniform_commands.cycle, {value: parent.cycle, increment: true}),
			set(uniform_commands.start_cycle, 0),
			set(uniform_commands.end_cycle, 0),
			set(uniform_commands.u_color, color),
			set(uniform_commands.is_poisoned, if(co, 'Poisoned' in co.status_effects, false)) where co = parent.creature_object,
		]"
	},

	effects: [{
		program: "particle1",
		zorder: 1,
		create: "[
			set(parent.texture, load_texture('images/red-cross.png')),
			set(uniforms.u_tex_map, 1),
			set(uniforms.u_color, [255,255,255,255]),
			
			set(parent.regen_start_position, float_array(flatten(map(range(5), [1d70 - 35, 40 - 1d20])), 2)),
			set(parent.regen_attrib_cycle, float_array(flatten(map(range(5), 1d50)), 1)),
		]",
		
		draw: "[
			bind_texture(parent.texture.id, 1),
			
			set(uniforms.u_cycle, parent.cycle),
			set(uniforms.u_start_cycle, parent.regen_start_cycle),
			set(uniforms.u_end_cycle, parent.regen_end_cycle),
			set(uniforms.u_centre_position, [parent.mid_x, parent.mid_y]),
			set(attributes.a_position, parent.regen_start_position),
			set(attributes.a_start_cycle, parent.regen_attrib_cycle),
			draw_arrays('points', 0, 5),
		]",
	}],
}
