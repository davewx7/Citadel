{
	is_strict: true,
	"animation": [
		{
			"id": "creature",
			"image": "citadel-creatures.png",
			"pad": 3,
			x: 0, y: 0, w: 80, h: 80,
			scale: 1,
			frames: 1,
			duration: 1
		},
	],
	
 	"hitpoints": 1,
	"id": "creature",

	on_being_removed: "[
		remove_object(_ability_grid),
		set(_ability_grid, null),
	]",

	on_click: "[
		remove_object(_ability_grid),
		set(_ability_grid, null),
		if(controller.awaiting_input = false and /*arg.mouse_button = 3 and*/ creature_object and creature_object.is_on_board,
		   if(abilities_widget, [
			 controller.clear_tooltips(),
			 spawn('creature.activated_ability_grid', mid_x, mid_y, {
				_widget: abilities_widget,
				creature_object: creature_object,
				controller: controller,
			 }, [
				set(me._ability_grid, child),
			 ])
		]) where abilities_widget = create_activated_ability_widget(creature_object)),
		controller.creature_clicked(me)
	]",
	
	on_mouse_enter: "set(has_mouseover, true)",
	
	on_mouse_move: "[

	]",

	on_mouse_leave: "[
		set(has_mouseover, false),
		if(creature_object, set_gui_stats_alpha(creature_object.stats_alpha))]",

	on_process: "[
	  if(creature_object.is_on_board and creature_moving = false and _has_unused_movement,
	  [
	    if(level.cycle%100 < 18, set(rotate, 10*sin((level.cycle%100)*40)), set(rotate, 0)),
		if(_basexy = null,
		[
		   set(_basexy, [mid_x, mid_y]),
		   set(_basez, zorder),
		   set(zorder, zorder+10),
		],
		   if(cycle_pos < 70, [
			set(mid_y, _basexy[1] + sin(cycle_pos*360.0/70.0)*cycle_pos*0.5*direction_moving)
			  where direction_moving = if(game_state.nteam = creature_object.controller, 1, -1),
		   ], [
		   	set(mid_x, _basexy[0]),
		   	set(mid_y, _basexy[1]),
		   ]),
		) where cycle_pos = (level.cycle+50)%100 
	  ],
	  [
	    if(_basexy != null, [
			set(mid_x, _basexy[0]),
			set(mid_y, _basexy[1]),
			set(zorder, int<- _basez),
			set(_basexy, null),
		]),
	  	set(rotate, 0),
	  ]
	  ),

		if(_animate_sizing and _current_sizing != null and (_animate_move_delay <= 0),
		[
			add(_current_sizing, sign(sizing - _current_sizing)*0.01),
			fire_event('render'),
		]),

		//animate captures (change of color) only when creatures have
		//finished moving.
		if(_animate_color and find(level.chars, value is obj creature and value.creature_moving) = null, [
			animate(me, {
				_current_bg_color: bg_color,
			}, {
				on_process: [fire_event('render'), set(me._animate_color, false)],
				duration: 25,
			}),
		]),

		if(_animate_move_delay > 0, add(_animate_move_delay, -1))]",
	
	on_destroy: "[remove_object(me)]",

	on_end_explosion_anim: "destroy()",

	on_type_updated: "fire_event('render')",

	on_render: "[
		set(_dirty, true),
	]",

	on_draw: "if(_dirty, [
		set(_dirty, false),
		set(animation, render_creature(round_to_even(hex_height*1.3*sz), round_to_even(hex_height*sz), col)),
		set(_current_bg_color, col),
		set(_animate_color, col != bg_color),
		set(_current_sizing, sz),
		set(_animate_sizing, sz != sizing),
	] where sz = if(_current_sizing != null, _current_sizing, sizing)
	  where col = if(_current_bg_color != null, _current_bg_color, bg_color))",

	properties: {
		has_mouseover: { type: "bool", default: false },

		_ability_grid: { type: "obj creature.activated_ability_grid|null" },

		play_sound: "def(string|null fname) ->commands
			if(fname != null, sound(fname, lib.citadel.sound_volume(fname)))",
	
		regen_start_position: { type: "null|object" },
		regen_attrib_cycle: { type: "null|object" },

		regen_start_cycle: { type: "int", default: 0 },
		regen_end_cycle: { type: "int", default: -1 },

		//this is just an avatar in the status bar and shouldn't show
		//on map etc.
		status_avatar: { type: "bool", default: false },

		furthest_animation_hint: { type: "int", default: 0 },
		texture: { type: "null|object" },

		hex_height: { type: "int" },

		_animate_move_speed: { type: "int", default: 0 },
		_animate_move_delay: { type: "int", default: 0 },
		_basexy: { type: "null|Loc" },
		_basez: { type: "null|int" },
		creature_moving: "bool :: level.cycle < _animating_until",
		_animating_until: { type: "null|int" },

		_has_unused_movement: "bool ::
		  game_state.current_player_turn_index = creature_object.controller and
		  creature_object.move > creature_object.spaces_moved_this_turn and
		  creature_object.is_exhausted = false",

		controller: { type: "obj citadel_controller" },
		destroy: "def() ->commands execute(me, fire_event('destroy'))",
		image_num: { variable: false, type: "int", dynamic_initialization: true, set: "[set(time_in_animation, value), set(time_in_animation_delta, 0)]", get: "time_in_animation" },
		
		set_gui_stats_alpha: "def(decimal alpha_value) ->commands
		  if(stats_grid, set(stats_grid.alpha, int(alpha_value))) where stats_grid = widget|null<- me.widgets.gui_stats_grid",

		create_activated_ability_widget: "def(class creature creature) ->null|map
		  if(size(abilities) > 0, {
			 type: 'dialog', alpha: 175,
			 clear_background_alpha: 128,
			 padding: 0,
			 frame_padding: [10,10],
			 zorder: 1500,
			 cursor: [10,10],
			 y:-20,
			 background_frame: 'empty_window',
			 id: 'ability_dialog',
			 on_close: q(set(me.widgets.ability_dialog, null)),
			 children: [
			 	{
					type: 'grid',
					columns: 3,
					horizontal_padding: 15,
					swallow_clicks: true,
					allow_draw_highlight: true,
					allow_selection: true,
					must_select: true,
					on_select: q([
						swallow_mouse_event(),
						set(me.widgets.ability_dialog, null),
						if(selection != -1,
						   controller.ability_clicked(creature_object, creature_object.activated_abilities[selection].name)
						)
					]),
					children: fold(map(abilities, [{
						type: 'label',
						font: lib.font.regular_font,
						alpha: 255,
						size: 16,
						color: if(can_use, 'white', 'red'),
						text: value.name,
					},

					{
						type: 'label',
						font: lib.font.regular_font,
						alpha: 255,
						size: 16,
						color: if(can_use, 'white', 'red'),
						text: str(value.cost),
					},
					
					{
						type: 'label',
						font: lib.font.regular_font,
						alpha: 255,
						size: 16,
						color: 'white',
						text: value.rules,
					
					}] where can_use = controller.can_use_ability(creature_object, value.name)
                   ), a+b)
				}
			 ]
		  }) where abilities =
		    if(game_state.nteam != creature.controller or
			   game_state.current_player_index != creature.controller, [],
			   creature.activated_abilities)",

		play_animation_hint: "def(class creature obj, map hint) ->commands execute(me, switch(hint.type,
		  'summoned', [
		    play_sound(obj.sound_summoned),
		  	set(me.alpha, 0),
			[schedule(cycle, set(me.alpha, min(255, cycle*10))) | cycle <- range(27)]
		  ],
		  'regeneration', [
		    play_sound(obj.sound_regeneration),
		  	set(regen_start_cycle, cycle+10),
		  	set(regen_end_cycle, cycle+70),
		  ],
		  null))",

		play_attack_animation: "def(class creature new_creature) ->commands
		[
		  play_sound(new_creature.sound_attack),
		  if(size(new_creature.attack_hint.attacks) = 1,
		     [
			  if(new_creature.range <= 1,
			     null,
				 execute(me, map(range(attack.damage),
				   [
				    schedule(controller.animation_move_time + 10 + (value*30)/attack.damage,
				     spawn('creature.missile', src_x, src_y, sign(dst_x - src_x),
					       [set(child.zorder, zorder+950),
						    set(child.velocity_x, ((dst_x - src_x)*100)/10)]))
					 ]
					 where src_x = calculate_x(new_creature, new_creature.loc)
					 where src_y = calculate_y(new_creature, new_creature.loc)
					 where dst_x = calculate_x(class creature<- attack.target, attack.target_loc)))),
				    controller.reserve_animation_time('creature_attack_anim', controller.animation_move_time + 20),

					  ]
					  where attack = new_creature.attack_hint.attacks[0]
		  )]
		",

		play_death_animation: "def(class creature new_creature) ->commands

		if(controller is obj citadel_controller and controller.time_to_resolve_card > 0,
		   schedule(controller.time_to_resolve_card, cmd),
		   cmd
		)
		
		where cmd = [
			if(new_creature.sound_death, play_sound(new_creature.sound_death)),
			animate(me, {
				alpha: 0,
			}, {
				duration: 25,
				on_complete: me.destroy(),
			}),
			switch(new_creature.death_animation_hint,
			'explosion',
			[
			]),

		]",

		play_endzone_animation: "def() ->commands [
		  controller.reserve_animation_time('endzone', controller.animation_move_time + 202),
		  schedule(150, [
		  play_sound(creature_object.sound_endzone),
		  execute(me, [map(range(30), schedule(controller.animation_move_time + 20 + value, add(me.brightness, 10))),
		     schedule(controller.animation_move_time + 52, me.destroy())])
		  ])
		  ]
		  ",

		_display_life: { type: "int|null" },

		animate_movement: "def(Loc to, string anim_type) ->commands [
			if(anim_type = 'swap',
			[
			animate(me, {
				mid_x: end_x + controller.tile_width * if(end_y < mid_y, -1, 1),
				mid_y: (mid_y+end_y)/2,
			}, {
				duration: 25,
				name: 'swap',
			}),
			animate(me, {
				mid_x: end_x,
				mid_y: end_y,
			}, {
				duration: 25,
				name: 'swap',
			}
			)
			],

			animate(me, {
				mid_x: end_x,
				mid_y: end_y,
			}, {
				duration: 50,
			})
			)
		]
		where end_x = calculate_x(creature_object, to)
		where end_y = calculate_y(creature_object, to)",

		creature_object: {
		type: "class creature",
		set_type: "class creature",
		default: null,
		set: "
		  execute(me, if(status_avatar, set(_data, value),
		  [
			set(shader.uniform_commands.is_exhausted, value.is_exhausted) asserting shader,
			set(shader.uniform_commands.is_poisoned, if(value, 'Poisoned' in value.status_effects, false)) asserting shader,
			set(shader.uniform_commands.is_illusion, if(value, 'Illusion' in value.status_effects, false)) asserting shader,
		    set(me.attached_objects, []),
		    set(me.alpha, 255),
		    set(_data, value),

			set(me.animation, 'creature'),
			set(me.image_num, value.image_num),

			set(me._display_life, value.life),

			if(value.is_on_board,

			 [
				map(value.movement_log, [
				  debug(['ANIMATE MOVEMENT LOG: ', value]),
				  schedule(50*index, [
				  	set(mid_xy, [begin_x, begin_y]),
				  	bind_command(me.animate_movement, Loc<- value[1], string<- value[2])
				  ])
				] 
		             where begin_x = calculate_x(context.value, from)
		             where begin_y = calculate_y(context.value, from)
				  where from = Loc<- value[0]

			   ),

			   set(_animating_until, level.cycle + 50*size(value.movement_log)),

			   schedule(50*size(value.movement_log)+1, set(mid_xy, [target_x, target_y])),
			 (if(_data = null,
			     set(me.mid_xy, [target_x, target_y]),

				//_data != null meaning we're updating the object
				//rather than being a new object
			    [
				//spawn a life change label
				if(_display_life != null and _display_life != value.life,
				   spawn('label', mid_x, mid_y, {
						zorder: me.zorder+1000,
						_text: [str(value.life - _display_life)],
						red: if(_display_life > value.life, 255, 0),
						green: if(_display_life < value.life, 255, 0),
						blue: 0,
				   }, [
				   	animate(child, {
						mid_y: mid_y - 80,
					}, {
						duration: 50,
						on_complete: remove_object(child),
					}),
				   ])),
				    
				 [
				 if(move_speed > 0, play_sound(value.sound_walk)),
				 set(me._animate_move_speed, max(5, move_speed)),

/*
				 if(value.move_animation_hint = 'move' and [target_x, target_y] != mid_xy, [
					set(me._animate_move_delay, 100),
					controller.reserve_animation_time('creature_move', 150),
				],
				   value.move_animation_hint = 'swap' and [target_x, target_y] != mid_xy, [
				    
					set(me._animate_move_delay, 100),
					controller.reserve_animation_time('creature_move', 150),

					animate(me, {
						mid_x: mid_x + controller.tile_width*if(moving_up, 1, -1),
						mid_y: mid_y + (controller.tile_height*if(moving_up, -1, 1))/2,
					}, {
						duration: 50,
						name: 'swap',
					}),

					animate(me, {
						mid_x: mid_x,
						mid_y: mid_y + controller.tile_height*if(moving_up, -1, 1),
					}, {
						duration: 50,
						name: 'swap',
					}),

				] where moving_up = target_y < mid_y),
		*/
				 ]
				   where move_speed = max(abs(target_x - mid_x), abs(target_y - mid_y))/30,
				 
					if(_data.life != value.life,
					[
		  			controller.reserve_animation_time('creature_life_change', controller.animation_move_time + 40),
					]) asserting shader,
				 ])
			   )
			 ]
			    where target_x = calculate_x(value, value.loc)
				where target_y = calculate_y(value, value.loc)
		   ), //end value.is_on_board
			if(value.is_on_board, set(me.zorder, (value.loc[0]+1)*10 + if(not value.is_construct, 1, 0))),
			if(_data != null and
			   value.attack_hint and ((not _data.attack_hint) or
			   _data.attack_hint.turn != value.attack_hint.turn),
			   me.play_attack_animation(value)),

			if(not value.alive, me.play_death_animation(value)),
			if(value.reached_endzone, me.play_endzone_animation()),

			[play_animation_hint(value, hint) |
			 hint <- value.animation_hints,
			 hint.hint_id > furthest_animation_hint],

			if(value.animation_hints, set(furthest_animation_hint, int<- value.animation_hints[size(value.animation_hints)-1].hint_id)),

			fire_event('render'),
			]))" },

	  calculate_x: "def(class creature value, Loc loc) ->int (level.dimensions[2] - controller.board_width)/2 + loc[0]*controller.tile_x_spacing - controller.tile_x_spacing/4 + int(hex_height*1.3/2)",
	  calculate_y: "def(class creature value, Loc loc) ->int controller.board_ypos + loc_on_screen(loc)[1]*controller.tile_y_spacing + if(loc[0]%2 = 0, controller.tile_height/2, if(game_state.nteam = 1, controller.tile_height, 0))
	      asserting game_state",

	  loc_on_screen: "def(Loc loc) ->Loc [loc[0], if(game_state.nteam = 0, (game_state.columns-1) - loc[1], loc[1])]",

	  game_state: { type: "class game" },

      _animate_sizing: { default: false },
	  _current_sizing: { type: "null|decimal" },

	  sizing: "decimal :: if(creature_object.is_construct = false and game_state.construct_at_loc(creature_object.loc) != null, 0.75, 1.0)",

	  bg_color: "[decimal,decimal,decimal] ::
			switch(creature_object.controller,
			       0, if(creature_object.is_construct, [0.53, 0.25, 0.31], [0.34, 0.12, 0.16]),
			       1, if(creature_object.is_construct, [0.31, 0.25, 0.53], [0.16, 0.12, 0.34]),
			       if(creature_object.is_construct, [0.7, 0.8, 0.7], [0.16, 0.12, 0.16]))
	  ",

	  _current_bg_color: { type: "null|[decimal,decimal,decimal]" },
	  _animate_color: { default: false },

	  _dirty: { default: false },

	  render_creature: "def(int w, int h, [decimal,decimal,decimal] col) ->map {
		id: 'fbo',
		image: 'fbo',
		fbo: c.render(w, h,

		[
			c.save()
		] +

		outline(0, 0, w, h) + [
			c.set_linear_pattern(0, 0, 100, 10, [
				{ offset: 0, red: 0, green: 0, blue: 0.1 },
				{ offset: 1, red: 0.1, green: 0.1, blue: 0.3 },
			]),
			c.fill(),
		] +

		if(portrait = null, [], outline(0, 0, w, h) + [
			c.clip(),

			c.new_path(),

			c.save(),

			c.translate(-(c.image_dim('images/portraits/' + portrait)[0]*portrait_scale - w)/2.0 - portrait_x_offset, portrait_scale*90.0 - portrait_y_offset),
			c.scale(portrait_scale, portrait_scale),
			c.set_source_rgba(1, 0, 0, 1),
			c.fill(),

			c.paint_image('images/portraits/' + portrait),

			c.restore(),
		]) +

		if(creature_object.is_construct and creature_object.controller != -1, [
			outline(w*0.05, h*0.05, w*0.9, h*0.9),

			if(creature_object.controller = ctrl.state.nteam, c.set_source_rgba(1, 1, 1, 0.5), c.set_source_rgba(0, 0, 0, 1)),
			c.set_line_width(4),
			c.stroke(),
		], []) +

		if(creature_object.is_construct = false, [
			outline(w*0.02, h*0.37, w*0.25, h*0.25),
			if(creature_object.controller = ctrl.state.nteam, white_col, black_col),
			c.fill(),

			outline(w*0.72, h*0.37, w*0.25, h*0.25),
			if(creature_object.controller = ctrl.state.nteam, white_col, black_col),
			c.fill(),

			c.set_font(lib.font.regular_font),
			c.set_font_size(24*font_scaling),

			c.save(),
			c.translate(w*0.13 - attack_extents.width/2, h*0.57),
			if(creature_object.controller = ctrl.state.nteam, black_col, white_col),
			c.text_path(str(creature_object.attack)),
			c.fill(),
			c.restore(),

			c.save(),
			c.translate(w*0.83 - life_extents.width/2, h*0.57),
			if(creature_object.controller = ctrl.state.nteam, black_col, white_col),
			c.text_path(str(creature_object.life)),
			c.fill(),
			c.restore(),
		] where attack_extents = c.text_extents(lib.font.regular_font, 24*font_scaling, str(creature_object.attack))
		  where life_extents = c.text_extents(lib.font.regular_font, 24*font_scaling, str(creature_object.life)),
		
		if(creature_object.energy > 0, [

			outline(w*0.72, h*0.37, w*0.25, h*0.25),
			if(creature_object.controller = ctrl.state.nteam, white_col, black_col),
			c.fill(),

			c.set_font(lib.font.regular_font),
			c.set_font_size(24*font_scaling),

			c.save(),
			c.translate(w*0.79, h*0.57),
			if(creature_object.controller = ctrl.state.nteam, black_col, white_col),
			c.text_path(str(creature_object.energy)),
			c.fill(),
			c.restore(),
		], [
		])) +

		if(doomed, [
			c.save(),

			c.translate(w*0.3, h*0.2),
			c.draw_svg(if(ascended, 'images/icons/angel-wings.svg', 'images/icons/skull-crack.svg'), h/2, h/2),

			c.restore(),
			
		], []) +

		map(ability_info[:size(ability_draw_areas)],
		[

			c.save(),
			c.rectangle(0*w, draw_area.rect_offset*h, 1*w, 0.1*h),
			c.clip(),
			c.new_path(),

			outline(0.05*w, 0.05*h, 0.9*w, 0.9*h),
			if(creature_object.controller = ctrl.state.nteam, c.set_source_rgba(1, 1, 1, 1), c.set_source_rgba(0, 0, 0, 1)),
			c.fill(),

			c.restore(),

			c.save(),
			c.translate(0.5*w - text_area.width*0.5, (draw_area.rect_offset+0.09)*h),
			c.set_font(lib.font.regular_font),
			c.set_font_size(12*font_scaling),
			c.text_path(value.text),
			if(creature_object.controller = ctrl.state.nteam, c.set_source_rgba(0, 0, 0, 1), c.set_source_rgba(1, 1, 1, 1)),
			c.fill(),
			c.restore(),

			if(value.is_activated, [
				c.save(),
				outline(left_hex, top_hex, 0.1*w, 0.1*h) where left_hex = 0.5*w - text_area.width*0.5 - 0.1*w where top_hex = draw_area.rect_offset*h,
				if(creature_object.controller = ctrl.state.nteam, c.set_source_rgba(0, 0, 0, 1), c.set_source_rgba(1, 1, 1, 1)),
				c.fill(),
				c.restore(),

				c.save(),
				c.set_source_rgba(1, 1, 1, 1),
				c.translate(0.5*w - text_area.width*0.5 - 0.07*w, (draw_area.rect_offset+0.09)*h),
				if(creature_object.controller = ctrl.state.nteam, c.set_source_rgba(1, 1, 1, 1), c.set_source_rgba(0, 0, 0, 1)),
				c.set_font(lib.font.regular_font),
				c.set_font_size(10*font_scaling),
				c.text_path(str(value.cost)),
				c.fill(),

				c.restore(),
			]),

		] where text_area = c.text_extents(lib.font.regular_font, 12*font_scaling, value.text)
		  where draw_area = ability_draw_areas[index])

		where ability_draw_areas = if(creature_object.controller = ctrl.state.nteam,
		[
			{
				rect_offset: 1.0 - 0.95,
			},
			{
				rect_offset: 1.0 - 0.8,
			},

			{
				rect_offset: 0.85,
			},
			{
				rect_offset: 0.7,
			},
		
		], [
			{
				rect_offset: 0.85,
			},
			{
				rect_offset: 0.7,
			},
			{
				rect_offset: 1.0 - 0.95,
			},
			{
				rect_offset: 1.0 - 0.8,
			}
		])

		where ability_info =
		if(creature_object.controller = -1, [],
		map(creature_object.abilities + creature_object.rules_short +
		    map(creature_object.triggered_abilities, value.summary) +
		 if(creature_object.is_construct, [],
		  if(creature_object.resistance = 0, [], [str(creature_object.resistance) + ' Armor']) +
		  if(creature_object.range = 0, [], [str(creature_object.range) + ' Range']) +
		  if(creature_object.move = 1, [], creature_object.is_building, ['Building'], [str(creature_object.move) + ' Moves'])),
		  {
			text: value,
			is_activated: false,
			cost: 0,
		}) +
		
		map(creature_object.activated_abilities, {
			text: value.name,
			is_activated: true,
			cost: value.cost,
		}))

		) where outline = def(decimal xx, decimal yy, decimal ww, decimal hh)
		[
			c.save(),

			c.translate(xx, yy),

			c.move_to(ww*dir(hex_indent), hh*dir(1)),
			c.line_to(ww*dir(0), hh*dir(0.5)),
			c.line_to(ww*dir(hex_indent), hh*dir(0)),

			c.line_to(ww*dir(hex_indent_inverse), hh*dir(0)),
			c.line_to(ww*dir(1.0), hh*dir(0.5)),
			c.line_to(ww*dir(hex_indent_inverse), hh*dir(1.0)),

			c.line_to(ww*dir(hex_indent), hh*dir(1)),

			c.restore(),
		]

		 where outline_top = def(decimal xx, decimal yy, decimal ww, decimal hh)
		 [
		 	c.save(),
			c.move_to(ww*dir(hex_indent), hh*dir(0)),
			c.line_to(ww*dir(hex_indent*0.4), hh*dir(0.3)),
			c.line_to(ww*dir(1-hex_indent*0.4), hh*dir(0.3)),
			c.line_to(ww*dir(hex_indent_inverse), hh*dir(0)),
			c.restore(),
		 ]

		 where outline_bot = def(decimal xx, decimal yy, decimal ww, decimal hh)
		 [
		 	c.save(),
			c.move_to(ww*dir(hex_indent), hh*dir(1)),
			c.line_to(ww*dir(hex_indent*0.4), hh*dir(0.7)),
			c.line_to(ww*dir(1-hex_indent*0.4), hh*dir(0.7)),
			c.line_to(ww*dir(hex_indent_inverse), hh*dir(1)),
			c.restore(),
		 ]

		 where outline_portrait = def(decimal xx, decimal yy, decimal ww, decimal hh)
		 [
		 	c.save(),
			c.translate(xx, yy),

			c.move_to(ww*dir(hex_indent*0.4), hh*dir(0.7)),
			c.line_to(ww*dir(0), hh*dir(0.5)),
			c.line_to(ww*dir(hex_indent*0.4), hh*dir(0.3)),

			c.line_to(ww*dir(1-hex_indent*0.4), hh*dir(0.3)),
			c.line_to(ww*dir(1.0), hh*dir(0.5)),
			c.line_to(ww*dir(1-hex_indent*0.4), hh*dir(0.7)),

			c.restore(),
		 ]
		 where font_scaling = h/100.0
		 where hex_indent_inverse = 1.0 - hex_indent
		 where hex_indent = (w - h)/decimal(w)
		 where dir = if(direction_facing > 0, def(decimal a) a, def(decimal a) 1.0 - a)
		 where white_col = c.set_source_rgba(1, 1, 1, 1)
		 where black_col = c.set_source_rgba(0, 0, 0, 1)
		 where c = canvas()
		  where portrait = string|null<- if(creature_object.base_card, creature_object.base_card.portrait, null)
		  where portrait_x_offset = creature_object.portrait_x_offset*scaling
		  where portrait_y_offset = creature_object.portrait_y_offset*scaling
		  where portrait_scale = creature_object.portrait_scale*scaling
		  where scaling = w/120.0
		  where direction_facing = if(ctrl != null and ctrl.state.nteam = 1, -1, 1) * creature_object.direction_moving
		  where ascended = ctrl.end_of_turn_state != null and doomed and find(ctrl.end_of_turn_state.endzoned_creatures, value = creature_object.summon_id) != null
		  where doomed = ctrl.end_of_turn_state != null and
		                (creature_object.is_construct = false and (future_me = null or future_me.controller != creature_object.controller)
		    where future_me = find(ctrl.end_of_turn_state.creatures, value.summon_id = creature_object.summon_id))
		  where ctrl = find_or_die(level.chars, value is obj citadel_controller),
		x: 0, y: 0, w: w, h: h,
		scale: 1,
		frames: 1,
	  }",

	  _tooltip_text: "string ::

		if(creature_object.is_building, 'Building', creature_object.is_construct, 'Land', 'Creature' + c.emdash + str(creature_object.attack) + ' Atk, ' + str(creature_object.life) + ' Life') + '\n' +


		if(creature.is_construct = false and creature_object.resistance > 0,
			'Armor' + c.emdash + str(creature_object.resistance) + '\n(The first ' + str(creature_object.resistance) + ' damage from any attack is prevented)\n', '') +

		if(creature.is_construct = false and creature.is_building = false and creature.move != 1,
			'Movement' + c.emdash + str(creature_object.move) + '\n(Moves ' + creature.move + ' tiles each turn)\n', '') +


		if(creature.is_construct = false and creature.range != 0,
			'Range' + c.emdash + str(creature_object.range) + if(creature_object.range = 1, '\n(Attacks adjacent enemies even if not engaged in melee combat)', '\n(Attacks enemies up to ' + str(creature.range) + ' tiles away)' + '\n'), ''
		) +

		if(creature.abilities, fold(map(creature.abilities,
			value + if(help_str = null, '', ' (' + str(help_str) + ')' + '\n') where help_str = help[value]
		), a+b), '') +

		if(creature.passive_abilities, fold(map(creature.passive_abilities,
		value.name + q( <font tag='circle' size='-4'>P</font> &emdash;) + value.rules
		), a+b), '') +

		if(creature.triggered_abilities, fold(map(creature.triggered_abilities,
		value.name + q( <font tag='circle' size='-4'>T</font> &emdash;) + value.rules
		), a+b), '') +

		creature.rules

		where creature = creature_object
		where help = lib.json.get_document_map('data/help-abilities.cfg')
		where c = canvas()
	  ",
	},

	object_type: [

		{
			id: "missile",
			animation: [
				{
					id: "normal",
					image: "missile.png",
					rect: [0,0,71,71],
					frames: 1,
					duration: 10,
					scale: 1,
				}
			],

			on_end_normal_anim: "die()"
		},

		{
			id: "activated_ability_grid",
			hidden_in_game: true,
			properties: {
				_widget: { type: "map" },
				creature_object: { type: "class creature" },
				controller: { type: "obj citadel_controller" },
			},

			on_create: "
				set_widgets(_widget)
			",
		},

	],

	shader: {
		name: "creature_shader",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;

		void main()
		{
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		",

		fragment: "
		uniform sampler2D u_anura_tex_map;
		uniform bool is_poisoned;
		uniform bool is_exhausted;
		uniform bool is_illusion;
		uniform float u_alpha;
		varying vec2 v_texcoord;
		void main()
		{
			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			gl_FragColor[3] *= u_alpha;

			if(is_exhausted) {
				float gray = sqrt(pow(gl_FragColor.r,2.2) * 0.2126 + pow(gl_FragColor.g,2.2) * 0.7152 + pow(gl_FragColor.b,2.2) * 0.0722);
				gl_FragColor[0] = gl_FragColor[1] = gl_FragColor[2] = gray;
			}

			if(is_poisoned) {
				gl_FragColor[1] = 1.0 - (1.0 - gl_FragColor[1])/2.0;
			}

			if(is_illusion) {
				gl_FragColor[2] = 1.0 - (1.0 - gl_FragColor[2])/2.0;
			}
		}
		",


		create: "[
		]",

		draw: "[
			set(uniform_commands.u_alpha, parent.alpha/255.0)
		]",
	},

	on_show_tooltip: "
		if(creature_object.base_card != null and (_ability_grid = null or not _ability_grid.widgets.ability_dialog),
		[
			spawn('tip_dialog', mid_x + ctrl.px(220), mid_y, {
				zorder: 10000,
				_title: creature_object.name,
				_tip: {
					key: 'tip',
					text: _tooltip_text,
					targets: [me],
				},

				_width: 240,
				_height: 220,
				_has_close: false,
				_delay_widgets: 20,
				alpha: 0,

			}, [
				ctrl.set_tooltip(child),
				animate(child, {
					alpha: 255,
				}, {
					duration: 20,
				}),
			]),

			spawn('card', mid_x - ctrl.px(220), mid_y, {
				zorder: 10000,
				in_hand: false,
				card_size: 1.0,
				card_type: construct('card', creature_object.base_card),
				controller: ctrl,
			}, [
				ctrl.append_tooltip(child),
				animate(child, {
					alpha: 255,
				}, {
					duration: 20,
				}),
			]),
		]
		) where ctrl = obj citadel_controller <- arg.controller
	",

	effects: [{
		name: "particle1",
		zorder: 1,
		create: "[
			set(parent.texture, load_texture('images/red-cross.png')),
			set(uniforms.u_tex_map, 1),
			set(uniforms.u_color, [255,255,255,255]),
			set(draw_mode, 'points'),
			
			set(parent.regen_start_position, float_array(flatten(map(range(5), [1d70 - 35, 40 - 1d20])), 2)),
			set(parent.regen_attrib_cycle, float_array(flatten(map(range(5), 1d50)), 1)),
		]",
		
		draw: "[
			bind_texture(parent.texture, 1),
			
			set(uniforms.u_cycle, parent.cycle),
			set(uniforms.u_start_cycle, parent.regen_start_cycle),
			set(uniforms.u_end_cycle, parent.regen_end_cycle),
			set(uniforms.u_centre_position, [parent.mid_x, parent.mid_y]),
			set(attributes.a_position, parent.regen_start_position),
			set(attributes.a_start_cycle, parent.regen_attrib_cycle),
		]",
	}],
}
