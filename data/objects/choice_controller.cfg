{
id: "choice_controller",
is_human: false,
is_strict: true,
always_active: true,

vars: {
},

tmp: {
	children: [],
},

properties: {
	destroy_children: "def() ->commands [map(children, value.destroy()),
	                                     set(children, [])]",
	destroy: "def() ->commands [destroy_children(), remove_object(me)]",

	level_width: "level.dimensions[2]",
	level_height: "level.dimensions[3]",

	children: { type: "[obj card]", default: [] },

	game: {
		type: "class game",
		set: "[
			set(zorder, 1000),
			set(draw_area, [0,0,level.dimensions[2]/2 + 20, level.dimensions[3]/2 + 20]),
			execute(me, map(range(24), schedule(value, set(alpha, value*8)))),

			[
				set(widgets, [choice_text]),
			]
			 where choice_text = {
				type: 'label',
				size: 28,
				zorder: 1100,
				text: value.current_choice.text,
				font: 'RobotoCondensed-Bold',
				color: 'white',
				x: level_width - 20,
				y: level_height - 20,
				align_h: 'right',
				align_v: 'bottom',
			},

			map(cards, spawn('card', 100 + ((index*100)/(size(cards)-1)*(level_width-200))/100, level_height/2, {
				card_type: if(value.card is string, construct('card', lib.json.get_document_map('data/cards.cfg')[value.card]), value.card),
				controller: obj citadel_controller<- find(level.chars, value is obj citadel_controller),
			  }, [
				debug('spawn card ' + index + '/' + size(cards)),
				set(child.is_choice, true),
				set(child.choice_value, value.tag),
				set(child.zorder, 2000),
				add(children, [child]),
		   ]))
	    where cards = filter(value.current_choice.options, value is class choice.card),

			set_widgets(map(buttons, {
				type: 'button',
				padding: [25, 15],
				resolution: 'normal',
				align_h: 'center',
				x: 100 + ((index*100)/(size(buttons)-1)*(level_width-200))/100,
				y: level_height - 200,
				label: {type: 'label', text: value.text, font: 'RobotoCondensed-Bold', size: 16, color: 'white'},
				on_click: q(find(level.chars, value.type = 'citadel_controller').option_clicked) + '(' + value.tag + ')'
			}))
		where buttons = filter(value.current_choice.options, value is class choice.button),

		set(_data, value),
 	] asserting value.current_choice",
	},
},

animation: {
	id: "normal",
	image: "dark-solid.png",
	x: 0,
	y: 0,
	w: 3,
	h: 3,
	frames: 1,
	duration: 1000,
},

}
