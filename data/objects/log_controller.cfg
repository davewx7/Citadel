{
id: "log_controller",
is_strict: true,

next_animation: "'normal'",
always_active: true,
hidden_in_game: true,
zorder: 600,

properties: {
	ctrl_lock_out_time: -1,
	log_shown: false,

	card_preview_for: { type: "class card|null" },
	card_preview: { type: "obj card|null" },

	myplayer: { type: "class player|null" },

	log: { type: "[string]", default: [] },

	set_log: "def([string] txt, class player|null pl) ->commands [execute(me, set_widgets([{
		id: 'game_log_dlg',
		type: 'grid',
		// -112, -84 are the xy offsets of the level dimensions.
		rect: [-screen_width/4 - 112, -screen_height/4 - 84, screen_width/2, screen_height/2],
		max_height: screen_height/2,
		row_height: screen_height/2,
		column_widths: [screen_width/4-20, screen_width/4-20],
		visible: me.log_shown,
		columns: 2,
		zorder: 500,
		frame_padding: [15, 15],
		frame: 'regular_button',
		children:[{
			id: 'log_grid',
			type: 'grid',
			rect: [20, 20, screen_width/4-40, screen_height/2-40],
			max_height: screen_height/2-40,
			allow_draw_highlight: true,
			scroll_to_bottom: true,
			column_widths: screen_width/4 - 40,
			columns: 1,
			zorder: 2005,
			allow_selection: true,
			//on_mouseover: q(find(level.chars, value.type = 'citadel_controller').mouse_enter_log(selection)),
			on_mouseover: 'me.mouse_enter_log(selection)',
			children: map(txt, {
				type: 'label',
				text: value,
				align: 'left',
				color: 'white',
				font: 'RobotoCondensed-Regular',
				size: 12,
			})
		}, {
			id: 'card_image',
			type: 'label',
			text: '',
			zorder: 2005,
		}],
	}])), set(log, txt), set(me.myplayer, pl)]",
	
	screen_width: "int<- level.dimensions[2]",
	screen_height: "int<- level.dimensions[3]",

	game_log_dialog: "widget<- me.widgets.game_log_dlg",
	
	interpolate: "def(decimal x1,decimal x2) -> [decimal|int] [(x2-x1)*v/25.0+x1 | v <- range(0,25)]",
	
	hide_log: "commands<- set(game_log_dialog.visible, false)",
	do_hide_log: "commands<- [
		remove_preview_card(null),
		set(me.y_schedule, interpolate(me.y, -384)),
		schedule(25, hide_log),
		set(me.schedule_expires, true),		
		set(me.log_shown, false), 
		debug('do hide log'),
		set(me.ctrl_lock_out_time, level.cycle + 25),
	]",
	
	do_show_log: "commands<- [
		set(me.y_schedule, interpolate(me.y, 384)),
		set(me.schedule_expires, true),		
		set(game_log_dialog.visible, true),
		set(me.log_shown, true), 
		debug('do show log'),
		set(me.ctrl_lock_out_time, level.cycle + 25),
	]",
	
	remove_preview_card: "def(class card|null card) ->commands if(card_preview and (card_preview_for = card or card = null), [if(card_preview.creature, card_preview.creature.destroy()), remove_object(card_preview), set(card_preview, null)])",
	mouse_enter_card: "def(class card card) ->commands execute(me, [
		remove_preview_card(null),
		set(card_preview_for, card),

		spawn('card', screen_width/2 - 16, screen_height/2 - 104,
		{
			scale: 1,
			zorder: 610,
			player: myplayer,
			card_type: card,
			controller: obj citadel_controller<- find(level.chars, value is obj citadel_controller)
		}, [
			set(card_preview, child),
	  ])
	])",

	mouse_enter_log: "def(int index) ->commands
	   if(items = null, if(card_preview_for is class card,
			           remove_preview_card(card_preview_for)),
		[
			 mouse_enter_card(construct('card',
			    lib.json.get_document_map('data/cards.cfg')[items[1]])),
			 set(card_preview_for, lib.citadel.create_card(items[1]))
	    ])
	    where items = if(index = -1, null,
		   [string]<- regex_match(log[index], '(.*) plays (.*)'))",
},

on_create: "null",

on_process: "if('`' in (object<- level.player).ctrl_keys and level.cycle > me.ctrl_lock_out_time, if(me.log_shown, do_hide_log, do_show_log))",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 86,
	y: 73,
	w: 28,
	h: 28,
	collide: [0,0,28,28],
	frames: 1,
	duration: 1000,
},
}
