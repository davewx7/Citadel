{
	id: "library_archive_controller",
	is_human: true,
	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	properties: {
		controller: { type: "obj library_controller" },

		gui_left_edge: "int :: controller.gui_left_edge",
		gui_right_edge: "int :: controller.gui_right_edge",

		_deck_cache: { type: "object", init: "create_cache(512)" },

		_remove_button: { type: "null|obj button_controller", set: "[set(_data, value), remove_object(_data)]" },

		deck_enter: "def(obj deck_avatar avi, Deck deck) ->commands
		execute(me,
		[
			spawn('button_controller', 0, 0, {
				text: 'X',
				tooltip: 'Delete deck',
				zorder: 1000,
				mid_x: avi.x2 - lib.citadel.py(16),
				mid_y: avi.y + lib.citadel.py(32),
				button_width: lib.citadel.py(24),
				button_height: lib.citadel.py(24),
				on_click: (def()->commands controller.remove_deck_prompt(find(level.chars, value is obj library_deck_summary and value.deck_name = deck.name), deck.name)),
				use_absolute_screen_coordinates: true,
				color_scheme: lib.citadel.library_color_scheme,
			}, [
				set(_remove_button, child)
			]),

			if(find(level.chars, value is obj library_deck_summary and value.deck_name = deck.name) = null,
				animate(avi, { halo: 20.0 }, { duration: 10 })
			)
		]
		)
		",

		deck_leave: "def(obj deck_avatar avi, Deck deck) ->commands
		[
			set(_remove_button, null),
			schedule(8, animate(avi, { halo: 0.0 }, { duration: 16 })),
		]
		",

		deck_clicked: "def(obj deck_avatar avi, Deck deck) ->commands
			if(summary = null and count(level.chars, value is obj library_deck_summary) >= lib.citadel.max_decks,
			[
				map(filter(level.chars, value is obj library_deck_summary), value.pulse()),
			],
			summary = null, [
				schedule(8, animate(avi, { halo: 0.0 }, { duration: 16 })),
				set(deck.archived, false);
				set(deck.creation_time, time().unix);
				controller.return_deck_from_archive(deck)
			], [
				summary.pulse()
			])
			where summary = find(level.chars, value is obj library_deck_summary and value.deck_name = deck.name)
		",

		_get_deck_avatar: "def(string id) ->obj deck_avatar
		query_cache(_deck_cache, id,
			object('deck_avatar', 0, 0, {
				zorder: 1000,
				_width: lib.citadel.py(200),
				_portrait: if(deck.avatar, lib.citadel.create_card(deck.avatar).portrait, deck.cards, lib.citadel.create_card(deck.cards[0]).portrait) or 'acolyte.png',
				_name: deck.name,
				click_handler: def(obj deck_avatar avi) ->commands me.deck_clicked(avi, deck),
				mouse_enter_handler: def(obj deck_avatar avi) ->commands me.deck_enter(avi, deck),
				mouse_leave_handler: def(obj deck_avatar avi) ->commands me.deck_leave(avi, deck),
				deck: deck,

			})
			where deck = Deck<- controller.get_decks()[id]
		)
		",

		add_objects: "def() ->commands [
			spawn('label', 0, 0, {
				mid_x: gui_left_edge + lib.citadel.py(400),
				mid_y: lib.citadel.py(40),
				_font_size: lib.citadel.py(26),
				_text: ['DECK ARCHIVES'],
			}, [
			]),

			spawn('scrollable_pane', 0, 0, {
				zorder: 1000,
				x: gui_left_edge,
				y: lib.citadel.py(50),
				area_width: lib.citadel.py(880),
				area_height: lib.citadel.py(720),
				elements: [],
				pending_elements: deck_elements,
				use_absolute_screen_coordinates: true,
				focus_override: true,
				step_size: lib.citadel.py(64),
			}, [
			])
			where deck_elements = map(controller.get_decks(),
			{
				xpos: 0 + lib.citadel.py(290)*(index%3),
				ypos: lib.citadel.py(20) + lib.citadel.py(290)*(index/3),
				height: lib.citadel.py(300),
				create: def()->custom_obj _get_deck_avatar(key),
			}
			)
		]",

		remove_children: "def() ->commands
			map(spawned_children, remove_object(value))
		",
	},

	on_create: "add_objects()",

	on_being_removed: "remove_children()",


}
