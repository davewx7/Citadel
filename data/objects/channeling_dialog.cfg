{
	id: "channeling_dialog",

	is_strict: true,
	hidden_in_game: true,

	zorder: 20000,
	always_active: true,

	properties: {
		_mm: { type: "obj matchmaking_base" },
		_controller: { type: "obj citadel_controller" },

		card: { type: "obj card" },
		_card_backup_zorder: { default: 0 },

		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		channel: "def(int amount) ->commands [
			_controller.set_amount_channeled(amount);
			_on_complete,
			remove_object(me),
		]",
		close: "def() ->commands remove_object(me); _controller.clear_input_state(); _controller.spawn_cards_in_hand()",

		_on_complete: { type: "commands" },

		_adjust: "def(int nadjust) ->commands [
			if(new_value < 0, set(_current_channel, _max_channel),
			   new_value > _max_channel, set(_current_channel, 0),
			   set(_current_channel, new_value))
		] where new_value = _current_channel+nadjust",

		_max_channel: { type: "int" },
		_current_channel: { type: "int", default: 0 },
		_base_cost: { type: "int" },

		_widgets: { type: "[obj channeling_widget]", default: [] },

		_player_avatar: { type: "null|obj player_avatar" },
		_player_avatar_zorder: { type: "int", default: 0 },
		
		_mana_bar: { type: "null|obj mana_bar" },
		_mana_bar_zorder: { type: "int", default: 0 },
		_pending_exit: { type: "bool", default: false },

		mouseover_channel: "def(int amount) ->commands
		if(_mana_bar != null,
			set(_mana_bar.using_mana, _base_cost + amount);
			fire_event(_mana_bar, 'render')
		)
		",
	},

events: {

"mouse_down*": "if(find(_widgets, value.selected) = null, set(_pending_exit, true))",
"mouse_up*": "if(find(_widgets, value.selected) = null and _pending_exit, [
	schedule(2, close())
])",

being_removed: "[
	if(_mana_bar, set(_mana_bar.zorder, _mana_bar_zorder)),
	if(_player_avatar, set(_player_avatar.zorder, _player_avatar_zorder)),
	set(card.zorder, _card_backup_zorder),
	set(card.ignore_clicks, false),
	map(spawned_children, remove_object(value)),
	[set(c.paused, false) | c <- level.chars, c.paused],
	set(_controller.in_background, false),
]",

create: "[
	set(_card_backup_zorder, card.zorder),
	set(card.zorder, 20000),
	set(card.ignore_clicks, true),
	spawn('blur_controller', 0, 0, {
		begin_zorder: -1000000,
		end_zorder: 12000,
		blur_darken: 0.4,
	}, [
	]),

	animate(card, {
		mid_x: _controller.level_width/2,
		mid_y: _controller.level_height - lib.gui.py(200),
		card_size: 2.0,
	}, {
		name: 'card_move',
		replace_existing: true,
		duration: 10,
	}),

	set(_controller.in_background, true),
	[set(c.paused, true) | c <- level.chars, c != me, c != _controller, c != card],

	if(player_avatar, [
		set(_player_avatar_zorder, player_avatar.zorder),
		set(player_avatar.paused, false),
		add(player_avatar.zorder, 20000),
		set(_player_avatar, player_avatar),
	])

	where player_avatar = find(level.chars, value is obj player_avatar and value.player_num = _controller.state.nplayer),

	if(mana_bar, [
		set(_mana_bar_zorder, mana_bar.zorder),
		set(mana_bar.paused, false),
		add(mana_bar.zorder, 20000),
		set(mana_bar.using_mana, _base_cost),
		set(_mana_bar, mana_bar),
		fire_event(mana_bar, 'render'),
	])

	where mana_bar = find(level.chars, value is obj mana_bar and value.player_num = _controller.state.nplayer),

	spawn('label', level_width/2, level_height/2 - lib.gui.py(70), {
		zorder: zorder,
		_text: ['Channel how much mana?'],
	}),

	map(range(num_widgets), [
		spawn('channeling_widget', {
			dialog: me,
			mid_x: level_width/2 - (widget_width*(num_widgets-1))/2 + (widget_width*index),
			mid_y: level_height/2,
			_width: widget_width,
			_height: lib.gui.py(80),
			number: index,
			hue_shift: lerp * min(num_widgets, 12.0)/24.0,
		}, [
			add(_widgets, [child]),
		])
	] where lerp = decimal(index)/decimal(num_widgets)
	) where widget_width = int(lib.gui.dpy(120.0*10.0/max(10.0, num_widgets)))
	  where num_widgets = _max_channel+1,

]"
}

}
