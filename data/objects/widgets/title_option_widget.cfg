{
	id: "title_option_widget",
	is_strict: true,

	properties: {
		_width: { type: "int" },
		_height: "int :: round_to_even(_width*15.0/13.0)",

		_portrait: { type: "string" },
		_name: { type: "string" },

		_font: "string :: lib.font.regular_font",
		_font_size: "int(_width*0.1)",

		_border_size: "int :: lib.gui.py(8)",

		halo: { type: "decimal", default: 0.0 },

		render: "def() ->commands
		[
		set(animation, lib.gui.render_frame(c, _width + _border_size*2, _height + _border_size*2, [
			c.translate(_border_size, _border_size),
			c.rectangle(0, 0, banner_width, _height),
			c.set_source_rgba(0, 0, 0, 0.1),
			c.fill(),

			c.rectangle(0, _height*0.42, banner_width, _height*0.16),
			c.set_source_rgba(0, 0, 0, 0.8),
			c.fill(),

			c.set_source_rgba(1, 1, 1, 1),
			c.set_font(_font),
			c.set_font_size(_font_size),
			c.translate(banner_width*0.5 - text_area.width*0.5, _height*0.5 - text_area.height*0.5 - text_area.y_bearing),
			c.text_path(_name),
			c.fill(),
		]
		where banner_width = (_image_widget.img_w + (_image_widget.img_w%2) asserting _image_widget != null)
		where text_area = c.text_extents(_font, _font_size, _name),
		null, {force_no_alpha: true}
		) where c = canvas()),

		set(mouseover_area, [_border_size, _border_size, _width+_border_size, _height+_border_size]),
		]
		",

		_spawn_children: "def() ->commands [
			remove_object(_image_widget),

			spawn('image_widget', 0, 0, {
				image: portrait_image,
				image_area: [0, 0, min(400, tex.width)-1, min(498, tex.height)-1],
				draw_width: _width,
				draw_height: _height,
				zorder: zorder-1,
				x: x,
				mid_y: mid_y,
				alpha: alpha,
				luminance: 0.8,
				saturation: 0.8,
			}, [
				set(_image_widget, child),
			]),
		] where tex = query_cache(lib.gui.image_cache, portrait_image, get_texture(tex_key))
		  where tex_key = { image: portrait_image, surface_flags: ['NO_ALPHA_FILTER', 'NO_CACHE']}
		  where portrait_image = 'portraits/card-size/' + _portrait
		",

		_image_widget: { type: "null|obj image_widget" },

		click_handler: { type: "null|function(obj title_option_widget)->commands" },
		right_click_handler: { type: "null|function(obj title_option_widget)->commands" },
		mouse_enter_handler: { type: "null|function(obj title_option_widget)->commands" },
		mouse_leave_handler: { type: "null|function(obj title_option_widget)->commands" },
	},

	on_create: "[_spawn_children(); render()]",
	on_type_updated: "fire_event('create')",

	on_draw: "if(_image_widget, [
		set(_image_widget.mid_x, mid_x),
		set(_image_widget.mid_y, mid_y),
		set(_image_widget.alpha, alpha),
		set(_image_widget.zorder, zorder-1),
		set(_image_widget.clip_area, clip_area),
		set(_image_widget.clip_area_absolute, clip_area_absolute),
	])",

	on_being_added: "if(_image_widget, add_object(_image_widget))",
	on_being_removed: "remove_object(_image_widget)",

	on_click: "if(mouse_button = 1 and click_handler, [
		lib.sound.play_sound(me, 'interface/button-mouseclick'),
		click_handler(me),
		swallow_mouse_event(),
	],
	mouse_button = 3 and right_click_handler, [
		lib.sound.play_sound(me, 'interface/deck-avatar-click'),
		right_click_handler(me),
		swallow_mouse_event(),
	])
	where mouse_button = int<- arg.mouse_button",

	on_mouse_enter: "[

	lib.sound.play_sound(me, 'interface/deck-avatar-mouseover'),
	
	if(mouse_enter_handler, [
		mouse_enter_handler(me),
	], [
		animate(me, {
			halo: 50.0,
		}, {
			duration: 10,
			name: 'select',
			replace_existing: true,
		}),

		if(_image_widget,
			animate(_image_widget, {
				luminance: 1.0,
				saturation: 1.0,
				zoom: 0.1,
			}, {
				duration: 10,
				name: 'select',
				replace_existing: true,
			})
		),
	])

	]",

	on_mouse_leave: "[
	
	if(mouse_leave_handler, [
		mouse_leave_handler(me),
	], [
		schedule(8,
		animate(me, {
			halo: 0.0,
		}, {
			duration: 16,
			name: 'select',
			replace_existing: true,
		})
		),

		if(_image_widget,
			animate(_image_widget, {
				zoom: 0.0,
				luminance: 0.8,
				saturation: 0.8,
			}, {
				duration: 10,
				name: 'select',
				replace_existing: true,
			})
		),

	])
	
	]",

	shader: {
		name: "avatar_render",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		",

		fragment: "
		uniform sampler2D u_anura_tex_map;
		uniform vec4 u_anura_sprite_area;
		uniform float u_alpha;
		uniform float u_halo;
        varying vec2 v_texcoord;
		void main()
		{
			vec4 col = texture2D(u_anura_tex_map, v_texcoord);

			if(col[3] < 0.01) {
				float sprite_area_width = u_anura_sprite_area[2] - u_anura_sprite_area[0];
				float sprite_area_height = u_anura_sprite_area[3] - u_anura_sprite_area[1];
				float dist_x = min(v_texcoord[0] - u_anura_sprite_area[0], u_anura_sprite_area[2] - v_texcoord[0])/sprite_area_width;
				float dist_y = min(v_texcoord[1] - u_anura_sprite_area[1], u_anura_sprite_area[3] - v_texcoord[1])/sprite_area_height;

				gl_FragColor = vec4(1, 1, 1, ((min(dist_x,dist_y)-0.02)*u_halo))*u_alpha;
			} else {
				if(col[3] < 0.1) {
					col[3] = 0.0;
				}
				gl_FragColor = col*u_alpha;
			}
		}
		",

		draw: "[
			set(uniform_commands.u_alpha, parent.alpha/255.0),
			set(uniform_commands.u_halo, parent.halo),
		]",
	},
}
