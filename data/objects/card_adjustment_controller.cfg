{
	id: "card_adjustment_controller",
	prototype: ["citadel_controller_base"],
	is_strict: true,

	properties: {
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		_grid: { type: "null|obj scrollable_pane" },
		grid: "obj scrollable_pane <- _grid",

		cards: { type: "null|[string]" },

		save_changes: "def() ->commands if(_selected_card, [
		add(lib.citadel.card_adjustments, {
			(_selected_card.card_type.internal_id): {
				translate_x: trans_x,
				translate_y: trans_y,
				scale: scaling,

				translate_friend_x: trans_friend_x,
				translate_friend_y: trans_friend_y,
				scale_friend: friend_scaling,

				translate_enemy_x: trans_enemy_x,
				translate_enemy_y: trans_enemy_y,
				scale_enemy: enemy_scaling,

				translate_focus_x: trans_focus_x,
				translate_focus_y: trans_focus_y,
				scale_focus: focus_scaling,

				focus_x: focus_x,
				focus_y: focus_y,
				focus_zoom: focus_zoom,

				hue_shift: _selected_card.hue_shift,
				saturation_multiplier: _selected_card.saturation_multiplier,
				luminance_multiplier: _selected_card.luminance_multiplier,
			} + if(_library_deck_entry != null, _library_deck_entry.adjustments, {})
		})

		where focus_x = decimal<- eval((text_editor_widget<- widgets.focus_x).text)
		where focus_y = decimal<- eval((text_editor_widget<- widgets.focus_y).text)
		where focus_zoom = decimal<- eval((text_editor_widget<- widgets.focus_zoom).text)

		where trans_x = decimal<- eval((text_editor_widget<- widgets.translate_x_entry).text)
		where trans_y = decimal<- eval((text_editor_widget<- widgets.translate_y_entry).text)
		where scaling = decimal<- eval((text_editor_widget<- widgets.scale_entry).text)

		where trans_friend_x = decimal<- eval((text_editor_widget<- widgets.translate_friend_x_entry).text)
		where trans_friend_y = decimal<- eval((text_editor_widget<- widgets.translate_friend_y_entry).text)
		where friend_scaling = decimal<- eval((text_editor_widget<- widgets.scale_friend_entry).text)

		where trans_enemy_x = decimal<- eval((text_editor_widget<- widgets.translate_enemy_x_entry).text)
		where trans_enemy_y = decimal<- eval((text_editor_widget<- widgets.translate_enemy_y_entry).text)
		where enemy_scaling = decimal<- eval((text_editor_widget<- widgets.scale_enemy_entry).text)

		where trans_focus_x = decimal<- eval((text_editor_widget<- widgets.translate_focus_x_entry).text)
		where trans_focus_y = decimal<- eval((text_editor_widget<- widgets.translate_focus_y_entry).text)
		where focus_scaling = decimal<- eval((text_editor_widget<- widgets.scale_focus_entry).text),

		if(_avatar != null,
			write_document('data/avatars.cfg', avatars + {(_avatar.get_avatar()): _avatar.info}, ['game_dir'])
			where avatars = {string -> map}<- get_document('data/avatars.cfg', [enum uncached])
		),

		spawn('label', 0, 0, {
			x: level_width - lib.gui.px(460),
			y: level_height - lib.gui.px(80),
			_font_size: 16,
			_text: ['Saved to cards-adjustments.cfg and avatars.cfg'],
		}, [
			schedule(150, remove_object(child))
		])
		])",

		_dummy_controller: "query_cache(global_cache(1), null, object('citadel_controller', 0, 0, {
			game_server_address: 'localhost',
			game_server_port: 5555,
			session_id: 0,
			_mm_client_state: _mm_client_state,
			return_callback: def(bool a, null|class game_state g) ->commands null,
			_state: construct('game_state', {players: []}),
		}))",

		_avatar: { type: "obj player_avatar|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_avatar_flip: { type: "obj button_controller|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_library_deck_entry: { type: "obj library_deck_entry|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_selected_card: { type: "obj card|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_focus_card: { type: "obj card|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_focus_card_preview: { type: "obj card|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_friend_creature: { type: "obj creature|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_enemy_creature: { type: "obj creature|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_focus_creature: { type: "obj creature|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },

		_hue_slider: { type: "obj slider_widget|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_saturation_slider: { type: "obj slider_widget|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },
		_luminance_slider: { type: "obj slider_widget|null", set: "[if(_data, remove_object(_data)), set(_data, value)]" },

		_slider_labels: { type: "[obj label]", default: [] },

		mouse_x: "int<- level.player.ctrl_mice[0][0]",
		mouse_y: "int<- level.player.ctrl_mice[0][1]",

		_last_drag: { type: "[int,int]|null" },

		mouse_drag_card_start: "def(obj card card) ->commands if(card = _selected_card, [
			log('DRAG START CTRL'),
			set(_last_drag, [mouse_x,mouse_y])
		])",
		mouse_drag_card: "def(obj card card) ->commands if(card = _selected_card,
		if(_last_drag != null and 'right' in level.player.ctrl_mice[0],
		[
			set((text_editor_widget<- widgets.scale_entry).text, str(scaling + dx*0.001)),
			set(_last_drag, [mouse_x,mouse_y]),
		]
		where scaling = decimal<- eval((text_editor_widget<- widgets.scale_entry).text)
		where dx = mouse_x - _last_drag[0]
		where dy = mouse_y - _last_drag[1],
		[
			log(['DRAG']),
			if(_last_drag != null,
				[
					set((text_editor_widget<- widgets.translate_x_entry).text, str(trans_x + dx*0.001)),
					set((text_editor_widget<- widgets.translate_y_entry).text, str(trans_y + dy*0.001)),
				]
				where dx = mouse_x - _last_drag[0]
				where dy = mouse_y - _last_drag[1]
				where trans_x = decimal<- eval((text_editor_widget<- widgets.translate_x_entry).text)
				where trans_y = decimal<- eval((text_editor_widget<- widgets.translate_y_entry).text)
			),
			
			set(_last_drag, [mouse_x,mouse_y]),
		]))",
		mouse_drag_card_end: "def(obj card card) ->commands if(card = _selected_card, [
			set(_last_drag, null)
		])",

		mouse_drag_creature_start: "def(obj creature creature) ->commands [
			set(_last_drag, [mouse_x,mouse_y])
		]",
		mouse_drag_creature: "def(obj creature creature) ->commands [
			set(_last_drag, [mouse_x,mouse_y]),
			if(_last_drag != null and 'right' in level.player.ctrl_mice[0],

			if(creature = _friend_creature,
			[
				set((text_editor_widget<- widgets.scale_friend_entry).text, str(friend_scaling + dx*0.001)),
			],
			creature = _focus_creature,
			[
				set((text_editor_widget<- widgets.scale_focus_entry).text, str(focus_scaling + dx*0.001)),
			],
			[
				set((text_editor_widget<- widgets.scale_enemy_entry).text, str(enemy_scaling + dx*0.001)),
			]),

			if(creature = _friend_creature,
			[
				set((text_editor_widget<- widgets.translate_friend_x_entry).text, str(trans_friend_x + dx*0.001)),
				set((text_editor_widget<- widgets.translate_friend_y_entry).text, str(trans_friend_y + dy*0.001)),
			],
			creature = _focus_creature,
			[
				set((text_editor_widget<- widgets.translate_focus_x_entry).text, str(trans_focus_x + dx*0.001)),
				set((text_editor_widget<- widgets.translate_focus_y_entry).text, str(trans_focus_y + dy*0.001)),
			],
			[
				set((text_editor_widget<- widgets.translate_enemy_x_entry).text, str(trans_enemy_x + dx*0.001)),
				set((text_editor_widget<- widgets.translate_enemy_y_entry).text, str(trans_enemy_y + dy*0.001)),
			])
			)

		where trans_friend_x = decimal<- eval((text_editor_widget<- widgets.translate_friend_x_entry).text)
		where trans_friend_y = decimal<- eval((text_editor_widget<- widgets.translate_friend_y_entry).text)
		where friend_scaling = decimal<- eval((text_editor_widget<- widgets.scale_friend_entry).text)

		where trans_enemy_x = decimal<- eval((text_editor_widget<- widgets.translate_enemy_x_entry).text)
		where trans_enemy_y = decimal<- eval((text_editor_widget<- widgets.translate_enemy_y_entry).text)
		where enemy_scaling = decimal<- eval((text_editor_widget<- widgets.scale_enemy_entry).text)

		where trans_focus_x = decimal<- eval((text_editor_widget<- widgets.translate_focus_x_entry).text)
		where trans_focus_y = decimal<- eval((text_editor_widget<- widgets.translate_focus_y_entry).text)
		where focus_scaling = decimal<- eval((text_editor_widget<- widgets.scale_focus_entry).text)
		]
		where dx = mouse_x - if(_last_drag, _last_drag[0], 0)
		where dy = mouse_y - if(_last_drag, _last_drag[1], 0),
		",

		mouse_drag_creature_end: "def(obj creature creature) ->commands [
			set(_last_drag, null)
		]",

		load_card: "def(string name) ->commands
			card_clicked(object('card', 0, 0, { card_type: lib.citadel.create_card(name), controller: me, card_size: 1.0 }))
		",

		card_clicked: "def(obj card card) ->commands
		if(card = _focus_card,
		execute(me, [
			set((text_editor_widget<- widgets.focus_x).text, str(xpos)),
			set((text_editor_widget<- widgets.focus_y).text, str(ypos)),
		] where xpos = decimal(mouse_x - card.x)/decimal(card.img_w)
		  where ypos = decimal(mouse_y - card.y)/decimal(card.img_h)),
		
		
		card not in [_selected_card, _focus_card, _focus_card_preview],
		execute(me, [

			spawn('card', 0, 0, {
				card_type: card.card_type,
				controller: me,
				in_hand: false,
				allow_drag: false,
				card_size: 2.0,
				mid_x: level_width - lib.gui.px(200),
				mid_y: lib.gui.py(200),
			}, [
				set(_selected_card, child),
			]),

			spawn('card', 0, 0, {
				card_type: card.card_type,
				controller: me,
				in_hand: false,
				allow_drag: false,
				card_size: 1.0,
				hud_alpha: 0.0,
				mid_x: level_width - lib.gui.px(300),
				mid_y: lib.gui.py(500),
			}, [
				set(_focus_card, child),
			]),

			spawn('card', 0, 0, {
				card_type: card.card_type,
				controller: me,
				in_hand: false,
				allow_drag: false,
				card_size: 0.5,
				hud_alpha: 0.0,
				mid_x: level_width - lib.gui.px(100),
				mid_y: lib.gui.py(500),
				img_target: if(adj['focus_x'] is decimal and adj['focus_y'] is decimal, [adj['focus_x'], adj['focus_y']], [0.5,0.5]),
				img_zoom: if(adj['focus_zoom ']is decimal, adj['focus_zoom'], 0.3),
			}, [
				set(_focus_card_preview, child),
			]),

			spawn('library_deck_entry', {
				card: class card<- card.card_type,
				x: lib.gui.py(844),
				mid_y: lib.gui.py(370),
				_editing: true,
			}, [
				set(_library_deck_entry, child)
			]),

			spawn('player_avatar', {
				_nick: '',
				_avatar: string<- card.card_type.portrait,
				_editing: true,
				_top: lib.gui.py(80),
				_edge: lib.gui.py(680),
				_width: lib.gui.py(180),
				_height: lib.gui.py(180),
			}, [
				set(_avatar, child),
			]);

			spawn('button_controller', {
				x: lib.gui.py(744),
				mid_y: lib.gui.py(290),
				text: 'Flip',
				on_click: _avatar.edit_flip asserting _avatar != null,
				button_width: lib.gui.py(60),
				button_height: lib.gui.py(20),
			}, [
				set(_avatar_flip, child),
			]),

			set(_friend_creature, null),
			set(_enemy_creature, null),
			set(_focus_creature, null),

			if(card.card_type.creature_object != null, [

				spawn('creature', {
					creature_object: construct('creature', (map<- card.card_type.creature) + { controller: 1, card_name: card.card_type.name}),
					game_state: construct('game_state', {players: []}),
					hex_height: lib.gui.py(256),
					mid_x: level_width - lib.gui.px(500),
					mid_y: lib.gui.py(200),
					controller: _dummy_controller,
					_is_preview: true,
					mouse_drag_start_handler: me.mouse_drag_creature_start,
					mouse_drag_end_handler: me.mouse_drag_creature_end,
					mouse_drag_handler: me.mouse_drag_creature,
				}, [
					set(_enemy_creature, child),
				]),
				
				spawn('creature', {
					creature_object: construct('creature', (map<- card.card_type.creature) + { controller: 0, card_name: card.card_type.name }),
					game_state: construct('game_state', {players: []}),
					hex_height: lib.gui.py(256),
					mid_x: level_width - lib.gui.px(500),
					mid_y: lib.gui.py(440),
					controller: _dummy_controller,
					_is_preview: true,
					mouse_drag_start_handler: me.mouse_drag_creature_start,
					mouse_drag_end_handler: me.mouse_drag_creature_end,
					mouse_drag_handler: me.mouse_drag_creature,
				}, [
					set(_friend_creature, child),
				]),
				
				spawn('creature', {
					creature_object: construct('creature', (map<- card.card_type.creature) + { controller: 0, card_name: card.card_type.name }),
					game_state: construct('game_state', {players: []}),
					hex_height: lib.gui.py(256),
					mid_x: level_width - lib.gui.px(740),
					mid_y: lib.gui.py(520),
					controller: _dummy_controller,
					hud_alpha: 0.0,
					_is_preview: true,
					mouse_drag_start_handler: me.mouse_drag_creature_start,
					mouse_drag_end_handler: me.mouse_drag_creature_end,
					mouse_drag_handler: me.mouse_drag_creature,
				}, [
					set(_focus_creature, child),
				]),

			]),

			clear_widgets(me),

			set_widgets([

			{
				type: 'text_editor',
				id: 'focus_x',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(250),
				y: level_height - lib.gui.py(200),
				font_size: lib.gui.py(20),
				text: str(adj['focus_x'] or 0.5),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'focus_y',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(250),
				y: level_height - lib.gui.py(160),
				font_size: lib.gui.py(20),
				text: str(adj['focus_y'] or 0.5),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'focus_zoom',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(250),
				y: level_height - lib.gui.py(120),
				font_size: lib.gui.py(20),
				text: str(adj['focus_zoom'] or 0.3),
				on_change: q(fire_event('translate_changed')),
			},
		

			{
				type: 'text_editor',
				id: 'translate_x_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(400),
				y: level_height - lib.gui.py(200),
				font_size: lib.gui.py(20),
				text: str(adj['translate_x'] or 0.0),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'translate_y_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(400),
				y: level_height - lib.gui.py(160),
				font_size: lib.gui.py(20),
				text: str(adj['translate_y'] or 0.0),
				on_change: q(fire_event('translate_changed')),
			},{
				type: 'text_editor',
				id: 'scale_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(400),
				y: level_height - lib.gui.py(120),
				font_size: lib.gui.py(20),
				text: str(adj['scale'] or 1.0),
				on_change: q(fire_event('translate_changed')),
			},

			{
				type: 'text_editor',
				id: 'translate_friend_x_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(550),
				y: level_height - lib.gui.py(200),
				font_size: lib.gui.py(20),
				text: str(adj['translate_friend_x'] or 0.0),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'translate_friend_y_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(550),
				y: level_height - lib.gui.py(160),
				font_size: lib.gui.py(20),
				text: str(adj['translate_friend_y'] or 0.0),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'scale_friend_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(550),
				y: level_height - lib.gui.py(120),
				font_size: lib.gui.py(20),
				text: str(adj['scale_friend'] or 1.0),
				on_change: q(fire_event('translate_changed')),
			},

			{
				type: 'text_editor',
				id: 'translate_enemy_x_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(700),
				y: level_height - lib.gui.py(200),
				font_size: lib.gui.py(20),
				text: str(adj['translate_enemy_x'] or 0.0),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'translate_enemy_y_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(700),
				y: level_height - lib.gui.py(160),
				font_size: lib.gui.py(20),
				text: str(adj['translate_enemy_y'] or 0.0),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'scale_enemy_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(700),
				y: level_height - lib.gui.py(120),
				font_size: lib.gui.py(20),
				text: str(adj['scale_enemy'] or 1.0),
				on_change: q(fire_event('translate_changed')),
			},

			{
				type: 'text_editor',
				id: 'translate_focus_x_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(850),
				y: level_height - lib.gui.py(200),
				font_size: lib.gui.py(20),
				text: str(adj['translate_focus_x'] or 0.0),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'translate_focus_y_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(850),
				y: level_height - lib.gui.py(160),
				font_size: lib.gui.py(20),
				text: str(adj['translate_focus_y'] or 0.0),
				on_change: q(fire_event('translate_changed')),
			}, {
				type: 'text_editor',
				id: 'scale_focus_entry',
				width: lib.gui.px(100),
				x: level_width - lib.gui.px(850),
				y: level_height - lib.gui.py(120),
				font_size: lib.gui.py(20),
				text: str(adj['scale_focus'] or 1.0),
				on_change: q(fire_event('translate_changed')),
			},

			
			])
		];

		map(_slider_labels, remove_object(value));
		
		if(_selected_card, [

			spawn('label', {
				x: lib.gui.px(530),
				y: lib.gui.px(0),
				_font_size: lib.gui.py(16),
				_text: ['hue:'],
			}, [
				add(_slider_labels, [child]),
			]),

			spawn('label', {
				x: lib.gui.px(530),
				y: lib.gui.px(20),
				_font_size: lib.gui.py(16),
				_text: ['sat:'],
			}, [
				add(_slider_labels, [child]),
			]),

			spawn('label', {
				x: lib.gui.px(530),
				y: lib.gui.px(40),
				_font_size: lib.gui.py(16),
				_text: ['lum:'],
			}, [
				add(_slider_labels, [child]),
			]),

			spawn('slider_widget', {
				x: lib.gui.py(640),
				y: lib.gui.py(20),
				slider_width: lib.gui.py(200),
				slider_height: lib.gui.py(20),
				slider_value: _selected_card.hue_shift,
				value_change_handler: me.change_hue,
			}, [
				set(_hue_slider, child),
			]),

			spawn('slider_widget', {
				x: lib.gui.py(640),
				y: lib.gui.py(40),
				slider_width: lib.gui.py(200),
				slider_height: lib.gui.py(20),
				slider_value: _selected_card.saturation_multiplier*0.5,
				value_change_handler: me.change_saturation,
			}, [
				set(_saturation_slider, child),
			]),

			spawn('slider_widget', {
				x: lib.gui.py(640),
				y: lib.gui.py(60),
				slider_width: lib.gui.py(200),
				slider_height: lib.gui.py(20),
				slider_value: _selected_card.luminance_multiplier*0.5,
				value_change_handler: me.change_luminance,
			}, [
				set(_luminance_slider, child),
			]),

		])
		) where adj = lib.citadel.card_adjustments[card.card_type.internal_id] or {}
		);
		
		execute(me, fire_event('translate_changed'))",

		change_hue: "def(decimal r) ->commands
			if(_selected_card, set(_selected_card.hue_shift, r))
		",

		change_saturation: "def(decimal r) ->commands
			if(_selected_card, set(_selected_card.saturation_multiplier, r*2.0))
		",

		change_luminance: "def(decimal r) ->commands
			if(_selected_card, set(_selected_card.luminance_multiplier, r*2.0))
		",

		title_controller: { type: "null|obj title_controller" },
		return_to_titlescreen: "def() ->commands
		if(_return_fn, _return_fn(),
		   title_controller != null,
			add_object(title_controller);
			title_controller.show_devtools()
		)
		",

		_return_fn: { type: "null|function()->commands" },

		spawn_children: "def() ->commands [

			spawn('button_controller', level_width-lib.gui.px(280), level_height-lib.gui.py(60), {
				text: 'Save',
				on_click: me.save_changes,
				trap_escape: true,
			}),

			spawn('button_controller', level_width-lib.gui.px(120), level_height-lib.gui.py(60), {
				text: 'Back',
				on_click: me.return_to_titlescreen,
				trap_escape: true,
			}),

			if(cards = null,
				spawn('combo_controller', {
					x: lib.gui.py(124),
					y: lib.gui.py(10),
					zorder: 5000,
					_width: lib.gui.py(140),
					_height: lib.gui.py(16),
					_font_size: lib.gui.py(12),
					items: map(_card_sets, value.text),
					selected_index: _card_set_index,
					on_change: me.change_card_set_index,
				})
			),

			_create_available_cards(),
		]",

		_card_set_index: { type: "int", default: 0 },
		change_card_set_index: "def(int n) ->commands
			set(_card_set_index, n);
			_create_available_cards()
		",

		_card_sets: {
			type: "[{
				text: string,
				cards: [string],
			}]",

			init: "[{
				text: 'Art complete cards',
				cards: lib.citadel.get_complete_art_cards(),
			}] +

			map(lib.citadel.card_sets, {
				text: sprintf('Cards in %s', value.name),
				cards: lib.citadel.get_cards_in_set(value.id),
			}) +

			[{
				text: 'All cards',
				cards: lib.citadel.get_cards_matching({}),
			}]",
		},

		_cards_pane: { type: "null|obj scrollable_pane" },

		_create_available_cards: "def() ->commands [
			remove_object(_cards_pane),
			spawn('scrollable_pane', 0, 0, {
				x: lib.gui.px(10),
				y: lib.gui.py(30),
				area_width: lib.gui.px(500),
				area_height: lib.gui.py(800),
				focus_override: true,
				use_absolute_screen_coordinates: true,
				elements: map(if(cards != null, cards, _card_sets[_card_set_index].cards),
				{
				xpos: lib.gui.px(10) + lib.gui.px(160)*(index%3),
				ypos: lib.gui.py(10) + lib.gui.py(180)*(index/3),
				obj: object('card', 0, 0, {
					card_type: lib.citadel.create_card(value),
					controller: me,
					in_hand: false,
					allow_drag: false,
					card_size: 1.0,
					show_shadow: false,
					use_absolute_screen_coordinates: true,
				})
				}
				),
			}, [
				if(size(child.elements) = 1,
					; me.card_clicked(obj card<- child.elements[0].obj)
				),

				set(_cards_pane, child),
			]),
		]",
	},

	on_translate_changed: "
	if(widgets.translate_x_entry and widgets.translate_y_entry and widgets.scale_entry, [
		if([trans_x,trans_y,scaling] is [decimal,decimal,decimal] and _selected_card != null, [
			set((anura_shader<- _selected_card.shader).uniform_commands.u_translate_img, [trans_x,trans_y]),
			set((anura_shader<- _selected_card.shader).uniform_commands.u_scale_img, scaling),

			if(_focus_card != null and _focus_card_preview != null and _selected_card != null, [
				set(_focus_card.translate_img, [trans_x,trans_y]),
				set(_focus_card.scale_img, scaling),
				set(_focus_card_preview.translate_img, [trans_x,trans_y]),
				set(_focus_card_preview.scale_img, scaling),
				set(_focus_card_preview.img_zoom, focus_zoom),
				set(_focus_card_preview.img_target, [focus_x,focus_y]),

				set(_selected_card.translate_img, [trans_x,trans_y]),
				set(_selected_card.scale_img, scaling),
			]),

			if(_friend_creature, [
				set(_friend_creature.image_translate_x, trans_x + trans_friend_x),
				set(_friend_creature.image_translate_y, trans_y + trans_friend_y),
				set(_friend_creature.image_scale, scaling*friend_scaling),
			]; fire_event(_friend_creature, 'render')),

			if(_enemy_creature, [
				set(_enemy_creature.image_translate_x, trans_x + trans_enemy_x),
				set(_enemy_creature.image_translate_y, trans_y + trans_enemy_y),
				set(_enemy_creature.image_scale, scaling*enemy_scaling),
			]; fire_event(_enemy_creature, 'render')),

			if(_focus_creature, [
				set(_focus_creature.image_translate_x, trans_x + trans_focus_x),
				set(_focus_creature.image_translate_y, trans_y + trans_focus_y),
				set(_focus_creature.image_scale, scaling*focus_scaling),
			]; fire_event(_focus_creature, 'render')),

		]),
		log(['TRANSLATE', trans_x, trans_y]),

	]
		where focus_x = decimal<- eval((text_editor_widget<- widgets.focus_x).text) or 0.0
		where focus_y = decimal<- eval((text_editor_widget<- widgets.focus_y).text) or 0.0
		where focus_zoom = decimal<- eval((text_editor_widget<- widgets.focus_zoom).text) or 0.0

		where trans_x = decimal<- eval((text_editor_widget<- widgets.translate_x_entry).text) or 0.0
		where trans_y = decimal<- eval((text_editor_widget<- widgets.translate_y_entry).text) or 0.0
		where scaling = decimal<- eval((text_editor_widget<- widgets.scale_entry).text) or 0.0

		where trans_friend_x = decimal<- eval((text_editor_widget<- widgets.translate_friend_x_entry).text) or 0.0
		where trans_friend_y = decimal<- eval((text_editor_widget<- widgets.translate_friend_y_entry).text) or 0.0
		where friend_scaling = decimal<- eval((text_editor_widget<- widgets.scale_friend_entry).text) or 0.0

		where trans_enemy_x = decimal<- eval((text_editor_widget<- widgets.translate_enemy_x_entry).text) or 0.0
		where trans_enemy_y = decimal<- eval((text_editor_widget<- widgets.translate_enemy_y_entry).text) or 0.0
		where enemy_scaling = decimal<- eval((text_editor_widget<- widgets.scale_enemy_entry).text) or 0.0

		where trans_focus_x = decimal<- eval((text_editor_widget<- widgets.translate_focus_x_entry).text) or 0.0
		where trans_focus_y = decimal<- eval((text_editor_widget<- widgets.translate_focus_y_entry).text) or 0.0
		where focus_scaling = decimal<- eval((text_editor_widget<- widgets.scale_focus_entry).text) or 0.0

	)
	",

	on_create: "[
		set(x, 0),
		set(y, 0),
		set(_mm_client_state, construct('mm_client_state', {username: 'blah', session_id: 0, account_info_version: 0, account_info: lib.citadel.construct_account({collection: []})})),
		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}) ;
		spawn_children()
	]",

	on_window_resize: "[
		set(level.dimensions, [0,0,new_width,new_height]),
		set(lib.gui.screen_width, new_width),
		set(lib.gui.screen_height, new_height),
	]
	where new_width = max(int<- arg.width,800)-1
	where new_height = max(int<- arg.height,600)-1
	",

	on_being_removed: "map(spawned_children, remove_object(value))",

}
