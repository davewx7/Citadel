{
	id: "scenario_editor",
	is_strict: true,
	hidden_in_game: true,

	properties: {
		title_controller: { type: "obj title_controller" },
		controller: { type: "obj campaign_dialog_editor" },

		encounter: { type: "CampaignDialogNode" },
		scenario: { type: "Scenario" },

		build_scenario: "def()->Scenario (Scenario<- (if(encounter.map != null, lib.maps.get_map(encounter.map), {}) + scenario))",

		_avatar: { type: "[custom_obj]", default: [] },

		save_fn: { type: "function()->commands" },

		spawn_avatar: "def() ->commands
			map(_avatar, remove_object(value));

			spawn('player_avatar', {
				mid_x: lib.gui.py(120),
				mid_y: lib.gui.py(120),
				_avatar: scenario.avatar,
				is_enemy: true,
				_width: lib.gui.py(186),
				_height: lib.gui.py(186),
				_nick: scenario.enemy_name,
				
			}, [
				add(_avatar, [child]),
			]);

			spawn('text_entry', {
				mid_x: lib.gui.py(120),
				mid_y: lib.gui.py(240),
				_width: lib.gui.py(140),
				text: scenario.enemy_name,
				default_text: 'Opponent',
				_on_change: me.set_enemy_name,
			}, [
				add(_avatar, [child]),
			])
		",

		set_avatar: "def(string image) ->commands
		if(m != null, [
			set(scenario.avatar, string<- m[1]);
			spawn_avatar();
			save_fn()
		])
			where m = regex_match(image, '(.*portraits/)(.*png)')
		",

		set_enemy_name: "def() ->commands
		execute(me,
			set(scenario.enemy_name, find_or_die(level.chars, value is obj text_entry and value.default_text = 'Opponent').text);
			save_fn()
		)
		",

		_citadel_controller: { type: "null|obj citadel_controller" },
		citadel_controller: "obj citadel_controller<- _citadel_controller",

		create_game_state: "def() ->class game_state
			construct('game_state', {
				players: [],
				starting_units: scene.starting_units,
			} + if(scene.map_dimensions is [int,int], {
				map_dimensions: scene.map_dimensions,
				lanes: scene.map_lanes,
			}, {}) + if(scene.trophies is [[int]], {
				trophies: scene.trophies,
			}, {}))
			where scene = build_scenario()
		",

		tile_clicked: "def(obj tile t) ->commands
		execute(me,
			if(_selected_land != null, [
				set(scenario.starting_units, filtered_units + [{ card_name: _selected_land.name, loc: t.loc }])
				where filtered_units = filter(starting_units, value.loc != t.loc)
				where starting_units = [map]<- deep_copy(build_scenario().starting_units);

				save_fn();
				spawn_map()
			]
			)
		)
		",

		set_land_controller: "def([int,int] loc, int controller) ->commands
		execute(me, [
		[
			if(unit, set(unit.controller, controller)),
			set(scenario.starting_units, starting_units),
		]
			where unit = find(starting_units, value['loc'] = loc)
			where starting_units = [map]<- deep_copy(build_scenario().starting_units);

			save_fn();
			spawn_map()

		])
		",

		remove_land: "def([int,int] loc) ->commands
		execute(me, [
		if(lands != null, [
			set(scenario.starting_units, filter(lands, value['loc'] != loc))
		])
			where lands = build_scenario().starting_units;

		save_fn();
		spawn_map()
		])
		",

		tile_right_clicked: "def(obj tile t) ->commands
		if(c != null,
			spawn('context_menu', {
				x: lib.gui.mouse_pos(level).x,
				y: lib.gui.mouse_pos(level).y,
				color_scheme: lib.citadel.library_color_scheme,
				items:

				[{
					text: 'No Owner',
					on_select: def()->commands me.set_land_controller(t.loc, -1),
				}, {
					text: 'Player Owns',
					on_select: def()->commands me.set_land_controller(t.loc, 0),
				}, {
					text: 'CPU Owns',
					on_select: def()->commands me.set_land_controller(t.loc, 1),
				}, {
					text: 'Clear',
					on_select: def()->commands me.remove_land(t.loc),
				}],
			})
		)
		
		where c = find(citadel_controller.state.lands, value.loc = t.loc)
		",

		_map_widgets: { type: "[custom_obj]", default: [] },

		spawn_map: "def() ->commands [
			map(_map_widgets, remove_object(value));
			set(_map_widgets, []);

			if(_citadel_controller, map(_citadel_controller.spawned_children, remove_object(value))),

			set(_citadel_controller, object('citadel_controller', {
				game_server_address: '',
				game_server_port: 0,
				session_id: 0,
				game_created: true,
				_mm_client_state: title_controller.client_state,
				return_callback: (def(bool a, null|class game_state b)->commands null),
				_state: create_game_state(),
				_board_dim_override: [lib.gui.py(500), lib.gui.py(400)],
				_board_center_override: [lib.gui.py(620), lib.gui.py(500)],
			}));
			citadel_controller.spawn_tiles(create_game_state());

			[set(t.click_handler, me.tile_clicked) | t <- level.chars, t is obj tile];
			[set(t.right_click_handler, me.tile_right_clicked) | t <- level.chars, t is obj tile];

			map(citadel_controller.state.lands,
				if(tile != null,
					spawn('creature', {
						mid_x: tile.mid_x,
						mid_y: tile.mid_y,
						zorder: tile.zorder + 1,
						controller: citadel_controller,
						game_state: citadel_controller.state,
						facing: 1,
						creature_object: value,
						hex_height: citadel_controller.tile_height,
					}, [
						add(_map_widgets, [child]),
					])
				)
				where tile = find(level.chars, value is obj tile and value.loc = context.value.loc)
			)

		]",

		spawn_controls: "def() ->commands [
			spawn('button_controller', {
				x: lib.gui.py(400),
				y: lib.gui.py(200),
				_font_size: lib.gui.py(18),
				button_width: lib.gui.py(80),
				button_height: lib.gui.py(24),
				zorder: zorder+1,
				color_scheme: lib.citadel.library_color_scheme,

				text: 'Edit Deck',
				on_click: me.edit_deck,
			}),

			spawn('label', {
				x: lib.gui.py(740),
				y: lib.gui.py(200),
				_font_size: lib.gui.py(14),
				_text: [sprintf('played: %d', size(games)),
				        sprintf('win rate: %d%%', (size(filter(games, value.victory))*100)/size(games))],
			}) where games = filter(lib.stats.games, value.campaign_node_id != null and value.campaign_node_id = encounter.id),

			spawn('combo_controller', {
				x: lib.gui.py(400),
				y: lib.gui.py(260),
				items: lib.maps.map_names,
				selected_index: index(lib.maps.map_names, encounter.map),
				on_change: me.set_map,
				_width: lib.gui.py(120),
				_height: lib.gui.py(16),
				zorder: zorder+1,
				_font_size: lib.gui.py(12),
				color_scheme: lib.citadel.library_color_scheme,
			}),

			spawn('scrollable_pane', {
				x: lib.gui.py(10),
				y: lib.gui.py(300),
				area_width: lib.gui.py(300),
				area_height: lib.gui.py(500),
				focus_on_mouseover: true,
				elements: map(filter(card_objs, value.is_land),
				{
					xpos: ncol*lib.gui.py(90),
					ypos: nrow*lib.gui.py(90),
					obj: object('card', {
						card_type: value,
						in_hand: false,
						allow_drag: false,
						card_size: 0.5,
						show_shadow: false,
						mouse_enter_handler: bind(me.mouseover_card, value),
						mouse_leave_handler: bind(me.mouseoff_card, value),
						click_handler: bind(me.select_land, value),
					}),
				}
				where nrow = index/3
				where ncol = index%3
				),
			}) where card_objs = map(['Village'] + lib.citadel.get_cards_in_set('core'), lib.citadel.create_card(value))

		]",

		_selected_land: { type: "null|class card_base" },

		select_land: "def(class card_base c) ->commands
		[
			set(_selected_land, c),
		]
			where obj = find(level.chars, value is obj card and value.card_type = c)
		",

		_card_tooltip: { type: "null|obj card" },

		mouseover_card: "def(class card_base card) ->commands
		execute(me, [
			remove_object(_card_tooltip);
			set(_card_tooltip, null);

			spawn('card', {
				x: lib.gui.mouse_pos(level).x,
				mid_y: lib.gui.mouse_pos(level).y,
				card_type: card,
				in_hand: false,
				allow_drag: false,
				card_size: 3.0,
				show_shadow: true,
				zorder: 1000,
			}, [
				set(_card_tooltip, child),
			])
		])
		",

		mouseoff_card: "def(class card_base card) ->commands
		execute(me, [
			remove_object(_card_tooltip);
			set(_card_tooltip, null)
		])
		",

		set_map: "def(int n) ->commands
		if(n >= 0 and n < size(lib.maps.map_names),
			execute(me, [
				set(encounter.map, lib.maps.map_names[n]);
				set(scenario.starting_units, null|[map]<- lib.maps.get_map(string<- encounter.map)['starting_units']);
				save_fn();
				spawn_map()
			])
		)",

		edit_deck: "def() ->commands
			[remove_object(c) | c <- level.chars, c != title_controller];
			add(title_controller.account_info.decks, {
				'AI Deck': {
					cards: [string]<- (map<- scenario.bot_args)['deck_list'],
					name: 'AI Deck',
				},
			});

			title_controller.enter_library(me, 'AI Deck', me.finish_editing_deck, true)
		",

		finish_editing_deck: "def() ->commands
			[remove_object(c) | c <- level.chars, c != title_controller];

			add_object(title_controller);

			set(a['deck_list'], (Deck<- title_controller.account_info.decks['AI Deck']).cards)
			where a = map<- scenario.bot_args;

			set(title_controller.account_info.decks, remove_from_map(title_controller.account_info.decks, 'AI Deck'));

			save_fn();

			controller.return_from_test()
		",
	},

	events: {

		create: "
			spawn_controls();
			spawn_avatar();
			spawn_map()
		",

		being_removed: "[
			if(_citadel_controller, map(_citadel_controller.spawned_children, remove_object(value))),
			map(spawned_children, remove_object(value)),
		]",
	},
}
