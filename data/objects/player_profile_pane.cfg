{
	id: "player_profile_pane",
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },

		_width: "int :: lib.gui.py(380)",
		_height: "int :: lib.gui.py(560)",

		_avatar: { type: "null|obj player_avatar" },
		_combo: { type: "null|obj combo_label_controller" },

		_adjust_gold_display: { type: "int", default: 0 },
		_adjust_level_display: { type: "decimal", default: 0 },

		_level: "decimal :: (title_controller.account_info.level - _adjust_level_display)",

		render: "def() ->commands [
		set(animation, lib.gui.render_frame(c, ww, hh,
		[
			c.set_operator('SOURCE'),
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.1,0.1,0.1,0.5),
			c.fill(),

			c.set_operator('OVER'),
			lib.gui.main_menu_gui_border(c),
			c.rectangle(0,0,ww,hh),
			c.stroke(),

			c.move_to(0,lib.gui.py(28)),
			c.line_to(ww,lib.gui.py(28)),
			c.stroke(),

			c.set_source_rgba(0,1,1,1),

			c.set_line_width(lib.gui.dpy(1.6)),

			[

			c.move_to(lib.gui.py(170), lib.gui.py(70)),
			c.line_to(level_mix, lib.gui.py(70)),
			c.stroke(),

			c.set_source_rgba(1,1,1,1),
			c.move_to(level_mix, lib.gui.py(70)),
			c.line_to(ww - lib.gui.py(20), lib.gui.py(70)),
			c.stroke(),
			] where level_mix = mix(lib.gui.py(170), ww - lib.gui.py(20), _level - int(_level)),

			c.set_source_rgba(1,1,1,1),

			map(fragments, [
				c.save(),
				c.translate(lib.gui.py(8), lib.gui.py(7)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='14'>Player Profile</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.gui.py(170), lib.gui.py(40)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size=') + user_name_font_size + q('>) + lib.chat.nick_display(title_controller.username) + q(</font>)
			, { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) })
			where user_name_font_size = string :: if (size(title_controller.username) < 13, '22', '18')
			,


			map(fragments, [
				c.save(),
				c.translate(ww - lib.gui.py(24) - sum(map(fragments, value.width)), lib.gui.py(44)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='16'>Level ) + str(int(_level)) + q(</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.gui.py(200), lib.gui.py(80)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='16'>Gold: ) + str((title_controller.account_info.gold or 0) - _adjust_gold_display) + q(</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(ww - lib.gui.py(26) - sum(map(fragments, value.width)), lib.gui.py(80)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(sprintf(q(<font size='16'>Packs: %d</font>), num_packs), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) })
			where num_packs = sum(map(title_controller.account_info.packs, value)),


			map(fragments, [
				c.save(),
				c.translate(lib.gui.py(170), lib.gui.py(110)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='14'>Matches: ) + str(title_controller.account_info.games_played) + q(</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.gui.py(260), lib.gui.py(110)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='14'>Wins: ) + str(title_controller.account_info.games_won) + q(</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) }),

			
			if(title_controller.account_info.first_match != null,
				map(fragments, [
					c.save(),
					c.translate(lib.gui.py(170), lib.gui.py(130)),
					value.path,
					c.fill(),
					c.restore(),
				])

				where fragments = c.markup_text(q(<font size='14'>First Match: ) + format('#{4}/#{2}/#{2}', [first_match.year, first_match.month, first_match.day]) + q(</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) })
				where first_match = time(title_controller.account_info.first_match)
			),

			map(fragments, [
				c.save(),
				c.translate(lib.gui.py(20), lib.gui.py(256)),
				value.path,
				c.fill(),
				c.restore(),
			])
			where fragments = c.markup_text(q(<font size='18' weight='65'>Equipped Deck</font>), { width: lib.gui.py(1000), scale: lib.gui.dpy(1.0) })
		]))
			where ww = _width
			where hh = _height
			where c = canvas()
		]",

		dummy_handler: "def(int) ->commands []",

		create_objects: "def() ->commands [
			remove_object(_avatar),
			spawn('player_avatar', {
				 player_num: 0,
				 _avatar: title_controller.account_info.avatar,
				 zorder: zorder+10,
				 _top: y + lib.gui.py(36),
				 _edge: lib.gui.py(1232),
				 _width: lib.gui.py(140),
				 _height: lib.gui.py(140),
				 _nick: '',
				 facing: 1,
				 highlight: true,
				 current_desaturation: 0.0,
				 target_desaturation: 0.0,
			}, [
				set(_avatar, child),
			]),

			if(not title_controller.offline_mode,
				spawn('combo_label_controller', {
					xpos: x + lib.gui.py(100),
					ypos: y + lib.gui.py(240),
					halign: 'left',
					items: ['Recent Games'  /*, 'Stats'*/] + if(num_packs > 0, ['Open Packs'], ['Buy Packs']),
						selected_index: -1,
					_font_size: lib.gui.py(14),
					click_handler: (def(int n)->commands
				
						if(n = 0, title_controller.show_recent_games());
						if(n = 1, title_controller.open_packs());
						if(_combo != null, set(_combo.selected_index, -1))),
					zorder: zorder+10,
				}, [
					set(_combo, child),
				])
			),
		]
		where num_packs = sum(map(title_controller.account_info.packs, value))
		",
	},

	on_create: "render(); create_objects()",

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_type_updated: "fire_event('create')",
}
