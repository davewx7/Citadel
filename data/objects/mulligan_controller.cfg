{
id: "mulligan_controller",
is_human: false,
is_strict: true,
hidden_in_game: true,
always_active: true,
zorder: 20000,

properties: {
	_mm: { type: "obj matchmaking_base" },
	_controller: { type: "obj citadel_controller" },

	level_width: "int :: level.dimensions[2]",
	level_height: "int :: level.dimensions[3]",

	children: { type: "[obj card]", default: [] },

	game: { type: "class game_state" },

	update: "def(class game_state game) ->commands
		null
	",

	_blur_controller: { type: "null|obj blur_controller" },
	_confirm_button: { type: "null|obj button_controller" },

	_cards: { type: "[obj card]", default: [] },
	_discard_cards: { type: "[obj card]", default: [] },

	_confirm: "def() ->commands
	execute(me,
	[
		map(_discard_labels, remove_object(value)),
		set(_discard_labels, []),
		remove_object(_confirm_button),
		set(_confirm_button, null),
		if(_blur_controller != null,
			animate(_blur_controller, {
				blur_amount: 0.0,
			}, {
				duration: 10,
			})
		),
		_controller.confirm_mulligan(_discard_cards),
	])
	",

	activate: "def() ->commands
		if(_controller.animation_time_remaining > 0,
		  schedule(_controller.animation_time_remaining, ; activate()),
		 [
		 	set(_active, true),
			spawn('blur_controller', { end_zorder: 100}, [set(me._blur_controller, child)]),

			spawn('label', {
				_text: [if(_controller.observer, sprintf('%s is selecting which cards to replace...', _controller.state.players[_controller.state.nplayer].name), 'Select which cards to replace')],
				_bg_color: [0,0,0,0.6],
				_font_size: lib.gui.py(32),
				mid_x: level_width/2,
				mid_y: int(level_height*0.25),
				zorder: 20000,
			}),

			set(_controller.in_background, true),

			set(_cards, filter(level.chars, value is obj card and value.card_type in _controller.myplayer.hand));
			map(_cards, [
				set(value.is_choice, true),
				set(value.choice_index, index),
				add(value.zorder, 20000),
				set(value.is_castable, false),
				value.hide_halo(),
				set(value.effect_alpha, 1.0),
			]);

			[set(c.paused, true) | c <- level.chars, c != me, c is obj creature],

			if(_controller.observer = false,
				spawn('button_controller', {
					x: int(level_width*0.5) - lib.gui.py(160)/2,
					mid_y: int(level_height*0.8),
					button_width: lib.gui.py(160),
					text: 'Confirm',
					has_focus: true,
					_font_size: lib.gui.py(28),
					on_click: me._confirm,
					zorder: 20000,
				}, [
					set(_confirm_button, child),
				])
			)
		 ]
		  )
	",

	_active: { type: "bool", default: false },

	card_clicked: "def(int ncard) ->commands
	if(ncard >= 0 and ncard < size(_cards) and _controller.observer = false,

	if(card in _discard_cards,
	[
		set(_discard_cards, filter(_discard_cards, value != card)),
		set(card.image_grayscale, 0.0),
		set(card.alpha, 255),
		lib.sound.play_sound(me, 'interface/mulligan-cancel-discard'),
	],
	[
		add(_discard_cards, [card]),
		set(card.image_grayscale, 1.0),
		set(card.alpha, 196),
		lib.sound.play_sound(me, 'interface/mulligan-discard'),
	]) where card = _cards[ncard]
	);

	update_discard_labels()
	",

	_discard_labels: { type: "[obj label]", default: [] },

	update_discard_labels: "def() ->commands
		map(_discard_labels, remove_object(value));
		set(_discard_labels, []);
		map(_discard_cards, [
			spawn('label', {
				mid_x: value.mid_x,
				mid_y: value.y2 + lib.gui.py(24),
				_text: ['Replace'],
				_bg_color: [0,0,0,0.6],
				_font_size: lib.gui.py(24),
				zorder: 20000,
			}, [
				add(_discard_labels, [child]),
			])
		])
	",
},


on_create: "[
	schedule(5, ; activate())
]",

on_process: "if(_active, [
	_mm.process_matchmaking_connection(),
	_controller.process_connection(),
])",

on_being_removed: "[
	[set(c.paused, false) | c <- level.chars, c.paused = true],
	map(_discard_labels, remove_object(value)),
	map(_cards, [
		set(value.is_choice, false),
		set(value.choice_index, null),
		add(value.zorder, -20000),
	]),
	set(_controller.in_background, false),
	map(spawned_children, remove_object(value)),
]",

}
