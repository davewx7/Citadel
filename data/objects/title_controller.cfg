{
	id: "title_controller",
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_level: true,
    use_absolute_screen_coordinates: true,

	is_strict: true,

	consts: {
		BUTTON_WIDTH: 220,
		BUTTON_HEIGHT: 35,
	},
	
    properties: {
		_mytest: { type: "[int]", default: [] },

		_client: { type: "object|null", default: null },
		_session_id: { type: "int", default: -1 },
		_bot_types: { type: "[string]", default: [] },

		_bot1: { type: "string|null" },
		_bot2: { type: "string|null" },

		_bvb_menu_shown: { type: "bool", default: false },
		_bvb_match: { type: "bool", default: false },
		_bvb_button_enabled: { type: "bool", default: false },

		_bvb_game_id: { type: "int", default: -1 },

		_bot1_session_id: { type: "int", default: -1 },
		_bot2_session_id: { type: "int", default: -1 },

		_obs_session_id: {type: "int", default: -1 },

		// Map of <deck_name>:{name:<deck_name>, cards:[(list of cards], schools:[(list of schools)]}
		_user_decks: { type: "{string -> class deck}", default: {} },
		_selected_deck: { type: "string", default: "" },
		_deck_list: { type: "[string]", default: [] },

		// List of <deck_name> that correspond to the selections in the deck_grid widget.
		deck_list: { type: "[string]", default: [] },

		font: "string<- 'RobotoCondensed-Regular'",
		font_color: "string<- 'antique_white'",

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",
		
		get_server_info: "commands<- [tbs_send(cl, {type: 'get_server_info'}), set(me._client, cl)] where cl = tbs_client('localhost', 23456, -1)",
		
		// We need to schedule removal of the bot vs. bot menu due to a nasty internal bug with processing and iterator invalidation.
		remove_bot_vs_bot_menu: "commands<- [
			set(me._bvb_menu_shown, false),
			set(me.widgets.bvb_dlg, null)
		]",
		
		do_fast_play_send: "def(int sid, object cl, int nopponent) ->commands [
			set(me._session_id, sid),
			set(me._bvb_match, false),
			tbs_send(cl, {type: 'create_game', game_type: 'citadel', users: [{user: USERNAME or 'a', session_id: sid}, {user: 'b', bot_type: 'evolutionary', args: {rules: 'evo/evolution' + nopponent + '.cfg'}, bot: true, session_id: 1d30000}]})
		]",
		
		do_fast_play: "def(int nopponent) ->commands if(me._client, 
			do_fast_play_send(1d30000, me._client, nopponent), 
			[set(me._client, cl), do_fast_play_send(1d30000, cl, nopponent)] where cl = tbs_client('localhost', 23456)
		)",
		
		error_text: "def(string txt) ->commands set(error_text_widget.text, txt) where error_text_widget = object<- me.widgets.error_text",
		
		do_bot_vs_bot: "def(int wwidth, int hheight) ->commands
			set(me.widgets.child, {				
				type: 'dialog',
				id: 'bvb_dlg',
				background_alpha: 255,
				background_frame: 'empty_window',
				zorder: 1100,
				rect:[wwidth/4, hheight/4, wwidth/2, hheight/2],
				cursor: [20, 20],
				children:[
					{
						type: 'grid',
						columns: 2,
						column_alignments: 'center',
						column_widths: wwidth/4 - 40,
						children: [
							{
								type: 'grid',
								columns: 1,
								column_widths: wwidth/4 - 40,
								row_height: 30,
								allow_selection: true,
								default_select: 0,
								draw_selection_highlighted: true,
								max_height: hheight/2-100,
								allow_draw_highlight: true,
								column_alignments: 'centre',
								children: map(me._bot_types, {type: 'label', size: 16, text: value, font: font, color: font_color}),
								on_select: 'if(selection >= 0, [set(me._bot1, me._bot_types[selection]), debug(q(bot1 = ), me._bot_types[selection])])',
							},
							{
								type: 'grid',
								columns: 1,
								column_widths: wwidth/4 - 40,
								row_height: 30,
								allow_selection: true,
								default_select: 0,
								draw_selection_highlighted: true,
								max_height: hheight/2-100,
								allow_draw_highlight: true,
								column_alignments: 'centre',
								children: map(me._bot_types, {type: 'label', size: 16, text: value, font: font, color: font_color}),
								on_select: 'if(selection >= 0, [set(me._bot2, me._bot_types[selection]), debug(q(bot2 = ), me._bot_types[selection])])',
							},							
						],
					},
					{
						type: 'grid',
						columns: 2,
						column_alignments: 'center',
						column_widths: wwidth/4 - 40,
						children: [
							{
								type: 'button', 
								label:{type: 'label', size: 16, text: 'Cancel', font: font, color: font_color}, 
								wh:[150, BUTTON_HEIGHT], 
								on_click: 'schedule(1, remove_bot_vs_bot_menu)' 
							},
							{
								type: 'button', 
								label:{type: 'label', size: 16, text: 'Go!', font: font, color: font_color}, 
								wh:[150, BUTTON_HEIGHT], 
								on_click: '[schedule(1, remove_bot_vs_bot_menu), do_play_bots]' 
							},
						],
					},
				],
			})
		",
		
		do_observe: "def(int bvb_game_id, int obs_session_id) ->commands [
			tbs_send(me._client, {type: 'observe_game', user: 'Observer', session_id: obs_session_id, game_id: bvb_game_id}),
			set(me._obs_session_id, obs_session_id)
		] asserting me._client",
		
		do_play_bots_send: "def(object cl) ->commands [
			tbs_send(cl, {
				type: 'create_game', 
				game_type: 'citadel', 
				users: [
					{ user: 'FightBot-A', bot: true, bot_type: me._bot1, session_id: b1id }, 
					{ user: 'FightBot-B', bot: true, bot_type: me._bot2, session_id: b2id }
				]
			}),
			set(me._bvb_match, true),
			set(me._bot1_session_id, b1id),
			set(me._bot2_session_id, b2id),
		] where b1id = 1d30000, b2id = 1d30000",
		
		do_play_bots: "commands<- if(me._bot1 and me._bot2, 
			if(me._client, 
				do_play_bots_send(me._client), 
				[set(me._client, cl), do_play_bots_send(cl)] where cl = tbs_client('localhost', 23456)),
			error_text('Need to choose what bots to use')
		)",
		
		draw_menu: "def(int wwidth, int hheight, {string -> class deck} user_decks) ->commands
		[set(me.widgets, {
			type: 'dialog',
			id: 'background_dlg',
			background_alpha: 255,
			rect: [0, 0, wwidth, hheight],
			children: [
				{ type: 'image', image: 'title2.png', image_width: calc_w, image_height:350, x: (wwidth-calc_w)/2, y: 20 },
				{
					type: 'dialog',
					id: 'dlg',
					background_frame: 'empty_window',
					background_alpha: 20,
					rect: [wwidth/16, hheight/2+40, 14*wwidth/16, hheight/2-50],
					cursor: [35, 20],
					children: [
						{
							type: 'grid',
							columns: 2,
							column_widths: 6*wwidth/16,
							column_alignments: 'center',
							children: [
								{
									type: 'grid',
									columns: 1,
									column_widths: 6*wwidth/16,
									column_alignments: 'center',
									children: [
										{type: 'button', id:'campaign_button', label:{type: 'label', size: 16, text: 'Play Campaign (single player)', font: font, color: font_color}, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: def() fire_event('do_campaign_game') },
										{type: 'button', id:'puzzle_button', label:{type: 'label', size: 16, text: 'Play Puzzle (single player)', font: font, color: font_color}, enabled: false, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: 'debug(q(clicked play puzzle))' },
										{type: 'button', id:'mplobby_button', label:{type: 'label', size: 16, text: 'Play Multiplayer Game', font: font, color: font_color}, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: def() fire_event('do_mp_lobby') },
										{type: 'button', id:'fastplay_button', label:{type: 'label', size: 16, text: 'Play vs AI Goblins', font: font, color: font_color}, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: 'do_fast_play(50)' },
										{type: 'button', id:'fastplay_button', label:{type: 'label', size: 16, text: 'Play vs AI Fanatics', font: font, color: font_color}, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: 'do_fast_play(150)' },
										{type: 'button', id:'fastplay_button', label:{type: 'label', size: 16, text: 'Play vs AI Vampires', font: font, color: font_color}, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: 'do_fast_play(250)' },
									],
								},
								{
									type: 'grid',
									columns: 1,
									column_widths: 6*wwidth/16,
									column_alignments: 'center',
									children: [
										{type: 'button', id:'leveleditor_button', label:{type: 'label', size: 16, text: 'Level Editor', font: font, color: font_color}, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: 'fire_event(q(do_leveleditor))' },
										{type: 'button', id:'deckbuilder_button', label:{type: 'label', size: 16, text: 'Deck Builder', font: font, color: font_color}, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: 'fire_event(q(do_deckbuilder))' },
										{type: 'button', id:'botvsbot_button', label:{type: 'label', size: 16, text: 'Bot vs. Bot', font: font, color: font_color}, enabled: me._bvb_button_enabled, wh:[BUTTON_WIDTH, BUTTON_HEIGHT], on_click: '[do_bot_vs_bot(SCREEN_WIDTH, SCREEN_HEIGHT), set(me._bvb_menu_shown, true)]' },
										{type: 'label', text:''},
									],
								},
							],
						},
						{
							type: 'grid', 
							columns: 1,
							row_height: 20,
							column_widths: 12*wwidth/16,
							column_alignments: 'left',
							children: [
								{type: 'label', id: 'error_text', size:20, text: '', font: 'RobotoCondensed-Bold', color: 'red'},
							],
						},
						deck_grid_widget
					],
				},
			],
		}), set(deck_grid_widget.x, level_width/4)] where calc_w = if(wwidth > 750, 750, wwidth), deck_grid_widget = make_deck_grid(user_decks)",
		
		make_school_icon: "def(int school) ->object switch(school, 
			// Colorless -- mana only
			0, widget(me, {type: 'label', text:'Mana', font: font, color: font_color, size: 14}),
			// gold
			1, widget(me, {type:'image', image:'magic-icons.png', area:[3,3,18,18]}),
			// blood
			2, widget(me, {type:'image', image:'magic-icons.png', area:[20,3,35,18]}),
			// food
			3, widget(me, {type:'image', image:'magic-icons.png', area:[37,3,52,18]}),
			// scrolls
			4, widget(me, {type:'image', image:'magic-icons.png', area:[54,3,69,18]}),
			// faith
			5, widget(me, {type:'image', image:'magic-icons.png', area:[71,3,86,18]})) 
			asserting school >= 0 and school <= 5",
			
		make_deck_list: "def({string -> class deck} user_decks) ->[object]
		 map(user_decks, widget(me, {
			type: 'grid', 
			columns: 2,
			column_alignments: ['left', 'right'],
			column_widths: level_width/4,
			children: [{
				type:'label', 
				font:font, 
				size:16, 
				color:font_color, 
				text:value.name
			}, {
				type: 'grid',
				columns: size(value.schools),				
				children: map([int]<- value.schools, make_school_icon(value)),
			}],
		}))",
		
		make_deck_grid: "def({string -> class deck} user_decks) ->object
		widget(me, {
			type: 'grid', 
			allow_selection: true,
			draw_selection_highlighted: true,
			id: 'deck_grid',
			columns: 1,
			column_widths: level_width/2,
			max_height: 100,
			default_select: if(size(user_decks), 0, -1),
			children: make_deck_list(user_decks),
			on_select: def(selection) if(selection >= 0 and me._user_decks, set(me._selected_deck, me._deck_list[selection])),
		})",

		botvsbot_button: "widget<- me.widgets.botvsbot_button",
	
    },
      
    on_create: "[ _mytest.a,
		//construct all cards so we will error if there are any problems.
		map(['blood', 'colorless', 'food', 'scrolls', 'faith', 'gold'],
		  map(keys(lib.json.get_document_map(fname)),
		    edit_and_continue(
			  construct('card', lib.json.get_document_map(fname)[value]), fname)
		     ) where fname = 'data/cards-' + value + '.cfg') and null,

		schedule(5, [get_server_info]),
		  [draw_menu(SCREEN_WIDTH, SCREEN_HEIGHT, parsed_decks), set(me._user_decks, parsed_decks), set(me._deck_list, map(parsed_decks, key)), if(parsed_decks, set(me._selected_deck, map(parsed_decks, key)[0]))]
		  where parsed_decks = fold(map(user_decks, {(string<- key): (Deck <- value)}), a+b, {}),
		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
	] where user_decks = get_document('user-decks.cfg',['null_on_failure','user_preferences_dir']) or {}",
	
	on_window_resize: "[
		draw_menu(width, height, me._user_decks), 
		if(me._bvb_menu_shown, do_bot_vs_bot(width, height)),
		set(level.dimensions, [0,0,width,height]),
	]
	  where width = int :: arg.width, height = int :: arg.height",
	
	on_process: "if(me._client, tbs_process(me._client))",
    
    on_connection_error: "error_text('CONNECTION ERROR: ' + (string<- arg.error))",
    
	on_connection_success: "error_text('')",

	on_message_received: "[debug(message.type, message), switch(message.type,
		'game_created', 
		if(me._bvb_match, 
			[do_observe(int<- message.bvb_game_id, 1d3000), set(me._bvb_game_id, int<- message.game_id)],
			[
			debug('SETTING DECK: ' + me._selected_deck),
			set(playable.selected_deck, me._selected_deck),
			teleport('level1.cfg', '', 'fade', playable)
			]
			   where playable = object_playable('citadel_controller', 336, 372, 0, {game_server_address: 'localhost', game_server_port: 23456, session_id: me._session_id, game_created: true, selected_deck: me._selected_deck})
		),
		'server_info',
		[if(message.bot_types, set(me._bot_types, [string]<- message.bot_types)), set(botvsbot_button.disabled, false), set(me._bvb_button_enabled, true)],
		'observing_game',
		tbs_send(cl, {'start_game'}) where cl = tbs_client('localhost', 23456, me._bot1_session_id), 
		error_text('UNKNOWN MESSAGE RECIEVED: ' + message.type)
	)] where message = map<- arg.message",
	
	on_do_deckbuilder: "teleport('deck-builder.cfg', '', 'fade', playable) 
		where playable = object_playable('deck_builder_controller', 0, 0, 0)
	",
	
//	on_do_leveleditor: "teleport('level-editor.cfg', '', 'fade', playable) 
//		where playable = object_playable('level_editor_controller', 0, 0, 0)
//	",
	
//	on_do_mp_lobby: "teleport('lobby.cfg', '', 'fade', playable) 
//		where playable = object_playable('lobby_controller', 0, 0, 0)
//	",
	
	on_do_campaign_game: "teleport('campaign.cfg', '', 'fade', playable)
		where playable = object_playable('campaign_controller')
	",
	
	on_enter_level: "[
		debug('XXX', 'enter_level', user_decks),
		draw_menu(SCREEN_WIDTH, SCREEN_HEIGHT, user_decks), 
		if(user_decks, [set(me._user_decks, user_decks), set(me._deck_list, map(user_decks, key))]) 
	] where user_decks = DeckMap<- get_document('user-decks.cfg',['null_on_failure','user_preferences_dir']) or {}",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},
}
