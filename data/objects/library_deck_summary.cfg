{
	id: "library_deck_summary",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	properties: {
		_font: { type: "string", init: "lib.font.regular_font" },
		_font_size: "int :: py(14)",

		py: "def(int pixels) ->int lib.citadel.py(pixels)",

		_edit_button: { type: "null|obj button_controller" },

		edit_summary: "def() ->commands
		if(_controller != null and deck,
			spawn('edit_deck_details_dialog', {
				_controller: _controller,
				summary: me,
				pane_width: int(level.dimensions[2]*0.8),
				pane_height: int(level.dimensions[3]*0.8),
				_exclude_from_pause: [_controller],

				deck_name: deck_name,
				deck: deck,
			})
		)
		",

		area: "{width: py(260), height: py(72)}",

		deck_name: { type: "string" },
		original_deck_name: { type: "null|string" },

		_name_entry_widget: { type: "null|obj text_entry" },

		cards: "[string] ::
		if(_controller != null and _controller.editing_deck and _controller.deck,
		  fold(map(_controller.deck, [value.card.name]*value.count), a+b, []),
		  if(deck, deck.cards, [])
		)",

		avatar_override: { type: "null|string" },

		avatar: "string|null ::
		if(avatar_override, avatar_override,
		   deck != null and deck.avatar != null, deck.avatar,
		   deck != null and deck.cards != [], deck.cards[0])
		",

		deck: "null|Deck :: _mm.account_info.decks[original_deck_name or deck_name]",

		_last_cards: { type: "null|[string]" },

		_mm: { type: "obj matchmaking_base" },
		_controller: { type: "null|obj library_controller" },

		selected: {
			type: "bool",
			default: false,
			set: "[
				set(_data, value),
				bind_command(render, [true, false]),
			]",
		},

		highlighted: {
			type: "bool",
			default: false,
			set: "[
				set(_data, value),
				bind_command(render, [true, false]),
			]",
		},

		pulse: "def() ->commands
		execute(me,
		map([512,255],
			animate(me, {
				brightness: value,
			}, {
				duration: 10,
				name: 'pulse',
				replace_existing: false,
			}
			)
		)
		)
		",

		_card_avatar: { type: "obj card|null" },
		show_avatar: "def() ->commands
		if(avi = null or _card_avatar and _card_avatar.card_type.name = avi, null,
		if(_controller != null,
		   spawn('card', 0, 0, {
			mid_x: x2,
			mid_y: mid_y,
			card_type: lib.citadel.create_card(avi),
			controller: _controller,
			card_size: 0.4,
			hud_alpha: 0.0,
			img_target: [lib.citadel.get_card_adjustment(avi, 'focus_x', 0.5), lib.citadel.get_card_adjustment(avi, 'focus_y', 0.5)],
			img_zoom: lib.citadel.get_card_adjustment(avi, 'focus_zoom', 0.3),
			show_shadow: false,
			use_absolute_screen_coordinates: true,
			zorder: zorder+1,
			click_handler: def() ->commands null,
		   }, [
			remove_object(_card_avatar),
			set(_card_avatar, child),
		   ])
		)
		) where avi = avatar
		",

		pulse_card_limit: "def() ->commands
		execute(me,
		[
			map(range(6), schedule(6*value, [
				set(_force_highlight_card_limit, index%2 = 0);
				render([true, false])
			]))
		])
		",

		_force_highlight_card_limit: { type: "bool", default: false },

		render: "def
			//   Array of two elements: `show_name` and `creating`.
			([bool] flags) -> commands
			//   Starting top function scope.
			[
		map(range(transition_steps),
		schedule(step + delay,
		if (area.width > 0 and area.height > 0, // needed to prevent crashes when alt tabbing
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: area.width, h: area.height,
			scale: 1, frames: 1,
			fbo:
		query_cache(global_cache(24), [show_name, area, deck_name, selected or highlighted, _controller and _controller.editing_deck, num_creatures, num_buildings, num_spells, num_lands, _force_highlight_card_limit],
			  c.render(area.width, area.height, [
				c.rectangle(0, area.height*0.1, area.width, area.height*0.8),
				c.set_source_rgba(0.06, 0.09, 0.13, 1.0),
				c.fill(),

				if(selected or highlighted,
						c.set_source_rgba(
							if (creating, 1.0, clamp(mix(.29, 1.0, (step + 1) / transition_steps_dec), .29, 1.0)),
							if (creating, 1.0, clamp(mix(.33, 1.0, (step + 1) / transition_steps_dec), .33, 1.0)),
							if (creating, 1.0, clamp(mix(.36, 1.0, (step + 1) / transition_steps_dec), .36, 1.0)),
							1.0
						),
						c.set_source_rgba(
							if (creating, .29, clamp(mix(1.0, .29, (step + 1) / transition_steps_dec), .29, 1.0)),
							if (creating, .33, clamp(mix(1.0, .33, (step + 1) / transition_steps_dec), .33, 1.0)),
							if (creating, .36, clamp(mix(1.0, .36, (step + 1) / transition_steps_dec), .36, 1.0)),
							1.0
						)
				),
				c.rectangle(0, area.height*0.1, area.width, area.height*0.8),
				c.set_line_width(py(20)/10.0),
				c.stroke(),

				c.set_source_rgba(1, 1, 1, 1),

				c.save(),
				c.translate(py(4), py(30)),
				c.set_font(_font),
				c.set_font_size(py(18)),
				c.text_path_in_bounds(if(show_name, deck_name, ''), area.width, ['left']),
				c.fill(),
				c.restore(),

				[
				c.save(),

				if(_force_highlight_card_limit or _controller != null and _controller.deck_rules.max_cards != null and size(deck_cards) > _controller.deck_rules.max_cards or _controller != null and size(deck_cards) < (_controller.deck_rules.max_cards or 50) and _controller != null and not _controller.editing_deck,
					c.set_source_rgba(1, 0, 0, 1)
				),
				c.translate(py(4), py(56)),
				c.set_font(_font),
				c.set_font_size(py(14)),
				c.text_path_in_bounds(txt, area.width, ['left']),
				c.fill(),
				c.restore(),
				]
				where txt =  str(size(deck_cards)) + '/' + if(_controller = null, '40', str(_controller.deck_rules.min_cards)) + ' cards',

				[
					c.save(),
					c.translate(py(95), py(32)),
					c.set_source_color([1,1,1,1]),

					map(text_fragments, [
						c.save(),
						if(school_info != null, [
							c.save(),
							c.translate(value.x, value.y),
							c.set_source_color(lib.citadel.school_info[int(school_info[7:])].color),
							c.draw_svg('images/icons/school-hex.svg', value.height, value.height),
							c.restore(),

							c.set_source_color([0,0,0,1]),
						]) where school_info = find(value.tag, regex_match(value, 'school-.*')),

						value.path,
						c.fill(),

						c.restore(),
					]),

					c.restore(),
				] where text_fragments = c.markup_text(stats_text, { width: area.width*0.75, scale: lib.citadel.dpy(1.0) })
				  where stats_text = q(<font size='13'>) +
				    q(<img src='images/icons/type-creature.svg'></img>) + str(num_creatures + num_buildings) + q( ) +
				    q(<img src='images/icons/type-spell.svg'></img>) + str(num_spells) + q( ) +
				    q(<img src='images/icons/type-land.svg'></img>) + str(num_lands) + q(\n) +

					fold(map(school_counts, if(value > 0, q(<font tag='school-) + str(index+1) + q('><img src='images/icons/) + lib.citadel.school_info[index+1].icon + q('></img></font>) + str(value) + q( ), '')), a+b, '') +

				  q(</font>),

				/*fold([
				  if(num_creatures, str(num_creatures) + ' creatures', ''),
				  if(num_buildings, str(num_buildings) + ' forts', ''),
				  if(num_spells, str(num_spells) + ' spells', ''),
				  if(num_lands, str(num_lands) + ' lands', ''),
				], if(a and b, a + ', ' + b, a + b))*/
			])),
		}
		  // end set(animation, ...)
		  )
		  where c = canvas()
		// end if
		)
		) // schedule(...)
		where step = value
		) // map(range, ...)
		where transition_steps_dec = transition_steps * 1.0
		where transition_steps = if (highlighting, if (creating, 1, 100), if (creating, 1, 160))
		where delay = if (highlighting, 0, if (creating, 0, 80))
		where highlighting = highlighted
		where delay = 0
			where school_counts = map(range(5), count(deck_cards, school in value.school_list) where school = value+1)
			where num_creatures = count(deck_cards, value.creature_object and value.creature_object.is_land = false and value.creature_object.is_building = false)
			where num_buildings = count(deck_cards, value.creature_object and value.creature_object.is_land = false and value.creature_object.is_building)
			where num_spells = count(deck_cards, value.creature_object = null)
			where num_lands = count(deck_cards, value.creature_object and value.creature_object.is_land)
		  where deck_cards = map(deck, lib.citadel.create_card(value))
		  where deck = cards
		  where entries = filter(level.chars, value is obj library_deck_entry),

		set(_last_cards, cards),
			]  //   Ending top function scope.
			where show_name = flags[0]
			where creating = flags[1]
		",

		change_deck_name: "def(string raw_name) ->commands

		[
			if(new_name and new_name != deck_name and regex_match(new_name, '.*[a-zA-Z].*'), [
				set(deck_name, new_name),
			]) where new_name =
				if(raw_name = deck_name or raw_name = original_deck_name,
				   raw_name,
				   _controller.get_non_clashing_deck_name(regex_replace(raw_name, '[^ 0-9A-Za-z_()&-]', '')[:16], deck_name)
				),
			remove_object(_name_entry_widget),
			set(_name_entry_widget, null),
			bind_command(render, [true, false]),
		] asserting _controller != null
		",
	},

	on_process: "[
	if(_card_avatar, [
		set(_card_avatar.mid_x, x2),
		set(_card_avatar.mid_y, mid_y),
	]),
	if(_controller != null and _controller.editing_deck and cards != _last_cards, [
		fire_event('render')
	])
	]",

	on_click: "[
	  swallow_mouse_event(),

	  if(_controller = null, [
		[set(c.selected, false) | c <- level.chars, c is obj library_deck_summary],
		set(selected, true),
	  ]),

	  if(_controller != null and _controller.editing_deck = false,
	  _controller.deck_summary_clicked(me),
	  if(_controller != null and mouse_x < x + title_area.width+lib.citadel.py(8) and mouse_y < y + title_area.height + lib.citadel.py(8),
	  [
	    remove_object(_name_entry_widget),
	    spawn('text_entry', {
			x: x,
			y: y + lib.gui.py(12),
			font_size: lib.gui.py(16),
			_max_size: 16,
			has_focus: true,
			default_text: '',
			text: deck_name,
			_select_pos: 0,
			cursor_pos: size(deck_name),
			_on_lose_focus: def()->commands fire_event(me, 'finish_editing_name'),
			_on_enter: def()->commands fire_event(me, 'finish_editing_name'),
			_width: lib.gui.py(160),
			_bg_color: [0,0,0,0],
		}, [
			set(_name_entry_widget, child),
		]),

		render([false, false]),
	  ]
	  )
	  where title_area = canvas().text_extents(_font, _font_size*2, deck_name)
	  where mouse_x = lib.gui.mouse_pos(level)[0]
	  where mouse_y = lib.gui.mouse_pos(level)[1]
	)
	]",

	on_mouse_enter: "[
		if(_controller != null and _controller.editing_deck = false, [
		   _controller.enter_deck_summary(me),
		   set(highlighted, true),
		]),

		if(_controller = null, set(highlighted, true)),

		remove_object(_edit_button),
		set(_edit_button, null),

	    if(deck != null and _controller != null and _controller.editing_deck,
		spawn('button_controller', {
			x: x + lib.gui.py(180),
			y: y + lib.gui.py(12),
			button_width: lib.gui.py(80),
			button_height: lib.gui.py(22),
			zorder: zorder+10,
			text: 'Customize',
			on_click: me.edit_summary,
			_font_size: lib.gui.py(16),
		}, [
			set(_edit_button, child),
		])
		),
	]
	",

	on_mouse_leave: "[
		if(_controller != null and _controller.editing_deck = false, [
		   _controller.leave_deck_summary(me),
		   set(highlighted, false),
		]),

		if(_controller = null, set(highlighted, false)),

		remove_object(_edit_button),
		set(_edit_button, null),
	]",

	on_finish_editing_name: "

	   change_deck_name(_name_entry_widget.text asserting _name_entry_widget != null)
	",

	on_create: "[fire_event('render'), set(x2, x2), set(y, y)]",
	on_render: "[show_avatar(), render([true, false])]",

	on_being_added: "if(_card_avatar != null, add_object(_card_avatar))",
	on_being_removed: "remove_object(_card_avatar)",

	on_type_updated: "fire_event('render')",
}
