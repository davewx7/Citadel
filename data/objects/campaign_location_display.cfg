{
	id: "campaign_location_display",
	is_strict: true,
	mouse_drag_threshold: 5,

	properties: {
		location: { type: "class campaign_location" },

		_scaling: { type: "decimal", default: 1.0 },

		dimensions: "[int,int] :: [round_to_even(lib.gui.py(int(1200*_scaling))), round_to_even(lib.gui.py(int(900*_scaling)))]",
		img_dimensions: { type: "[int,int]", default: [128,128] },
		img_scale: "decimal :: location.image_scale",
		img_focus: "[decimal,decimal] :: location.image_focus",

		render: "def() ->commands [
			set(animation, {
				id: 'image',
				force_no_alpha: true,
				image: 'fbo',
				fbo: tex,
				x: 0,
				y: 0,
				w: dimensions.x,
				h: dimensions.y,
				scale: 1.0,
				frames: 1,
				allow_wrapping: true,
			}),

			set(img_dimensions, [tex.width, tex.height]),
		]
		where tex = query_cache(lib.gui.image_cache, 'portraits/' + location.image, get_texture({ image: 'portraits/' + location.image, filtering: 'bilinear', mipmaps: 4, surface_flags: ['NO_ALPHA_FILTER', 'NO_CACHE'] }))
		",

		saturation: { type: "decimal", default: 1.0 },
		luminance: { type: "decimal", default: 1.0 },

		hue_target: { type: "decimal", default: 0.0 },
		hue_lerp: { type: "decimal", default: 0.0 },
		hue_shift: { type: "decimal", default: 0.0 },

		explore_handler: { type: "null|function()->commands" },

		_show_text: { type: "bool", default: true },

		spawn_children: "def() ->commands
		[
			if(_show_text, [
				spawn('label', {
					_text: [location.get_display_name()],
					zorder: 300, //me.zorder+1,
					_font_size: lib.gui.py(int(32*_scaling)),
					_font: lib.font.bold_font,
					_halign: 'left',
					x: me.mid_x + lib.gui.py(int(260*_scaling)),
					mid_y: me.mid_y + lib.gui.py(int(170*_scaling)),
				}),

				spawn('campaign_location_progress', {
					x: me.mid_x + lib.gui.py(int(260*_scaling)),
					mid_y: me.mid_y + lib.gui.py(int(200*_scaling)),
					zorder: 300,
					completion: lib.campaign_generator.calculate_completion(location),
				}),

				spawn('text_area', {
					zorder: 300, //me.zorder+1,
					x: me.mid_x + lib.gui.py(int(260*_scaling)),
					y: me.mid_y + lib.gui.py(int(220*_scaling)),
					_text: sprintf(q(<font size='%d'>%s</font>), int(18*_scaling), location.text),
					text_width: lib.gui.py(int(280*_scaling)),
				})
				]
			),

			if(explore_handler != null,
				spawn('button_controller', {
					text: 'Explore',
					x: me.mid_x + lib.gui.py(int(260*_scaling)),
					y: me.mid_y + lib.gui.py(int(374*_scaling)),
					on_click: explore_handler,
					color_scheme: lib.citadel.library_color_scheme,
				})
			),
		]
		",

		handle_mouse_enter: { type: "null|function()->commands" },
		handle_mouse_leave: { type: "null|function()->commands" },
		handle_click: { type: "null|function()->commands" },

		_anchor_drag: { type: "[int,int]", default: [0,0] },

		drag_start_handler: { type: "null|function()->commands" },
		drag_handler: { type: "null|function([int,int])->commands" },
		drag_end_handler: { type: "null|function()->commands" },
	},

	events: {
		create: "render(); spawn_children()",

		being_removed: "map(spawned_children, remove_object(value))",

		mouse_enter: "if(handle_mouse_enter, handle_mouse_enter())",
		mouse_leave: "if(handle_mouse_leave, handle_mouse_leave())",
		click: "if(handle_click, handle_click())",

		drag_start: "set(_anchor_drag, lib.gui.mouse_pos(level)); if(drag_start_handler, drag_start_handler())",
		drag: "if(drag_handler, drag_handler([lib.gui.mouse_pos(level).x - _anchor_drag.x, lib.gui.mouse_pos(level).y - _anchor_drag.y])); set(_anchor_drag, lib.gui.mouse_pos(level))",
		drag_end: "if(drag_end_handler, drag_end_handler())",
	},

	shader: {
		name: "campaign_loc_shader",
		
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec4 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			void main()
			{
				v_texcoord = a_anura_texcoord;
				gl_Position = u_anura_mvp_matrix * a_anura_vertex;
			}
		",

		fragment: "
			vec3 rgb_to_hsv(vec3 c)
			{
				vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
				vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

				float d = q.x - min(q.w, q.y);
				float e = 1.0e-10;
				return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}

			vec3 hsv_to_rgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}

			uniform sampler2D u_anura_tex_map;
			uniform vec4 u_anura_sprite_area;
			uniform vec2 u_property_dimensions;
			uniform vec2 u_property_img_dimensions;
			uniform vec2 u_property_img_focus;
			uniform float u_property_img_scale;
			uniform float u_property_alpha;
			uniform float u_property_saturation;
			uniform float u_property_luminance;
			uniform float u_property_hue_target;
			uniform float u_property_hue_lerp;
			uniform float u_property_hue_shift;
			varying vec2 v_texcoord;
			void main()
			{
				float left = u_property_img_focus.x - u_property_img_scale*0.5;
				float right = left + u_property_img_scale;

				float scale_height = u_property_img_scale * (u_property_dimensions.y/u_property_dimensions.x) * (u_property_img_dimensions.x/u_property_img_dimensions.y);

				float top = u_property_img_focus.y - scale_height*0.5;
				float bottom = top + scale_height;

				float xpos = (v_texcoord.x - u_anura_sprite_area[0]) / (u_anura_sprite_area[2] - u_anura_sprite_area[0]);
				float ypos = (v_texcoord.y - u_anura_sprite_area[1]) / (u_anura_sprite_area[3] - u_anura_sprite_area[1]);

				vec2 texcoord = vec2(
					mix(left, right, xpos),
					mix(top, bottom, ypos)
				);

				float px_width = (u_anura_sprite_area[2] - u_anura_sprite_area[0]) / u_property_img_dimensions[0];
				float px_height = (u_anura_sprite_area[3] - u_anura_sprite_area[1]) / u_property_img_dimensions[1];

				gl_FragColor = texture2D(u_anura_tex_map, texcoord);

				gl_FragColor[3] *= u_property_alpha/255.0;

				float dist_from_center = sqrt((xpos - 0.5)*(xpos - 0.5) + (ypos - 0.5)*(ypos - 0.5))*2.0;
				if(dist_from_center > 1.0) {
					gl_FragColor[3] = 0.0;
				} else if(dist_from_center > 0.5) {
					float a = sin((dist_from_center - 0.5)*2.0 * 3.14/2.0);
					gl_FragColor[3] *= 1.0 - a;
				}

				if(u_property_saturation != 1.0 || u_property_luminance != 1.0 || u_property_hue_lerp != 0.0 || u_property_hue_shift != 0.0) {
					vec3 hsv = rgb_to_hsv(gl_FragColor.rgb);
					hsv[0] = fract(mix(hsv[0], u_property_hue_target, u_property_hue_lerp) + u_property_hue_shift);
					hsv[1] *= u_property_saturation;
					hsv[2] *= u_property_luminance;
					gl_FragColor.rgb = hsv_to_rgb(hsv);
				}
			}

		",


	},

}
