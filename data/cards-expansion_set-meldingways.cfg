{

//Aether/Gaea

"White Gryphon": {
		name: "White Gryphon",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "white-gryphon.png",
		cost: 5,
		school: "@eval [FAITH, FOOD]",
		creature: {
			tags: ['Beast', 'Flying'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 5,
			life: 5,
			move: 2,
	}
    },
    
    "Silent Guardian": "Guardian Waykeeper",
    
    "Guardian Waykeeper": {
		name: "Guardian Waykeeper",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "guardian-waykeeper.png",
		cost: 5,
        loyalty_cost: 1,
		school: "@eval [FAITH, FOOD]",
		creature: {
			tags: ['Guardian'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 8,
			life: 6,
			move: 1,
            passive_abilities: [{
				name: "Sacred Guardian",
                rules: "While on an Aether or a Gaea land, Silent Guardian gains cover and +2 armour.",
                
                static_effect: "def(class game_state game, class creature creature) ->commands 
                if(land and ((FOOD in land.school) or (FAITH in land.school)), 
            [creature.add_ability_static_duration('Cover'),
            creature.apply_static_effect('armor', 2)]) 
            where land = game.land_at_loc(creature.loc)"
			}],
	}
    },
    
    "Sun Harvest": {
		name: "Sun Harvest",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "spell",
		portrait: "sun-harvest.png",
		cost: 0,
		loyalty_cost: 3,
        is_response: true,
		school: "@eval [FAITH, FOOD]",
		rules: "Both players gain 4 mana.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
        [
		 map(range(4), game.players[game.current_player_index].gain_mana_from_card(game, me)),
         map(range(4), game.players[(game.current_player_index+1)%2].gain_mana_from_card(game, me)),
        ]",
	},

//Aether/Materia

"Knight Errant": {
		name: "Knight Errant",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "knight-errant.png",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval [FAITH, GOLD]",
		creature: {
			tags: ['Human', 'Mounted'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 4,
			life: 7,
            armor: 1,
			move: 2,
			triggered_abilities: [{
				name: 'Chosen',
				rules: "When Knight Errant is targeted by a spell he gains +2 attack",
				on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(creature.loc in info.targets,
					   add(creature.attack, 2))
				",
		}],
	}
    },
    
    "Fearless Leader": {
		name: "Fearless Leader",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "creature",
		portrait: "fearless-leader.png",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval [GOLD, FAITH]",
		creature: {
			tags: ['Human'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 7,
			life: 8,
			move: 1,
			triggered_abilities: [{
				name: 'Lead from the Front',
				rules: "When you summon an ally in this lane, give it +2/+2",
				on_another_creature_summoned: "def(class creature creature, class game_state game, class creature new_creature) ->commands
					if(new_creature.loc[0] = creature.loc[0] and new_creature.controller = creature.controller and new_creature != creature,
					   [add(new_creature.attack, 2),
                       add(new_creature.life, 2)])",
		}],
	}
    },
    

	"Stoic": {
		name: "Stoic",
		type: "creature",
		set: "Melding_of_Ways",
		rarity: 0,
		portrait: "stoic.png",
		flavor_text: "Frugality and valor, faith and honor.",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval [FAITH,GOLD]",
		creature: {
			tags: ['Elf'],
			activated_abilities: [
				{
					name: "Call of Valor",
					cost: 1,
					is_response: true,
					school: "@eval [FAITH,GOLD]",					
					rules: "This creature gains +3 attack this turn. The ability is a response, and doesn't stack.",
					on_play: "def(class game_state game, class message.play_card info) ->commands
						if (creature.energy > 0, [],						
						[
							creature.apply_effect_until_end_of_turn('energy', 1),	
							creature.apply_effect_until_end_of_turn('attack', 3),
						])
						where creature = info.get_creature(game)",
				}
			],

			abilities: ['Valiant'],
			attack: 3,
			life: 5,
			move: 1,
			energy: 0,	
		}
	},

//Aether/Minerva

"Yogi": {
		name: "Yogi",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "creature",
		portrait: "yogi.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [SAPIENZA, AETHER]",
		creature: {
			tags: ['Human'],
			attack: 3,
			life: 3,
			move: 1,
			image_num: 20,

			triggered_abilities: [{
				name: "Pacify",
				rules: "If this creature is killed in combat, the killer loses all movement this turn.",
				on_die: "def(class creature yogi, class game_state game) ->commands [
					if (killer is null, [],  [killer.apply_effect_until_end_of_turn('move', -killer.move)])
					where killer = yogi.killed_by_this_turn(game)
				]",
			},
            {
				name: "Guard",
				rules: "At the start of your turn, Yogi loses its attack until end of turn.",
				on_begin_turn: "def(class creature creature, class game_state game) ->commands
			             if(game.current_player = creature.controller, creature.apply_effect_until_end_of_turn('attack', -creature.attack))"
            }
            ],
		}
	},
    
    "Balance": {
		name: "Balance",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval [SAPIENZA, AETHER]",
		portrait: "balance.png",
		rules: "Set target creatures attack equal to its life.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).attack, game.creature_at_loc_or_die(info.targets[0]).life)
					asserting size(info.targets) = 1",
	},
    
    "Nihil": {
		name: "Nihil",
		set: "Melding_of_Ways",
		rarity: 2,
		type: "spell",
		cost: 1,
		loyalty_cost: 5,
		school: "@eval [SAPIENZA, AETHER]",
		portrait: "nihil.png",
		rules: "All creatures lose all special abilities.",

		on_play: "def(class game_state game, class message.play_card info) ->commands map(game.creatures, creature, if((not creature.is_land) and (not creature.is_building), 
        [
			set(creature.abilities, []),
				set(creature.activated_abilities, []),
				set(creature.triggered_abilities, []),
				set(creature.range, 0),
				set(creature.move, 1),
                set(creature.max_actions, 1),
				set(creature.armor, 0),
				set(creature.passive_abilities, []),
		]))",
	},

//Aether/Enthropia
    
    	"Fate Weaver": {
		name: "Fate Weaver",
		portrait: "fate-weaver.png",
        set: "Melding_of_Ways",
        cost: 6,
		loyalty_cost: 2,
		school: "@eval [BLOOD, FAITH]",
		rarity: 2,
		creature: {
			tags: ["Avatar"],
            abilities: ['Cover', 'Regeneration'],
			attack: 0,
			life: 2,
			move: 0,
			triggered_abilities: [{
				name: "Spinning Wheel",
				rules: "At the start of your turn your enemy loses life equal to the number of Fate Weavers on the board.",

                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			             if(game.current_player = creature.controller,
							   add(game.players[(creature.controller+1)%2].life, -(count(game.creatures, value.name ='Fate Weaver'))))",
			}],
		},
	},
	
    "Angel of Death": {
		name: "Angel of Death",
		portrait: "angel-of-death.png",
        set: "Melding_of_Ways",
        cost: 8,
		loyalty_cost: 4,
		school: "@eval [BLOOD, FAITH]",
        flavor_text: "Death comes. Sometimes as a friend, sometimes as a setback, sometimes it's devestating, but it always comes.",
		rarity: 2,
		creature: {
			tags: ["Avatar"],
            abilities: ['Cover'],
			attack: 10,
			life: 13,
			move: 1,
			activated_abilities: [{
				name: 'Claim',
				cost: 1,
                once_per_turn: true,
				school: "@eval BLOOD",
				rules: "Spend an action, Sacrifice Angel of Death and destroy target creature.",
                flavor_text: "Now I claim you, as I do all.",
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.is_valid_target(game, game.nplayer, me)])
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					set(target_creature.destroyed, true),
                    set(creature.sacrificed, true),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])
				  where creature = info.get_creature(game)"
			},
			 ],
		},
	},
    
    	"Ultimate Wrath": {
		name: "Ultimate Wrath",
		rarity: 2,
		type: "spell",
		school: "@eval [BLOOD, FAITH]",
		portrait: "ultimate-wrath.png",
		cost: 10,
		loyalty_cost: 3,
		rules: "Obliterate all creatures, buildings, and lands in target hex and all adjacent hexes.",

        possible_targets: "all_tiles_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands 
        [map(game.creatures, creature, 
        if(creature and (info.targets[0] = creature.loc or game.locs_adjacent(info.targets[0], [int<-creature.loc[0],int<-creature.loc[1],])), [
			set(creature.obliterated, true)
		])),
        map(game.lands, creature, 
        if(creature and (info.targets[0] = creature.loc or game.locs_adjacent(info.targets[0], [int<-creature.loc[0],int<-creature.loc[1],])), [
			set(creature.obliterated, true)
		]))]"
	},
    
//Gaea/Materia

"Baekwall Gargoyle": {
		name: "Baekwall Gargoyle",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
        portrait: "baekwall-gargoyle.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval [GOLD, FOOD]",
		creature: {
			tags: ['Beast', 'Stonebound', 'Flying'],
			attack: 5,
			life: 5,
			move: 1,
            armor: 1,
            energy: 0,
            on_begin_turn: "def(class game_state game) ->commands if(game.current_player = me.controller, set(me.energy, 0))",
            activated_abilities: [
				{
					name: 'Enter Stoneform',
					cost: 1,
					school: [1],
					is_response: true,
                    is_usable: "def(class game_state game, class creature creature) ->bool if(creature.energy=0, true, false)",
					rules: "Until the start of your next turn, Baekwall Gargoyle lies in stoneform. This is a reaction.",
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						set(creature.energy, 1)
					] where creature = info.get_creature(game)"
				}
			],
            passive_abilities: [{
				static_effect: "def(class game_state game, class creature creature) ->commands 
                [
                if(creature.energy = 1, 
                [creature.apply_static_effect('attack', -creature.attack),
                creature.apply_static_effect('move', -creature.move),
                creature.apply_static_effect('armor', 4),
                creature.add_ability_static_duration('Regeneration')])
                | target <- game.creatures,
				  (creature = target)
                ]",
				
				name: "Stoneform",
				rules: "While in stoneform, Baekwall Gargoyale loses all attack and move but gains 4 armor and regeneration.",
			}],
		}
	}, //end of Baekwall Gargoyle
    
    "Bronze Dragon": {
		name: "Bronze Dragon",
		set: "Melding_of_Ways",
		rarity: 2,
		type: "creature",
        portrait: "bronze-dragon.png",
		cost: 10,
		loyalty_cost: 2,
		school: "@eval [GOLD, FOOD]",
		creature: {
			tags: ['Dragon'],
			abilities: ['Ranged'],
			attack: 10,
			life: 12,
            armor: 2,
			move: 2,
		}
	},
    
    "Indomidable Grit": {
		name: "Indomidable Grit",
		set: "Reaping_the_Cycle",
		rarity: 1,
		type: "spell",
        portrait: "indomidable-grit.png",
		is_response: true,
		cost: 2,
		loyalty_cost: 3,
		school: "@eval FOOD",
		rules: "The next time target creature takes damage that would reduce its life below 0, it retains 1 life.",
        possible_targets: "all_creatures_as_possible_targets",
        
		on_play: "def(class game_state game, class message.play_card info) ->commands
          if(target, add(target.triggered_abilities, 
      [{
            name: 'Grit',
            rules: 'When this creature would take damage sufficent to kill it, it retains 1 life.',
            once: true,
            on_damaged: 'def(class creature creature, class game_state game, int damage) ->commands 
            if(damage >= creature.life, 
            [set(creature.life, 1),
            set(creature.triggered_abilities, filter(creature.triggered_abilities, value.name != q(Grit)))])',
                
            
    }]), null) where target = game.creature_at_loc_or_die(info.targets[0])"
        },

//Gaea/Minerva

"Hedge Mage": {
		name: "Hedge Mage",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "hedge-mage.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval [FOOD, SAPIENZA]",
		creature: {
			tags: ['Mage'],
			attack: 3,
			life: 3,
			move: 1,
            passive_abilities: [{
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0 and game.players[creature.controller].get_resource_level(SAPIENZA) >2,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Guile",
				rules: "If your Minerva level is 3 or greater, +1 handsize.",
			},{
				static_effect: "def(class game_state game, class creature creature) ->commands 
                [
                if(game.players[creature.controller].get_resource_level(FOOD) >2, 
                [creature.apply_static_effect('attack', 2), creature.apply_static_effect('life', 2)])
                | target <- game.creatures,
				  (creature = target)
                ]",
				
				name: "Craft",
				rules: "While your Gaea level is 3 or greater, Hedge mage gains +2/+2",
			}],
        }
	},
    
    "Siren": {
		name: "Siren",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "siren.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval [FOOD, SAPIENZA]",
		creature: {
			tags: ['Waterbound', 'Faerie'],
			attack: 4,
			life: 5,
			move: 1,
            triggered_abilities: [{
				name: "Lull",
				rules: "When you would deal damage to a creature, instead reduce their attack by the amount of damage you would do.",
				on_deal_damage: "def(class creature creature, class game_state game, class creature target, int damage, null|class animation.creature_attack_hint hint=null) ->commands                     if (not target.is_building,[
                add(target.attack, -damage),
                add(target.life, damage)
                ])",
			}],
            activated_abilities: [
			{
				name: "Devour",
				cost: 0,
				school: "@eval SAPIENZA",
				is_response: false,
				once_per_turn: false,
				rules: "Destroy an adjacent creature with attack less than 0.",
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.attack<0, game.locs_adjacent(c.loc, creature.loc), c.is_valid_target(game, game.nplayer, me)])
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					set(target_creature.destroyed, true),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			},],
        }
	},
    
        "Elixer": {
		name: "Elixer",
		type: "spell",
        portrait: "elixer.png",
		cost: 3,
		loyalty_cost: 3,
        set: "Melding_of_Ways",
        rarity: 1,
		school: "@eval [FOOD, SAPIENZA]",
		rules: "Gain 5 life.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.players[game.current_player].life, 5)"
	},

//Gaea/Enthropia

"Devouring Fury": {
		name: "Devouring Fury",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "devouring-fury.png",
		cost: 7,
		loyalty_cost: 2,
		school: "@eval [FOOD, BLOOD]",
		creature: {
			tags: ['Spirit'],
			attack: 7,
			life: 6,
			move: 1,
            triggered_abilities: [{
				name: "Consume",
				rules: 'At the start of your turn, devouring fury gains life equal to your Gaea level and attack equal to your Enthropia level.',
                on_begin_turn: "def(class creature creature, class game_state game) ->commands
            [
                    if (game.current_player_index = creature.controller, add(creature.life, game.players[creature.controller].get_resource_level(FOOD))),
                    if (game.current_player_index = creature.controller, add(creature.attack, game.players[creature.controller].get_resource_level(BLOOD)))
            ]"}],
			image_num: 64,
		}
	},
    
        "Slaughterlust": {
		name: "Slaughterlust",
		set: "Reaping_the_Cycle", 
		rarity: 1,
		type: "spell",
        portrait: "slaughterlust.png",
		is_response: false,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval [FOOD, BLOOD]",
		rules: "Give target creature 'When this creature kills another creature, it gains +1 move, +1 action.'",
        possible_targets: "all_creatures_as_possible_targets",
        
		on_play: "def(class game_state game, class message.play_card info) ->commands
          if(target, add(target.triggered_abilities, 
      [{
            name: 'Slaughterlust',
            rules: 'When this creature makes a kill, it gains 1 move and 1 action',
            on_kill: 'def(class creature creature, class game_state game, class creature victim) ->commands 
                [creature.apply_effect_until_end_of_turn(q(move), 1),
                creature.apply_effect_until_end_of_turn(q(max_actions), 1)]',
                
            
    }]), null) where target = game.creature_at_loc_or_die(info.targets[0])"
        },

//Materia/Minerva

"Rain of Steel": {
		name: "Rain of Steel",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "spell",
		portrait: "rain-of-steel.png",
		school: "@eval [SAPIENZA, GOLD]",
		cost: 4,
		loyalty_cost: 3,
        
        possible_targets: "all_tiles_as_possible_targets",
		rules: "Target a hex. Inflict 5 damage to creatures and buildings in that hex and adjacent hexes.",
		on_play: "def(class game_state game, class message.play_card info) ->commands 
        map(game.creatures, creature, 
        if(creature and (info.targets[0] = creature.loc or game.locs_adjacent(info.targets[0], [int<-creature.loc[0],int<-creature.loc[1],])), [
			creature.inflict_damage(game, 5)
		]))"
	},

"Tactician": {
		name: "Tactician",
		type: "creature",
        set: "Melding_of_Ways",
		portrait: "tactician.png",
		cost: 6,
        loyalty_cost: 1,
		school: "@eval [GOLD, SAPIENZA]",
		rarity: 1,
		creature: {
			tags: ['Human'],
			attack: 5,
			life: 7,
			move: 1,
			image_num: 19,
            activated_abilities: [
				{
                name: 'Shift of Force',
                cost: 2,
                school: "@eval GOLD",
                rules: "Spend an action to move a creature you control into to an adjacent lane.",
                once_per_turn: true,

                possible_targets: "def(class game_state game, class creature thisCreature, [Loc] targets) ->[Loc]|null
   if(size(targets)=0, [c.loc | c<- game.creatures, c != thisCreature, c.is_valid_target(game, game.nplayer, me), c.controller = thisCreature.controller],
   if(size(targets)=1, filter(game.get_adjacent_locs(targets[0]),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) = null), null))",

    on_play: "def(class game_state game, class message.play_card info) ->commands
      set(game.creature_at_loc_or_die(info.targets[0]).loc, info.targets[1])",
            }
			]
		}
	},
    
    "Rails": {
		name: "Rails",
		type: "creature",
        portrait: "rails.png",
		cost: 4,
		loyalty_cost: 2,
        //set: "Melding_of_Ways",
        rarity: 1,
		school: "@eval [GOLD, SAPIENZA]",
		creature: {
			is_land: true,
            tags: ['Instalation'],
            triggered_abilities: [{
				name: "Steampower",
				rules: "Creatures on rails at the start of a turn gain +1 move until end of turn.",
                
                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			             if(game.creature_at_loc(creature.loc) and game.current_player = creature.controller,
							 if(not enhanced.is_building, enhanced.apply_effect_until_end_of_turn('move', 1)))
                             where enhanced = game.creature_at_loc_or_die(creature.loc)",
			}],
		}
	},

//Materia/Enthropia

"Black Knight": {
		name: "Black Knight",
		type: "creature",
        set: "Melding_of_Ways",
		portrait: "black-knight.png",
		cost: 6,
		loyalty_cost: 3,
		school: "@eval [GOLD, BLOOD]",
		rarity: 1,
        flavor_text: "I am loyal to no house. Yet by my strength and steel, yours shall not prosper.",
		creature: {
			tags: ['Human'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 19,
            passive_abilities: [{
				name: "Challenger",
                rules: "Black Knight gains +3 armor and +3 while you have no other creature or building in the same lane and your opponent has excatly one creature or building in its lane.",
                
                static_effect: "def(class game_state game, class creature creature) ->commands 
                if(1= count(game.creatures, value.controller = creature.controller and value.loc[0] = creature.loc[0]) and theirguys = 1, 
            [creature.apply_static_effect('attack', 3),
            creature.apply_static_effect('armor', 3)]) 
            where theirguys = count(game.creatures, value.controller != creature.controller and value.loc[0] = creature.loc[0])"
			}],
		}
	},
    
"Slave Trader": {
		name: "Slave Trader",
		type: "creature",
        set: "Melding_of_Ways",
		portrait: "slave-trader.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval [GOLD, BLOOD]",
		rarity: 1,
		creature: {
			tags: ['Human', 'Merchant'],
			attack: 4,
			life: 6,
			move: 1,
			image_num: 19,
            triggered_abilities: [{
				name: "Capture",
				rules: "When Slave Trader destroys a creature, if it survives, gain 2 mana and one card.",
				on_kill: "def(class creature creature, class game_state game, class creature victim) ->commands
                if(not victim.is_building and creature.life > 0, 
                [
                game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                game.players[creature.controller].draw_cards(game, 1)
                ])",
		}],
        }
	},

//Minerva/Enthropia

"Mana Burn": 
    {
		name: "Mana Burn",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "spell",
		school: "@eval [SAPIENZA, BLOOD]",
		portrait: "mana-burn.png",
		artist: "eleazzaar",
        is_instant: true,
		cost: 0,
		loyalty_cost: 2,
		rules: "Your opponent loses up to 3 mana and takes damage equal to the mana lost.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
        [
        add(opponent.life, -min(opponent.resources, 3)),
        add(opponent.resources, -min(opponent.resources, 3)),
        ] where opponent = game.players[((game.current_player_index+1)%2)]",
	},

	"Bloodletting": {
		name: "Bloodletting",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "spell",
		school: "@eval [BLOOD, SCROLLS]",
		portrait: "traced_kukri.png",
		cost: 0,
		loyalty_cost: 2,
		rules: "Lose 5 life, draw 5 cards.",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			add(caster.life, -5),
			caster.draw_cards(game, 5),
		] where caster = game.players[game.current_player]",
	},
    

    
    "Necrotist": {
		name: "Necrotist",
		type: "creature",
        set: "Melding_of_Ways",
		portrait: "necrotist.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval [SAPIENZA, BLOOD]",
        flavor_text: "The only way to study death, is to find a way to get there and return.",
		rarity: 1,
		creature: {
			tags: ['Human'],
			attack: 2,
			life: 5,
			move: 1,
			image_num: 19,
            activated_abilities: [{
				name: 'Embark',
				cost: 0,
				school: "@eval SAPIENZA",
				rules: "Sacrifice Necrotist.",
                is_instant: true,
                flavor_text: "I'll let you know what I find when I return.",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
                    set(creature.sacrificed, true),
                    set(creature.energy, 1),
				] where creature = info.get_creature(game)"
			}],
            triggered_abilities: [{
                name: 'Student of Death',
                rules: "If you sacrifice Necrotist, put him back in your hand and draw a card.",
				on_die: "def(class creature creature, class game_state game) ->commands
				if(creature.sacrificed, 
                    [game.players[creature.controller].draw_cards(game, 1),
                    set(game.graveyard, remove_from_map(game.graveyard, creature.summon_id)),
					set(game.exiled_creatures[creature.summon_id], creature),
					add(game.players[creature.controller].hand, [lib.citadel.create_card('Necrotist')])])",
			}],
        }
	},
    
    //Alliance Lands
    "Fungal Forest": {
		name: "Fungal Forest",
		type: "creature",
        rarity: 0,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [FOOD, BLOOD]",
		portrait: "fungal-forest.png",
		creature: {
			is_land: true,
            portrait: "fungal-forest.png",
			image_num: 18,
		},
	},
    
    "Crystal Badlands": {
		name: "Crystal Badlands",
		type: "creature",
        rarity: 0,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [GOLD, BLOOD]",
		portrait: "crystal-badlands.png",
		creature: {
			is_land: true,
            portrait: "crystal-badlands.png",
			image_num: 18,
		},
	},
    
    "Sacred Mountain": {
		name: "Sacred Mountain",
		type: "creature",
        rarity: 0,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [GOLD, FAITH]",
		portrait: "sacred-mountain.png",
		creature: {
			is_land: true,
            portrait: "sacred-mountain.png",
			image_num: 18,
		},
	},
    
    "Sentient Jungle": {
		name: "Sentient Jungle",
		type: "creature",
        rarity: 0,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [SAPIENZA, FOOD]",
		portrait: "sentient-jungle.png",
		creature: {
			is_land: true,
            portrait: "sentient-jungle.png",
			image_num: 18,
		},
	},
    
    "Secluded Sanctuary": {
		name: "Secluded Sanctuary",
		type: "creature",
        rarity: 0,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [SAPIENZA, FAITH]",
		portrait: "secluded-sanctuary.png",
		creature: {
			is_land: true,
            portrait: "secluded-sanctuary.png",
			image_num: 18,
		},
	},
    
    //Unused/Depreciated
    
    "Grand Alliance": {
		name: "Grand Alliance",
		//set: "Melding_of_Ways",
		rarity: 2,
		type: "spell",
		cost: 4,
		loyalty_cost: 0,
		portrait: "grand-alliance.png",
		school: "@eval [GOLD, FAITH]",
		rules: "THIS CARD IS DEPRECIATED:
        
        If you have an Elf, a Dwarf, and a Human in play, place an alliance headquarters, a Materia/Aether land which provides +2 mana a turn and gives all your creatures +1/+1",
        
        possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null    
        if(targets=[], if(human and elf and dwarf, 
        construct_summoning_locs, 
        []),null)
        where human = (0<count(game.creatures, value.controller = game.current_player and ('Human' in value.tags)))
        where elf = (0<count(game.creatures, value.controller = game.current_player and ('Elf' in value.tags)))
        where dwarf = (0<count(game.creatures, value.controller = game.current_player and ('Dwarf' in value.tags)))
        where construct_summoning_locs = filter(map(range(game.rows), game.players[game.current_player].construct_loc_in_row(game, value)), game.land_at_loc(value) = null)",
        
		
        on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			bind_command(game.summon_land,
			             lib.citadel.create_creature('Alliance Headquarters',
			{
				loc: target_construct,
                controller: game.current_player
			})),
		] where target_construct = info.targets[0]",
        
	},
    
    //Token land for Grand Allianace
    "Alliance Headquarters": {
		name: "Alliance Headquarters",
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "alliance-headquarters.png",
		rules: "+2 income",
		creature: {
			tags: ["Base"],
			is_land: true,
            portrait: "forest.png",
			image_num: 18,
            
            income: "def(class game_state game) ->int 2",
            passive_abilities: [{
				name: "Unity",
				rules: "Creatures you control get +1 attack and +1 life.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [target.apply_static_effect('attack', 1), target.apply_static_effect('life', 1)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		},
	},

	"Isabella of the Wind": {
		name: "Isabella of the Wind",
		set: "Melding_of_Ways",
		rarity: 2,
		type: "creature",
		school: "@eval [SCROLLS, FOOD]",
		cost: 4,
		loyalty_cost: 1,
		hero: true,
		portrait: "isabella-of-the-wind.png",		

		creature: {
			tags: ['Elf'],
			abilities: ['Ranged'],
			attack: 4,
			life: 5,
			passive_abilities: [{
				name: "Sharpshooter",
				rules: "Isabella ignores enemy creatures' armor when she attacks",
				static_effect: "def(class game_state game, class creature creature) ->commands 
					if(size(creature.targets_attacking(game))>0,
						if (not victim.is_building and victim.armor > 0,
							victim.apply_static_effect('armor', -victim.armor))
						where victim = creature.targets_attacking(game)[0]
					)"
			}],
		},
	},

}
