{
	//basic creatures

	"Skeletal Parasite": {
		name: "Skeletal Parasite",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "skeletal-parasite.png",
		portrait_focus: [319,345],
		portrait_focus_height: 140,
		artist: "lucy",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		flavor_text: "&ldquo;Yes, yes. I remember now, They called me Bernie, once; Now they don't call me anything at all. They just scream.&rdquo;",
		creature: {
			tags: ['Undead', 'Skeleton'],
			sound_walk: "creatures/move-swift.wav",
			attack: 6,
			life: 5,
			move: 1,
			image_num: 45,

			portrait_y_offset: 20,

			triggered_abilities: [{
				name: "Leech",
				rules: "At the start of your turn, <i>Skeletal Parasite</i> deals one damage to you.",

				on_begin_turn: "def(class creature creature, class game game) ->commands
					//deal 1 damage to controller at start of turn.
					if(game.current_player_turn_index = creature.controller, [
						add(game.players[creature.controller].life, -1),
						add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', target_player: creature.controller, source: creature, amount: 1, anim_type: 'bloodcord' })]),
					])
				",

			}],
		},
	},

	"Grave Stalker": {
		name: "Grave Stalker",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 4,
		portrait: "grave-stalker.png",
		portrait_focus: [118,571],
		portrait_focus_width: 120,
		artist: "stephenwang",
		school: "@eval BLOOD",
		creature: {
			tags: ['Horror'],
			attack: 2,
			life: 2,
			move: 1,
			triggered_abilities: [{
				name: "Death Feast",
				rules: "Gets +1/+1 whenever a creature dies.",

				on_another_creature_died: "def(class creature creature, class game game, class creature victim) ->commands if(victim.is_construct = false and victim.is_building = false,[
					add(creature.life, 1),
					add(creature.attack, 1),
				])",
			}],
		},
	},

	"Goblin Assassin": "Nightblade",

	"Nightblade": {
		name: "Nightblade",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "nightblade.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ['Assassin'],
			abilities: ['Lethal'],
			sound_walk: "creatures/move-swift.wav",
			attack: 4,
			life: 4,
		}
	},

	"Dwarvish Bandit": "Dwarvish Fiend",

	"Dwarvish Fiend": {
		name: "Dwarvish Fiend",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "dwarvish-bandit.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		help_strings: ['Poison'],
		creature: {
			tags: ['Dwarf'],
            abilities: ['Feral'],
			attack: 4,
			life: 3,
			move: 1,
			resistance: 0,
			image_num: 71,
            triggered_abilities: [{
				name: "Poisoned Blade",
				rules: "Creatures damaged by Dwarvish Fiend become poisoned.",

				on_deal_damage: "def(class creature creature, class game game, class creature target, int damage) ->commands 
                if((not target.is_building), add(target.status_effects, ['Poisoned']))",
			}],
		}		
	},

	"Soothsayer": {
		name: "Soothsayer",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "soothsayer.png",
		artist: "lucy",
		portrait_focus: [336,346],
		portrait_focus_width: 360,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ['Human'],
			attack: 5,
			life: 2,
			move: 1,
			image_num: 21,
			portrait_y_offset: 40,

			triggered_abilities: [{
				name: "Blood Gift",
				rules: "When Soothsayer dies, draw a card.",

				on_die: "def(class creature creature, class game game) ->commands
				game.players[creature.controller].draw_cards(game, 1)",
			}],
		}
	},

	"Pyre Zombie": {
		name: "Pyre Zombie",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "traced_pyre_zombie.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ['Zombie', 'Undead'],
			attack: 3,
			life: 3,
			move: 1,

			image_num: 4,
			portrait_x_offset: -10,
			portrait_y_offset: 35,
			sound_summoned: "creatures/summon-zombie.wav",
			sound_death: "creatures/death-zombie.wav",
			sound_walk: "creatures/move-stiff.wav",
			triggered_abilities: [{
				name: "Explosive",
				rules: "When this creature dies in combat, it deals three damage to all adjacent creatures.",
				on_die: "def(class creature zombie, class game game) ->commands [
					if (zombie.damage_dealt_killed,
						map( filter(game.all_locs, game.locs_adjacent(value, zombie.loc)),
							if (creature and (not creature.is_building), creature.inflict_combat_damage(game, zombie, 3))
								where creature = game.creature_at_loc(Loc<- value)))
				]",
			}],
		},
	},
	
	"Ghost": {
		name: "Ghost",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "ghost.png",
		cost: 1,
		loyalty_cost: 4,
		school: "@eval BLOOD",
		creature: {
			tags: ["Ghost", "Undead"],
			attack: 4,
			life: 3,
			move: 1,
			image_num: 34,
			sound_summoned: "creatures/summon-ghost.wav",
			sound_death: "creatures/death-ghost.wav",
			triggered_abilities: [{
				name: "Spirit",
				rules: "When this creature dies, return it to its owner's hand.",
				on_die: "def(class creature creature, class game game) ->commands [
					set(game.graveyard, remove_from_map(game.graveyard, creature.summon_id)),
					set(game.exiled_creatures[creature.summon_id], creature),
					add(game.players[creature.controller].hand, [lib.citadel.create_card('Ghost')])
				]",
			}],
		},
	},
	
	"Diseased Corpse": {
		name: "Diseased Corpse",
		set: "core",
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 0,
		portrait: "diseased-corpse.png",
		artist: "lisanguyen",
		portrait_focus: [276,163],
		portrait_focus_height: 90,
		help_strings: ['Poison'],

		creature: {
			tags: ['Undead', 'Zombie'],
			attack: 4,
			life: 4,
			move: 1,

			sound_summoned: "creatures/summon-zombie.wav",
			sound_death: "creatures/death-zombie.wav",
			sound_walk: "creatures/move-stiff.wav",
            passive_abilities: [{
				name: "Disease Cloud",
				rules: "Adjacent enemy creatures have -0/-2.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
				   target.apply_static_effect('life', -2)
				  | target <- game.creatures,
				    not target.is_building,
					target.controller != creature.controller,
					game.locs_adjacent(creature.loc, target.loc)
				]"
			}],
		}
	},
	
	"Skeleton": {
		name: "Skeleton",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "skeleton.png",
		portrait_focus: [446,183],
		portrait_focus_height: 200,
		artist: "lordbob",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ["Skeleton", "Undead"],
			attack: 3,
			life: 2,
			move: 1,
			sound_summoned: "creatures/summon-skeleton.wav",
			sound_death: "creatures/death-skeleton.wav",
			sound_walk: "creatures/move-stiff.wav",
			portrait: "skeleton.png",
			image_num: 13,
			// has sword
			overlays: [{image_num: 7}],

            triggered_abilities: [{
				name: "Revenant",
				once: true,
				rules: "If Skeleton would die, it is fully restored instead.",

				on_die: "def(class creature creature, class game game) ->commands
				if(not game.creature_at_loc(creature.loc), game.summon_creature(
				  lib.citadel.create_creature(creature.name, {
					name: creature.name,
					controller: creature.controller,
					loc: creature.loc,
					card_name: creature.card_name,
					summon_id: creature.summon_id,
					triggered_abilities: filter(lib.citadel.create_creature(creature.name).triggered_abilities, value.name != 'Revenant')
				  })
				))",
			}],

		},
	},





    "Shadow Elemental": {
		name: "Shadow Elemental",
		type: "creature",
		set: "core",
		rarity: 1,
		artist: "lisanguyen",
		portrait: "shadow-elemental.png",
		portrait_focus: [408,271],
		portrait_focus_height: 90,
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
		school: "@eval BLOOD",
		creature: {
			tags: ['Elemental', 'Darkbound'],
            abilities: ['Cover'],
			overlays: [ { image_num: 25 } ],
			attack: 4,
			life: 5,
			move: 1,
            triggered_abilities: [{
				name: "Dark Awakening",
				rules: "When summoned, each enemy in the lane loses X life.",
				on_summoned: "def(class creature creature, class game game) ->commands
                    map(game.creatures, if(game.current_player_index != value.controller and (not value.is_construct) and (not value.is_building) and value.loc[0] = creature.loc[0], [
			add(value.life, -creature.channel),
		]))",
            }],
			image_num: 35
		}
	},

	"Vampire": {
		name: "Vampire",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "vampire.png",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: ['Life Drain'],
			attack: 5,
			sound_summoned: "creatures/summon-vampire.wav",
			sound_death: "creatures/death-vampire.wav",
			life: 4,
			move: 1,
			image_num: 16,
		}
	},

	"Flesh Golem": {
		name: "Flesh Golem",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "flesh-golem.png",
		portrait_focus: [340,222],
		portrait_focus_height: 200,
		artist: "wendyyoon",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			sound_summoned: "creatures/summon-flesh-golem.wav",
			sound_death: "creatures/death-flesh-golem.wav",
			activated_abilities: [
				{
					name: 'Remake',
					cost: 1,
					school: "@eval BLOOD",
					is_response: false,
                    uses_action: true,
					rules: "Restore Flesh Golem",
					is_usable: "def(class game game, class creature creature) ->bool true",
					on_play: "def(class game game, class message.play_card info) ->commands [
						creature.restore(game)
					] where creature = info.get_creature(game)"
				}
			],
			tags: ['Construct', 'Golem'],
			attack: 7,
			life: 5,
			move: 1,
		}
	},

	"Kelos, the Devourer": {
		name: "Kelos, the Devourer",
		set: "core",
		rarity: 2,
		type: "Creature",
		portrait: "kelos-the-devourer.png",
		cost: 6,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		hero: true,
		creature: {
			attack: 4,
			life: 4,
			triggered_abilities: [{
				name: "Devour",
				rules: "When summoned, all other creatures get +2/-2 until end of turn. Gets +2/+2 every time a creature dies this turn.",
				on_summoned: "def(class creature creature, class game game) ->commands
				[
					[
						[
						c.apply_effect_until_end_of_turn('life', -2),
						c.apply_effect_until_end_of_turn('attack', 2)
						]
						| c <- game.creatures, c != creature
					],

					creature.add_triggered_ability_until_end_of_turn({
						name: 'Reaping',
						rules: '',
						hidden_on_creature: true,

						on_another_creature_died: q(def(class creature creature, class game game, class creature victim) ->commands
						[
							add(creature.life, 2),
							add(creature.attack, 2),
						]
						),
						
					}),
				]
				",
			}]
		},
	},

	"Gezzix, Lord of Death": {
		name: "Gezzix, Lord of Death",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "gezzix-lord-of-death.png",
		portrait_focus: [402,176],
		portrait_focus_height: 160,
		artist: "lisanguyen",
		cost: 8,
		loyalty_cost: 4,
		school: "@eval BLOOD",
		hero: true,
		help_strings: ['Life Drain', 'Lethal'],
		creature: {
			tags: ['Undead'],
			attack: 8,
			life: 8,
			passive_abilities: [{
				name: "Death to Life",
				rules: "Your creatures have <i>Life Drain</i> and <i>Lethal</i>.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   [target.add_ability_static_duration('Lethal'),
				     target.add_ability_static_duration('Life Drain')]
				  | target <- game.creatures,
				    target.is_building = false,
				    target.controller = creature.controller
				]"
			}
			],
		}
	},
	
	"Tower of Death": "Duskwind Obelisk",
	
	"Duskwind Obelisk": {
		name: "Duskwind Obelisk",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		portrait: "duskwind-obelisk.png",
		portrait_focus: [385,497],
		portrait_focus_width: 200,
		artist: "lucy",
		creature: {
			tags: ["Tower"],
			life: 6,
			is_construct: true,
			portrait_y_offset: 80,
			particle_effects: ['dark_lane_influence'],
			passive_abilities: [{
				name: "Focused Darkness",
				rules: "Enemy creatures in this lane have -0/-2.",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >=0, [   
                    if(creature.controller != target.controller and creature.loc[0]=target.loc[0],
				    [target.apply_static_effect('life', -2)])
				  | target <- game.creatures,
				    target.is_building = false
				])"
            }],
		}
	},
    
    "Swamp": {
		name: "Swamp",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		portrait: "swamp.png",
		artist: "sara",
		rules: "Non-Entropia creatures in this tile have -2 armor.",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "swamp.png",
			image_num: 18,
			static_ability_effect: "if(creature.loc = target.loc and not target.is_construct and (not BLOOD in target.school), target.apply_static_effect('resistance', -2))",
		},
	},
	
	"Festering Wound": {
		name: "Festering Wound",
		set: "core",
		rarity: 0,
		type: "spell",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		portrait: "festering-wound.png",
		artist: "eleazzaar",
		rules: "Target creature is Poisoned.",
		help_strings: ['Poison'],
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		add(game.creature_at_loc_or_die(info.targets[0]).status_effects, ['Poisoned'])",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		target.ai_value(game)*(9 - target.tiles_from_start))
		where target = game.creature_at_loc_or_die(targets[0])",
	},

	"Dark Fate": {
		name: "Dark Fate",
		set: "core",
		rarity: 0,
		type: "spell",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		portrait: "festering-wound.png",
		rules: "Your opponent sacrifices one of their creatures",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		null",

		on_play: "def(class game game, class message.play_card info) ->commands

		if(info.choices, [
			set(creatures[info.choices[0]].sacrificed, true)
			where creatures = filter(game.creatures, value.controller = game.current_player_index)
		],

		choices,
		game.set_current_choice({
			card: me,
			info: info,
			text: 'Choose a creature to sacrifice',
			player_index: (game.current_player_index+1)%2,
			options: choices
		})
		)

		where choices = map(filter(game.creatures, value.controller = (game.current_player_index+1)%2), value.loc)
		",
	},

	"Chill Wind": "Hypothermia",
	
	"Hypothermia": {
		name: "Hypothermia",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval ENTROPIA",
		portrait: "hypothermia.png",
		portrait_focus: [413,454],
		portrait_focus_height: 180,
		artist: "lucy",
		cost: 2,
		loyalty_cost: 1,
		is_response: true,
		rules: "Target creature gets -0/-4 this turn.",
		//flavour_text: "This is the sort of cold, damp wind your mother told you to come in out of. Too bad you're in the middle of a battle.",
		flavor_text: "Hundreds were slain by the sword, but
thousands perished in the chill winds of winter.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		game.creature_at_loc_or_die(info.targets[0])
		.apply_effect_until_end_of_turn('life', -4)
		asserting size(info.targets) = 1",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, -10000,
		if(target.life <= 4, target.ai_value(game)*10, 0))
		where target = game.creature_at_loc_or_die(targets[0])",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

	"Obliterate": {
		name: "Obliterate",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval BLOOD",
		portrait: "obliterate.png",
		cost: 4,
		loyalty_cost: 3,
		is_response: false,
		rules: "<i>Obliterate</i> target creature",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			set(game.creature_at_loc_or_die(info.targets[0]).destroyed, true),
			set(game.creature_at_loc_or_die(info.targets[0]).obliterated, true),
		]",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

	"Knife in the Dark": {
		name: "Knife in the Dark",
		sound_windup: "spells/spell-windup-knife-in-the-dark.wav",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval BLOOD",
		portrait: "knife-in-the-dark.png",
		artist: "lucy",
		portrait_focus: [658,446],
		portrait_focus_width: 190,
		background_color_top: "{ red: 0.33, green: 0.24, blue: 0.18 }",
		background_color_bot: "{ red: 0.05, green: 0.02, blue: 0.02 }",
		cost: 3,
		loyalty_cost: 2,
		is_response: true,
		rules: "Destroy target non-hero creature.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		if(targets = [], 
			[creature.loc | creature <- game.creatures, not creature.is_building, not creature.hero, creature.is_valid_target(game, avatar.controller, me)])",
		on_play: "def(class game game, class message.play_card info) ->commands
		set(game.creature_at_loc_or_die(info.targets[0]).destroyed, true)",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		target.ai_value(game)*10
		) where target = game.creature_at_loc_or_die(targets[0])",
		
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

	"Doom": {
		name: "Doom",
		sound_windup: "spells/spell-windup-knife-in-the-dark.wav",
		set: "core",
		rarity: 0,
		type: "spell",
		school: "@eval BLOOD",
		portrait: "doom.png",
		cost: 3,
		loyalty_cost: 3,
		is_response: false,
		rules: "Target creature is destroyed at the start of your next turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		add(target.triggered_abilities,
		[
		construct('triggered_ability', {
			name: 'Doomed',
			rules: q(Dies at start of opponent's turn),
			on_begin_turn: q^def(class creature creature, class game game) ->commands
				if(game.nturn%2 = ^ + str(info.player_index) + q^,
					set(creature.destroyed, true)
				)
			^,
		})
		])
		where target = game.creature_at_loc_or_die(info.targets[0])
		",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

	"Pestilence": {
		name: "Pestilence",
		set: "core",
		rarity: 1,
		type: "spell",
		school: "@eval BLOOD",
		portrait: "plague_doctor.png",
		cost: 5,
		loyalty_cost: 3,
		rules: "Poison all creatures that are not undead.",

		on_play: "def(class game game, class message.play_card info) ->commands
		map(game.creatures, if (value.is_building = false and 'Undead' not in value.tags,
					add(value.status_effects, ['Poisoned'])))",
	},
	
	"Dark Emissary": {
		name: "Dark Emissary",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "dark-emissary.png",
		portrait_focus: [379,172],
		portrait_focus_height: 160,
		artist: "wendyyoon",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ['Vampire', "Undead"],
			attack: 5,
			life: 5,
			move: 1,
            max_actions: 2,
			sound_summoned: "creatures/summon-dark-emissary.wav",
			sound_death: "creatures/death-dark-emissary.wav",
			image_num: 43,
			
			activated_abilities: [
			{
				name: "Dark Sacrifice",
				cost: 1,
				school: "@eval BLOOD",
				is_response: true,
                uses_action: true,
				rules: "Destroy another target creature you control. Gains its attack and life.",
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.controller = creature.controller, not c.is_building])
				",
				on_play: "def(class game game, class message.play_card info) ->commands
				[
					set(target_creature.destroyed, true),
					add(creature.life, target_creature.life),
					add(creature.attack, target_creature.attack),
				] where creature = info.get_creature(game)
				  where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			}
			],
		}
	},
	
	"Blood Altar": {
		name: "Blood Altar",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 5,
        loyalty_cost: 1,
		portrait: "bloodaltar.png",
		portrait_focus: [235,552],
		portrait_focus_height: 60,
		artist: "stephenwang",
		school: "@eval BLOOD",
		rules: "When a creature dies, deal one damage to your opponent.",
		creature: {
			tags: ['Altar'],
			attack_player_anim: 'bloodcord',
			is_construct: "true",
			on_another_creature_died: "def(class game game, class creature victim) ->commands
			if(me.controller != -1 and (not victim.is_building) and (not victim.is_construct), [
				add(game.players[(me.controller+1)%2].life, -1),
				add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', target_player: (me.controller+1)%2, source: me, amount: 1})]),
			])"
		}
	},

	"Doomsday Crypt": {
		name: "Doomsday Crypt",
		set: "core",
		rarity: 2,
		type: "creature",
		hero: true,
		cost: 5,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		portrait: "doomsday-crypt.png",
		rules: "<b>0 Energy&emdash;</b>+1 at start of your turn.",
		creature: {
			is_construct: true,
			portrait_scale: 0.15,
			portrait_y_offset: 20,
			attack_player_anim: 'bloodcord',
            passive_abilities: [{
				name: "Certain Doom",
				rules: "Enemies have -X/-X. At the start of your turn you take X damage.",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >=0, [   
                    if(creature.controller != target.controller,
				    [
						target.apply_static_effect('life', -creature.energy),
						target.apply_static_effect('attack', -creature.energy),
					])
				  | target <- game.creatures,
				    target.is_building = false
				])"
			}],

			triggered_abilities: [{
				name: "Ratchet",
				rules: "none",
				hidden_on_creature: true,
				on_begin_turn: "def(class creature creature, class game game) ->commands
				if(game.current_player_index = creature.controller, [
					if(creature.energy > 0, [
						add(game.players[creature.controller].life, -creature.energy),
						add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', target_player: creature.controller, source: creature, amount: creature.energy})]),
					]),

					add(creature.energy, 1),
				])
				",
			}],
		},
	},
	
	"Assassin's Den": {
		name: "Assassin's Den",
		set: "core",
		rarity: 2,
		type: "creature",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		portrait: "assassins-den.png",
		artist: "CatBlack",
		creature: {
			tags: ['Base'],
			life: 4,
			image_num: 12,
			portrait_scale: .15,
			portrait_y_offset: 60,
			is_construct: "true",
			triggered_abilities: [{
				name: 'Training',
				rules: "Creatures you summon in this lane are <i>Lethal</i>.",
				on_another_creature_summoned: "def(class creature creature, class game game, class creature new_creature) ->commands
					if(new_creature.loc[0] = creature.loc[0] and new_creature.controller = creature.controller and new_creature != creature,
					   [add(new_creature.abilities, ['Lethal'])])",
		}],
		}
	},

	"Nether Word": {
		name: "Nether Word",
		set: "core",
		rarity: 0,
		type: "spell",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		school: "@eval BLOOD",
		portrait: "nether-word.png",
		artist: "eleazzaar",
		flavor_text: "The universe has a way of dealing with pretenders to the occult.",
		rules: "Target creature gets -2/-2 this turn.",

		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			game.creature_at_loc_or_die(info.targets[0])
			.apply_effect_until_end_of_turn('life', -damage),
			game.creature_at_loc_or_die(info.targets[0])
			.apply_effect_until_end_of_turn('attack', -damage),
		]
			asserting size(info.targets) = 1
			where damage = 2
		",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

    "Curse": "Pain",
    
	"Pain": {
		name: "Pain",
		set: "core",
		rarity: 0,
		type: "spell",
        tags: ['Curse'],
		cost: 0,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		portrait: "curse.png",
		portrait_focus: [319,345],
		portrait_focus_height: 140,
		artist: "lucy",
		rules: "Target creature or player loses one life. Draw a card.",

		possible_targets: "all_creatures_and_players_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
		game.players[game.current_player].draw_cards(game, 1),
		if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -1),

		  //targeting a creature
		  add(creature.life, -1)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]))
		]",
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

	"Sleep": {
		name: "Sleep",
		//set: "core",
		rarity: 1,
		type: "spell",
		cost: 1,
		loyalty_cost: 1,
		is_response: true,
		school: "@eval BLOOD",
		portrait: "mal-ravanal.png",
		rules: "DEPRECATED CRAD",
		flavor_text: "Make yourself at home...",

		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
		game.players[game.current_player].draw_cards(game, 1),
		target.set_sleeping()
			where target = game.creature_at_loc_or_die(info.targets[0])
//		target.apply_creature_effect(game, apply_fcn, remove_fcn, {}, DURATION_BEGINNING_NEXT_TURN)
//			where target = game.creature_at_loc_or_die(info.targets[0])
//			where apply_fcn = def(class game game, class creature creature, map info)->commands [creature.set_sleeping()]
//			where remove_fcn = def(class game game, class creature creature, map info)->commands [creature.set_awake()]
		]"
	},


}
