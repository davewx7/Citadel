{
	"Vampire": {
		name: "Vampire",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: BLOOD,
		rarity: 0,
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: ['Life Drain'],
			attack: 1,
			life: 2,
			move: 2,
			initiative: 20,
			image_num: 16,
		}
	},

	"Vampire Lord": {
		name: "Vampire Lord",
		type: "creature",
		cost: 4,
		loyalty_cost: 4,
		school: BLOOD,
		rarity: 1,
		rules: "'Vampire' creatures you control in this lane have &+;&1;&attack;.",
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: ['Life Drain'],
			attack: 2,
			life: 3,
			move: 2,
			initiative: 20,
			image_num: 7,
			static_ability_effect: "[if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0] and ('Vampire' in target.tags), target.apply_static_effect('attack', 1))]",
		}
	},

	"Dark Emissary": {
		name: "Dark Emissary",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: BLOOD,
		rarity: 0,
		rules: "When Dark Emissary kills a creature, remove all wounds from that creature and gain control of it.",
		creature: {
			tags: ['Vampire', "Undead"],
			attack: 2,
			life: 3,
			move: 2,
			initiative: 20,
			image_num: 43,
			on_kill: "def(class game game, class creature victim) ->commands if(not victim.is_building, if(resurrect, [resurrect, set(victim.controller, me.controller), set(victim.wounds, 0)]) where resurrect = game.return_from_graveyard(victim))",
		}
	},

	"Vampire Bat": {
		name: "Vampire Bat",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: BLOOD,
		rarity: 0,
		rules: "",
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: [ "Flying" ],
			
			activated_abilities: [
				{
					name: "Transform",
					cost: 1,
					school: BLOOD,
					rules: "Transform this creature into a Vampire.",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands creature.transform(game, map<- lib.citadel.create_creature('Vampire'))"
				}
			],
			attack: 1,
			life: 1,
			move: 3,
			initiative: 20,
			image_num: 27,

			//the bat has a shadow.
			overlays: [{
				image_num: 0,
				alpha: 0.5,
			}],
		}
	},

	"Blood Altar": {
		name: "Blood Altar",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: BLOOD,
		rarity: 0,
		rules: "When a creature dies, you gain &+;&1;&mana;.",
		creature: {
			tags: ['Tower'],
			life: 2,
			image_num: 12,
			is_construct: "true",
			on_another_creature_died: "def(class game game, class creature victim) ->commands
			  if((not victim.is_building), add(game.players[me.controller].resources, 1))"
		}
	},

	"Zombie": {
		name: "Zombie",
		type: "creature",
		cost: 1,
		loyalty_cost: 2,
		school: BLOOD,
		rarity: 0,
		rules: "When Zombie is summoned, it gets &+;&1;&exhaust;.\nWhen Zombie destroys a creature, summon a Zombie in its place.",
		creature: {
			tags: ['Zombie', "Undead"],
			attack: 2,
			life: 2,
			move: 1,
			initiative: 10,
			image_num: 4,
			on_summoned: "def(class game game) ->commands
			   add(me.status_effects, ['Exhausted']*2)",
			on_kill: "def(class game game, class creature victim) ->commands
			   if(not victim.is_building, game.summon_creature(
				     lib.citadel.create_creature('Zombie', {
						name: 'Zombie',
						controller: me.controller,
						loc: victim.loc,
					 })))
			",
		}
	},
	
	"Lich": {
		name: "Lich",
		type: "creature",
		cost: 6,
		loyalty_cost: 5,
		school: BLOOD,
		rarity: 1,
		rules: "Lich takes half combat damage from non-&blood; sources.",
		creature: {
			tags: ["Lich", "Undead"],
			abilities: ["Life Drain"],
			attack: 3,
			life: 5,
			move: 2,
			initiative: 25,
			image_num: 28,
			resistance_against: "
			  def(class game game, class creature attacker, int damage) ->int
			    if(not (2 in attacker.school), 0, damage / 2)",
		}
	},
	
	"Ghost": {
		name: "Ghost",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: BLOOD,
		rarity: 0,
		rules: "When Ghost dies, return it to its owner's hand.",
		creature: {
			tags: ["Ghost", "Undead"],
			attack: 2,
			life: 2,
			move: 2,
			abilities: ["Flying"],
			initiative: 20,
			image_num: 34,
			on_die: "def(class game game) ->commands [
				set(game.graveyard, remove_from_map(game.graveyard, summon_id)), 
				add(game.players[controller].hand, [lib.citadel.create_card('Ghost')])
			]",
		},
	},
	
	"Marcavis' Ghost": {
		name: "Marcavis' Ghost",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: BLOOD,
		rarity: 1,
		rules: "When Marcavis' Ghost dies, return it to its owner's hand.",
		creature: {
			tags: ["Ghost", "Undead"],
			attack: 1,
			life: 3,
			move: 3,
			abilities: ["Flying"],
			initiative: 20,
			image_num: 54,
			on_die: "def(class game game) ->commands [
				set(game.graveyard, remove_from_map(game.graveyard, summon_id)), 
				add(game.players[controller].hand, [lib.citadel.create_card(q(Marcavis' Ghost))])
			]",
		},
	},
	
	"Skeleton": {
		name: "Skeleton",
		type: "creature",
		cost: 3,
		loyalty_cost: 1,
		school: BLOOD,
		rarity: 0,
		rules: "When Skeleton dies, summon a Skeleton Corpse in its place.",
		creature: {
			tags: ["Skeleton", "Undead"],
			attack: 2,
			life: 2,
			move: 2,
			initiative: 20,
			image_num: 13,
			// has sword
			overlays: [{image_num: 7}],
			on_die: "def(class game game) ->commands
			  game.summon_construct(
			    lib.citadel.create_creature('Skeleton Corpse', 
				{
					name: 'Skeleton Corpse',
					controller: me.controller,
					loc: me.loc,
				}))",
		},
	},

	"Skeleton Corpse": {
		name: "Skeleton Corpse",
		type: "creature",
		cost: 0,
		loyalty_cost: 4,
		school: BLOOD,
		creature: {
		tags: ["Construct", "Undead"],
		token: true,
		life: 1,
		sprite_sheet: "creature",
		image_num: 8,
		is_construct: true,
		activated_abilities: [{
			name: 'Resurrect',
			cost: 2,
			school: BLOOD,
			is_response: false,
			exhausts_creature: false,
			rules: 'Sacrifice this creature, summon a Skeleton in its place.',
			on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
			 [game.summon_creature(
			    lib.citadel.create_creature('Skeleton',
				{
					name: 'Skeleton',
					controller: creature.controller,
					loc: creature.loc
			    })), set(creature.destroyed, true)]",
		}]
		},
	},

	"Soothsayer": {
		name: "Soothsayer",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: BLOOD,
		rarity: 0,
		rules: "When Soothsayer dies, draw a card",
		creature: {
			tags: ['Human'],
			attack: 2,
			life: 1,
			move: 2,
			image_num: 21,
			on_die: "def(class game game) ->commands
			  game.players[controller].draw_cards(game, 1)",
		}
	},

	"Dark Knight": {
		name: "Dark Knight",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: BLOOD,
		rarity: 0,
		creature: {
			tags: ['Undead'],
			attack: 4,
			life: 3,
			move: 2,
			image_num: 19,
		}
	},

	"Blood Harvest": {
		name: "Blood Harvest",
		type: "spell",
		school: BLOOD,
		cost: 0,
		loyalty_cost: 3,
		is_response: true,
		rarity: 0,
		rules: "When a creature dies this turn, you gain &+;&2;&mana;.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.players[game.current_player]
			.creature_avatar.add_triggered_ability_until_end_of_turn({
				name: q(Blood Harvest),
				on_another_creature_died: q(def(class creature creature, class game game, class creature victim) ->commands
				if(not victim.is_building, [
					add(game.players[creature.controller].resources, 2)
				]))
			})"
	},

	"Thirst for Blood": {
		name: "Thirst for Blood",
		type: "spell",
		school: BLOOD,
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rarity: 0,
		rules: "Target creature gains Life Drain.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['Life Drain'])"
	},

	"Knife in the Dark": {
		name: "Knife in the Dark",
		type: "spell",
		school: BLOOD,
		cost: 4,
		loyalty_cost: 4,
		is_response: false,
		rarity: 0,
		rules: "Destroy target creature.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).destroyed, true)",

		ai_score: "def(class game game, [[int]] targets) ->int
		  if(target.controller = game.current_player_index, 0,
				target.ai_value(game)*10
			) where target = game.creature_at_loc_or_die(targets[0])",
		
		runes: [
		{
			color: 'black',
			points: [[20,100], [80,0], [80,0], [80,100]]
		},
		{
			color: 'red',
			points: [[0,50], [100,50], [100,50]]
		},
		],

	},

	"Sudden Illness": {
		name: "Sudden Illness",
		type: "spell",
		school: BLOOD,
		cost: 2,
		loyalty_cost: 4,
		is_response: true,
		rarity: 1,
		rules: "Target creature gets &-;&2;&life; this turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.creature_at_loc_or_die(info.targets[0])
		  .apply_effect_until_end_of_turn('life', -2)",

		ai_score: "def(class game game, [[int]] targets) ->int
		  if(target.controller = game.current_player_index, 0,
		   if(target.life - target.wounds <= 2, target.ai_value(game)*10, 0))
				  where target = game.creature_at_loc_or_die(targets[0])",
	},

	"Slow Illness": {
		name: "Slow Illness",
		type: "spell",
		school: BLOOD,
		cost: 2,
		loyalty_cost: 4,
		is_response: false,
		rarity: 1,
		rules: "Target creature gets &-;&2;&life; this turn.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.creature_at_loc_or_die(info.targets[0])
		  .apply_effect_until_end_of_turn('life', -2)",

		ai_score: "def(class game game, [[int]] targets) ->int
		  if(target.controller = game.current_player_index, 0,
		   if(target.life - target.wounds <= 2, target.ai_value(game)*10, 0))
				  where target = game.creature_at_loc_or_die(targets[0])",
	},
	
	"Chill Wind": {
		name: "Chill Wind",
		type: "spell",
		school: BLOOD,
		cost: 2,
		is_response: false,
		rules: "Target creature gets &-;&1;&life; this turn.",
		//flavour_text: "This is the sort of cold, damp wind your mother told you to come in out of. Too bad you're in the middle of a battle.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.creature_at_loc_or_die(info.targets[0])
		  .apply_effect_until_end_of_turn('life', -1)
			asserting size(info.targets) = 1",

		ai_score: "def(class game game, [[int]] targets) ->int
		  if(target.controller = game.current_player_index, 0,
		   if(target.life - target.wounds <= 1, target.ai_value(game)*10, 0))
				  where target = game.creature_at_loc_or_die(targets[0])",
	},

	"Dark Coven": {
		name: "Dark Coven",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: BLOOD,
		rarity: 0,
		rules: "Creatures you control in this lane have Life Drain.",
		creature: {
			tags: ["Tower"],
			life: 3,
			is_construct: true,
			image_num: 1,
			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], target.add_ability_static_duration('Life Drain'))",
		}
	},

	"Tower of Death": {
		name: "Tower of Death",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: BLOOD,
		rarity: 0,
		rules: "Enemy creatures in this lane have &-;&1;&life;.",
		creature: {
			tags: ["Tower"],
			life: 3,
			is_construct: true,
			image_num: 1,
			static_ability_effect: "if(creature.controller != target.controller and creature.loc[0] = target.loc[0], target.apply_static_effect('life', -1))",
		}
	},

	"Festering Wound": {
		name: "Festering Wound",
		type: "spell",
		cost: 2,
		loyalty_cost: 1,
		school: BLOOD,
		rarity: 0,
		rules: "Target creature gains Poisoned.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).status_effects, ['Poisoned'])",

		ai_score: "def(class game game, [[int]] targets) ->int
		  if(target.controller = game.current_player_index, 0,
		   target.ai_value(game)*(9 - target.tiles_from_start))
			  where target = game.creature_at_loc_or_die(targets[0])",
	},

	"Fleshworks": {
		name: "Fleshworks",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: BLOOD,
		rarity: 1,
		rules: "When a creature attacks this building with &attack;, gain control of that creature.",
		creature: {
			tags: ["Tower"],
			abilities: ["Fortification"],
			life: 3,
			sprite_sheet: 'building',
			image_num: 1,
			on_attacked: "
			  def(class game game, class creature attacker, int damage) ->commands
			    if(attacker.controller != me.controller and attacker.range = 1,
			       set(attacker.controller, me.controller))",
		},
	},

	"Fiendish Sprite": {
		name: "Fiendish Sprite",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: BLOOD,
		rarity: 0,
		rules: "When Fiendish Sprite attacks a creature, that creature gains Poisoned.",
		creature: {
			tags: ["Fiend", "Undead"],
			attack: 1,
			life: 1,
			move: 3,
			image_num: 55,
			on_attacked: "
			  def(class game game, class creature attacker, int damage) ->commands
			    if(damage != 0 and attacker.controller != me.controller and
			       (not attacker.is_building),
				   add(attacker.status_effects, ['Poisoned']))",
		},
	},
	
	"Witch-King": {
		name: "Witch-King",
		cost: 4,
		loyalty_cost: 2,
		school: BLOOD,
		rarity: 2,
		rules: "Creatures you control have &+;&1;&attack;, &+;&2;&life;. When Witch-King dies, destroy all creatures you control.",
		creature: {
			tags: ["Witch", "Human"],
			attack: 3,
			life: 4,
			move: 2,
			image_num: 7,
			on_die: "def(class game game) ->commands
			  map(game.creatures,
			      if(value.controller = controller and not value.is_building,
			         set(value.destroyed, true)))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and not target.is_building, 
				[target.apply_static_effect('attack', 1), 
				target.apply_static_effect('life', 2)])",
		},		
	},
	
	"Krelethi the Soul-Devourer": {
		name: "Krelethi the Soul-Devourer",
		cost: 5,
		loyalty_cost: 3,
		school: BLOOD,
		hero: true,
		rarity: 2,
		rules: "All 'Undead' creatures you control have &+;&1;&attack;. When Krelethi the Soul-Devourer destroys a creature, remove all wounds from that creature and gain control of it. It becomes 'Undead'.",
		//flavour_text: "Reaching from the afterlife, destroying the souls of humanity",
		creature: {
			tags: ['Undead'],
			abilities: ['Life Drain'],
			attack: 4,
			life: 4,
			move: 2,
			image_num: 7,
			on_kill: "def(class game game, class creature victim) ->commands
			  if(not victim.is_building, if(resurrect, [resurrect, set(victim.controller, me.controller), set(victim.wounds, 0), add(victim.tags, ['Undead'])]) where resurrect = game.return_from_graveyard(victim))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and not target.is_building and 'Undead' in creature.tags, target.apply_static_effect('attack', 1))",
		},		
	},
	
	"Patched Horror": {
		name: "Patched Horror",
		cost: 4,
		loyalty_cost: 3,
		school: BLOOD,
		rarity: 1,
		rules: "When Patched Horror destroys a creature, it gains half the destroyed creature's &attack;.",
		creature: {
			tags: ['Construct', 'Undead'],
			attack: 4,
			life: 4,
			move: 2,
			image_num: 60,
			on_kill: "def(class game game, class creature victim) ->commands
			  if(not victim.is_building, add(me.attack, victim.attack/2))",
		},
	},

	"Sigil of the Red God": {
		name: "Sigil of the Red God",
		type: "creature",
		cost: 0,
		loyalty_cost: 2,
		school: [2, 5],
		rarity: 1,
		rules: "You have &+;&1;&faith; level and &+;&1;&blood; level.",
		creature: {
			tags: ["Sigil"],
			is_construct: true,
			image_num: 1,
			static_effect: "def(class game game) ->commands
			  [game.players[controller].add_static_level_up(2),
			   game.players[controller].add_static_level_up(5)]"
		}
	},
}
