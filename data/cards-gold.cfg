{
	"Armory": {
		name: "Armory",
		set: "core",
		rarity: 1,
		type: "creature",
//		portrait: "school-gold.png",
		portrait: "armory.png",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ["Shrine"],
			life: 8,
			level: 2,
			is_construct: true,
//			portrait_y_offset: 80,
			portrait_scale: 0.15,
			portrait_y_offset: 12,
			image_num: 4,
            passive_abilities: [{
				name: "Equipped",
				rules: "Your creatures in this lane have +2 armor.",
				static_effect: "def(class game game, class creature creature) ->commands 
                [target.apply_static_effect('resistance', 2)
                | target <- game.creatures,
				  (creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0])
                ]"
			}],
            
		}
	},

	"Siege Ballista": {
		name: "Siege Ballista",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "siege-ballista.png",
		portrait_focus: [390,152],
		portrait_focus_width: 250,
		portrait_focus_height: 160,
		artist: "stephenwang",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			is_building: true,
			attack: 3,
			life: 6,
			range: 6,
            abilities: ['Reload'],
            triggered_abilities: [{
				name: "Bombard",
				rules: "At the start of your turn, if Siege Ballista is unblocked, deal 3 damage to your opponent.",
				on_begin_turn: "def(class creature creature, class game game) ->commands
			      if(game.current_player_index = creature.controller and find(game.creatures, value.loc[0] = creature.loc[0] and game.team_index(value.controller) != game.team_index(creature.controller)) = null, [
					add(game.players[(creature.controller+1)%2].life, -3),
					add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', target_player: (creature.controller+1)%2, source: creature, amount: 3})]),	
				  ])
					
				",
			}],
		}
	},
	
	"King's Rider": {
		name: "King's Rider",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "kings-rider.png",
		cost: 5,
		loyalty_cost: 1,
		school: "@eval GOLD",
		creature: {
			tags: ['Human', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 1,
			attack: 6,
			life: 6,
			move: 2,

			activated_abilities: [
				{
					name: 'Maneuver',
					cost: 1,
					school: "@eval GOLD",
					rules: "Spend an action, Move this creature to an adjacent lane. Lose 1 movement until end of turn.",
					uses_action: true,

					possible_targets: "
					 def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
								game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							value[0] != creature.loc[0] and
							game.creature_at_loc(value) = null), null)
					",

					on_play: "def(class game game, class message.play_card info) ->commands [
						set(creature.loc, info.targets[0]),
                        add(creature.spaces_moved_this_turn, 1)
					] asserting size(info.targets) = 1
					  where creature = info.get_creature(game)",
				}
			]
		}
	},

	"Dwarvish Warrior": "Mercenary",
	
	"Mercenary": {
		name: "Mercenary",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "mercenary.png",
		portrait_focus: [408,260],
		portrait_focus_height: 110,
		artist: "lucy",
		cost: 3,
		school: "@eval GOLD",
		creature: {
			tags: ['Human', 'Warrior'],
			attack: 4,
			life: 3,
			move: 1,
			resistance: 1,
		}
	},


	"Stone Elemental": {
		name: "Stone Elemental",
		type: "creature",
		set: "core",
		rarity: 0,
		portrait: "stone-elemental.png",
		portrait_focus: [409,208],
		portrait_focus_height: 260,
		artist: "lisanguyen",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
		school: "@eval GOLD",
		creature: {
			tags: ['Elemental', 'Stonebound'],
			overlays: [ { image_num: 25 } ],
			attack: 4,
			life: 7,
			move: 1,
            triggered_abilities: [{
				name: "Rock Solid",
				rules: "Gains 1 armor per mana spent on channeling.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.resistance, creature.channel),
                ]",
            }],
			image_num: 35
		}
	},
    

	
	"Loyal Guard": {
		name: "Loyal Guard",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "loyal-guard.png",
		cost: 4,
		school: "@eval GOLD",
		creature: {
			tags: ['Human', 'Warrior'],
			abilities: ['Valiant'],
			attack: 5,
			life: 4,
			move: 1,
		}
	},

	"Thunderer": {
		name: "Thunderer",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 5,
		loyalty_cost: 0,
		portrait: "thunderer.png",
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
            abilities: ['Reload'],
			attack: 6,
			life: 4,
			move: 1,
			range: 1,
			resistance: 1,
			image_num: 71,
		}
	},
	
	"Dwarvish Armourer": {
		name: "Dwarvish Armourer",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "dwarvish-armourer.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 3,
			life: 6,
			move: 1,
			resistance: 1,
			image_num: 71,
		}		
	},

	"Jaded Runesmith": {
		name: "Jaded Runesmith",
		set: "core",
		type: "creature",
		portrait: "jaded-runesmith.png",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 6,
			life: 4,
			move: 1,
			resistance: 3,
			image_num: 71,
            triggered_abilities: [{
				name: 'Rune Spark',
				rules: 'When you cast a rune spell, Gain two mana.',
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller and info.card and 'Rune' in info.card.tags,
					   [
                       game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                       game.players[creature.controller].gain_mana_with_hint(game, creature.loc)
                       ])
				",
			}],
		}		
	},
    
    "Biting Rune": {
		name: "Biting Rune",
		set: "core",
		type: "invocation",
        portrait: "biting-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 2,
		loyalty_cost: 3,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Target creature gains 3 attack.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, 3)
					asserting size(info.targets) = 1",
	},
    
    "Blunting Rune": {
		name: "Blunting Rune",
		set: "core",
		type: "invocation",
        portrait: "blunting-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 3,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Target creature gains 2 Armor.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).resistance, 2)
					asserting size(info.targets) = 1",
	},
    
    "Sentry Rune": {
		name: "Sentry Rune",
		set: "core",
		type: "invocation",
        portrait: "sentry-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Place a 6,1 Lightning Ward with feral, cover, first strike, and 0 movement in target hex. May not target a hex where your opponent can summon.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(avatar.controller+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5}))
                      )), null
                      )",
		   on_play: "def(class game game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Lightning Ward', {
			name: 'Lightning Ward',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Lightning Ward": {
		name: "Lightning Ward",
		type: "creature",
		portrait: "sentry-rune.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		creature: {
			tags: ['Ward'],
			abilities: ['First Strike', 'Cover', 'Feral'],
            portrait: "sentry-rune.png",
			image_num: 26,
			attack: 6,
			life: 1,
			move: 0,
            activated_abilities: [
				{
					name: 'Erase',
					cost: 0,
					school: "@eval GOLD",
					rules: "Remove the ward",
					on_play: "def(class game game, class message.play_card info) ->commands [
						set(creature.destroyed, true),
					]
					  where creature = info.get_creature(game)",
				}
			]
            }
	},
    
    
    //'Runewall' is the spell that summons a 'Rune Wall'
        "Runewall": {
		name: "Runewall",
		set: "core",
		type: "invocation",
        portrait: "runewall.png",
		is_response: false,
        tags: ['Rune'],
		cost: 5,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Place a 0,9 Runewall with cover and feral. When attacked the runewall will inflict equal damage back to the creature that attacked. May not target a hex where your opponent can summon.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(avatar.controller+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5}))
                      )), null
                      )",
		   on_play: "def(class game game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Rune Wall', {
			name: 'Rune Wall',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Rune Wall": {
		name: "Rune Wall",
		type: "creature",
		portrait: "runewall.png",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval GOLD",
		rarity: 0,
		creature: {
			tags: ['Ward'],
			abilities: ['Cover', 'Feral'],
            portrait: "runewall.png",
			image_num: 26,
			attack: 0,
			life: 9,
            triggered_abilities: [{
				name: "Rune Retaliation",
				rules: "When an creature deals damage to you, it takes damage equal to the amount inflicted.",
				on_attacked: "def(class creature creature, class game game, class creature attacker, int damage) ->commands
                [
                    if(damage>0 and not creature.targets_attacking(game) = [],
                    attacker.inflict_damage(game, damage)),
                ]",
            }],
			move: 0,
            activated_abilities: [
				{
					name: 'Erase',
					cost: 0,
					school: "@eval GOLD",
					rules: "Remove the Ward",
					on_play: "def(class game game, class message.play_card info) ->commands [
						set(creature.destroyed, true),
					]
					  where creature = info.get_creature(game)",
				}
			]
		}
	},

	"Oldric, Lord of the Hold": {
		name: "Oldric, Lord of the Hold",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "oldric-lord-of-the-hold.png",
		cost: 6,
		loyalty_cost: 3,
		school: "@eval GOLD",
		hero: true,
		creature: {
			tags: ['Dwarf', 'Lord'],
			attack: 8,
			life: 8,
			move: 1,
			resistance: 3,
		}
	},

	"Janus, the Great": "Catherine, Lady of the Blade",
    
	"Catherine, Lady of the Blade": {
		name: "Catherine, Lady of the Blade",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "janus-the-great.png",
		portrait_focus: [244,164],
		portrait_focus_height: 130,
		artist: "stephenwang",
		flavor_text: "He dared call me Cat once. I soon reminded him that cats have claws.",
		cost: 8,
		loyalty_cost: 5,
		school: "@eval GOLD",
		hero: true,
		creature: {
			tags: ['Human', 'Lord'],
			image_num: 46,
			attack: 8,
			life: 8,
			move: 1,
			resistance: 2,
                
            passive_abilities: [{
				name: "Tactician",
				rules: "Creatures you control have +3/+3.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [target.apply_static_effect('attack', 3), target.apply_static_effect('life', 3)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	},
    
        "Kleptron, the Machine Man": {
		name: "Kleptron, the Machine Man",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "kleptron.png",
		flavor_text: "It would be misleading to point out that he has a heart of gold.",
		rules: "+1 mana / turn, and your opponent loses -1 mana / turn.",
		cost: 5,
		loyalty_cost: 1,
		school: "@eval GOLD",
		hero: true,
		creature: {
			tags: ['Golem', 'Lord'],
			image_num: 46,
			attack: 4,
			life: 3,
			move: 1,
			resistance: 2,

			income: "def(class game game) ->int 1",
                	opponent_income: "def(class game game) -> int -1",
		}
	},
    
    "Hillclan Auxillery": {
		name: "Hillclan Auxillery",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "hillclan-auxillery.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf', 'Soldier'],
			image_num: 46,
			attack: 3,
			life: 3,
			move: 1,
			resistance: 0,
                
            passive_abilities: [{
				name: "Aggressive Support",
				rules: "Allies in front of this creature have +2 attack.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [target.apply_static_effect('attack', 2)])
				  | target <- game.creatures,
				    target.is_building = false and if(creature.controller = 0, target.loc = [creature.loc[0],creature.loc[1]+1], target.loc = [creature.loc[0],creature.loc[1]-1])
				]"
			}],
		}
	},

	"Barracks": {
		name: "Barracks",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval GOLD",
		portrait: "barracks.png",
		rules: "You may summon creatures on or adjacent to Barracks.",
		creature: {
			is_construct: true,
            abilities: ['Staging Ground'],
			portrait_scale: 0.15,
			portrait_y_offset: 50,
			allows_summoning: "def(class game game, class creature target) ->[Loc]
			if(not target.is_construct,
			  filter(game.all_locs, (game.locs_adjacent(value, loc) or value = loc) and
			         game.creature_at_loc(value) = null), [])",
		}
	},

	"Wall of Stone": {
		name: "Wall of Stone",
		set: "core",
		rarity: 0,
		type: "creature",
		artist: "lucy",
		cost: 2,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		portrait_focus: [429,236],
		portrait_focus_height: 110,
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			resistance: 1,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
			activated_abilities: [
				{
					name: 'Disassemble',
					cost: 0,
					school: "@eval GOLD",
					rules: "Destroy Wall of Stone, gain one mana.",
					on_play: "def(class game game, class message.play_card info) ->commands [
						set(creature.destroyed, true),
						add(game.players[creature.controller].resources, 1),
					]
					  where creature = info.get_creature(game)",
				}
			]
		}
	},

	"Marlank Wall": {
		name: "Marlank Wall",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			resistance: 1,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
		}
	},

	"Guard Post": {
		name: "Guard Post",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 5,
		loyalty_cost: 1,
		portrait: "guard-post.png",
		artist: "sara",
		school: "@eval GOLD",
		rules: "Guard Post attacks creatures in adjacent lanes.",
		creature: {
			life: 8,
            abilities: ['Reload'],
			range: 1,
			attack: 3,
			image_num: 0,
			is_building: true,
			sprite_sheet: 'building',
			targets_attacking: "def(class game game) ->[class creature]
			if(has_action = false or attack <= 0, [],
			  filter(map(target_locs, if(target and target.controller != controller, target) where target = game.creature_at_loc(value)), value != null)
			   ) where target_locs = game.get_adjacent_locs(loc)",
		}
	},

	"Oldric's Trap": {
		name: "Oldric's Trap",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval GOLD",
		portrait: "oldrics-trap.png",
		artist: "lisanguyen",
		rules: "At the start of your turn, +1 energy. When a non-flying enemy creature enters the trap, it takes two damage for each energy.",
		creature: {
			tags: ["Trap"],
			is_construct: true,

			on_moved_over_by_creature: "def(class game game, class creature creature) ->commands
			  if(creature.controller != me.controller and energy > 0,
			  [
				 creature.inflict_combat_damage(game, me, me.energy*2),
				 set(me.destroyed, true)
			  ])",

			on_begin_turn: "def(class game game) ->commands
			                 if(game.current_player_index = me.controller,
							    add(me.energy, 1))",
		}
	},
    
    "Hill": {
		name: "Hill",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval GOLD",
		portrait: "hill.png",
		rules: "Materia creatures in this tile have +1 armor",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "hill.png",
			image_num: 18,
			static_ability_effect: "if(creature.loc = target.loc and not target.is_construct and (GOLD in target.school), target.apply_static_effect('resistance', 1))",
		},
	},
	"Armed to the Teeth": "Anthem of Battle",
	
	"Anthem of Battle": {
		name: "Anthem of Battle",
		set: "core",
		rarity: 1,
		type: "invocation",
		portrait: "anthem-of-battle.png",
		portrait_focus: [420,271],
		portrait_focus_height: 250,
		artist: "stephenwang",
		school: "@eval GOLD",
		cost: 4,
		loyalty_cost: 2,
		rules: "Creatures you control gain +1 attack, +1 armor, and +1 life.",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures, creature, if(game.current_player_index = creature.controller and (not creature.is_construct) and (not creature.is_building), [
			add(creature.resistance, 1),
			add(creature.life, 1),
			add(creature.attack, 1)
		]))",
	},
    
	"Toughness": {
		name: "Toughness",
		set: "core",
		rarity: 0,
		type: "invocation",
		school: "@eval GOLD",
		portrait: "toughness.png",
		artist: "eleazzaar",
		cost: 1,
		loyalty_cost: 2,
        is_response: true,
		rules: "Target creature gains +4 armor until the end of the turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
            game.creature_at_loc_or_die(info.targets[0]).apply_effect_until_end_of_turn('resistance', 4)
        ",
	},

	"Tactical Maneuver": {
		name: "Tactical Maneuver",
		set: "core",
		rarity: 1,
		type: "invocation",
		portrait: "tactical-maneuver.png",
		school: "@eval GOLD",
		cost: 1,
		loyalty_cost: 2,
        is_response: false,
		rules: "Move target friendly creature to vacant adjacent tile",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
			switch(size(targets),
			  0, my_creatures_as_possible_targets(game, avatar, targets),
			  1, if(creature, filter(game.all_locs, game.locs_adjacent(value, creature.loc) and game.creature_at_loc(value) = null), []) where creature = game.creature_at_loc(targets[0]),
			  null)

		",

		on_play: "def(class game game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).loc, info.targets[1])",
	},
    
    "Staged Duel": {
		name: "Staged Duel",
		set: "core",
		rarity: 1,
		type: "invocation",
		portrait: "staged-duel.png",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
        is_response: false,
		rules: "Target an allied creature, then target an adjacent creature. Inflict damage to each equal to the attack of the other.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
			switch(size(targets),
			  0, my_creatures_as_possible_targets(game, avatar, targets),
			  1, if(creature, filter(game.all_locs, game.locs_adjacent(value, creature.loc) and (not game.creature_at_loc(value) = null)), []) where creature = game.creature_at_loc(targets[0]),
			  null)

		",

		on_play: "def(class game game, class message.play_card info) ->commands
            if(targetA and targetB, 
            [targetA.inflict_damage(game, targetB.attack),
            targetB.inflict_damage(game, targetA.attack)])
            where targetA = game.creature_at_loc(info.targets[0])
            where targetB = game.creature_at_loc(info.targets[1])",
	},

	"Taxes and Tolls": {
		name: "Taxes and Tolls",
		type: "invocation",
		portrait: "school-gold.png",
		school: "@eval GOLD",
		cost: 0,
		loyalty_cost: 2,
		is_response: true,
		rules: "Pay all your mana. Your opponent must pay the same amount of mana or their spell fizzles.",

		possible_targets: "
		  def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		    if(game.stack = [] or not (game.stack[size(game.stack)-1] is class message.play_card), [], null)
		",

		on_play: "def(class game game, class message.play_card info) ->commands
		if(info.choices,
			[
				// do whatever they chose
				if (info.choices[0] = 0,
					they_pay,
					fizzle),
				we_pay
			]
				asserting they_can_pay
			,
			if (they_can_pay,
				game.set_current_choice({
					card: me,
					info: info,
					player_index: 1 - info.player_index, // opponent of who played this card
					text: 'Choose whether to pay ' + str(game.players[info.player_index].resources) + ' mana or to let your spell fizzle',
					options: [
							construct('choice.button', {
								text: 'Pay',
								tag: 0,
							}),
							construct('choice.button', {
								text: 'Do not Pay',
								tag: 1,
							})
						],
				}),
				// They can't afford to pay so skip the question
				[
					fizzle,
					we_pay
				]
			)
		)
			asserting game.stack != []
			where fizzle = set(their_spell.force_fizzle, true)
			where we_pay = set(game.players[info.player_index].resources, 0)
			where they_pay = add(game.players[their_spell.player_index].resources, -game.players[info.player_index].resources)
			where they_can_pay = (game.players[their_spell.player_index].resources >= game.players[info.player_index].resources)
			where their_spell = game.stack[size(game.stack) - 1]
		",
	},

	"Bazaar": {
		name: "Bazaar",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "bazaar.png",
		cost: 6,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rules: "Gain +1 mana per turn for each other land you control.",
		creature: {
			tags: ['Marketplace'],
			is_construct: true,
			portrait_y_offset: 75,
			portrait_scale: 0.15,
			income: "def(class game game) ->int count(game.constructs, value.controller = me.controller) - 1", // must subtract self
		}
	},

	"Market": "Mine",




	"Master Fencer": {
		name: "Master Fencer",
		type: "creature",
		set: "core",
		rarity: 1,
		portrait: "master-fencer.png",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			overlays: [ { image_num: 25 } ],
			activated_abilities: [
				{
					name: 'First Strike',
					cost: 1,
					school: "@eval GOLD",
					rules: "This creature gains First Strike this turn.",
					on_play: "def(class game game, class message.play_card info) ->commands
					    creature.add_ability_until_end_of_turn('First Strike')
						  where creature = info.get_creature(game)"
				},

				{
					name: "Lunge",
					cost: 1,
					school: "@eval GOLD",
					rules: "This creature gains +1 attack this turn.",
					on_play: "def(class game game, class message.play_card info) ->commands
					    creature.apply_effect_until_end_of_turn('attack', 1)
					where creature = info.get_creature(game)"
				},

				{
					name: "Swift",
					cost: 2,
					school: "@eval GOLD",
					uses_action: true,
					rules: "This creature gets +1 move this turn.",
					on_play: "def(class game game, class message.play_card info) ->commands
					[
					    creature.apply_effect_until_end_of_turn('move', 1),
					    creature.apply_effect_until_end_of_turn('life', -1),
					] where creature = info.get_creature(game)"
				},

			],
			attack: 4,
			life: 4,
			move: 1,
			image_num: 35
		}
	},

	"Stalwart Warrior": {
		name: "Stalwart Warrior",
		type: "creature",
		portrait: "stalwart-warrior.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 4,
			life: 4,
			move: 0,
			resistance: 3,
		}
	},

	"Guard of the Keep": {
		name: "Guard of the Keep",
		type: "creature",
		portrait: "guard-of-the-keep.png",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval GOLD",

		rules: "Guard of the Keep may be summoned on any construct you control.",

		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [],
				game.players[avatar.controller].summoning_locs(game, creature) +
				filter([bldg.loc | bldg <- game.constructs,
								   bldg.controller = avatar.controller],
				       (not game.creature_at_loc(value)))
			)
			asserting creature
		",
		creature: {
			tags: ['Dwarf'],
			attack: 4,
			life: 4,
			move: 1,
			image_num: 42,

			//carries a sword and shield
			overlays: [ { image_num: 13, }, { image_num: 20, } ],
		}
	},
	
	"Dwarvish Engineer": {
		name: "Dwarvish Engineer",
		type: "creature",
		portrait: "dwarvish-engineer.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval GOLD",
		rules: "You may summon constructs on or adjacent to Dwarvish Engineer.",
		creature: {
			name: 'Dwarvish Engineer',			
			tags: ['Dwarf'],
			allows_summoning: "def(class game game, class creature target) ->[Loc]
			if(target.is_construct,
			  filter(game.all_locs, (game.locs_adjacent(value, loc) or value = loc) and
			         game.construct_at_loc(value) = null), [])",

			school: "@eval GOLD", 
			attack: 2,
			life: 4,
			move: 1,
			image_num: 71,
		}
	},

	"Launchpad": {
		name: "Launchpad",
		type: "creature",
		cost: 1,
		loyalty_cost: 5,
		school: "@eval GOLD",
		rules: "At the start of each turn, a creature on the same tile as Launchpad gets +2 move this turn.",
		creature: {
			is_construct: true,
			on_begin_turn: "def(class game game) ->commands
				map(game.creatures, if(value.loc = me.loc, value.apply_effect_until_end_of_turn('move', 2)))
			"
		}
	},

	"Dwarvish Crossbow": "Thunderer",

	"Ballista": {
		name: "Ballista",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			sprite_sheet: 'building',
			life: 4,
			range: 3,
			attack: 2,
			image_num: 0,
			is_building: true,
		}
	},

	"Eldric's Bazaar": {
		name: "Eldric's Bazaar",
		type: "creature",
		cost: 3,
		loyalty_cost: 4,
		school: "@eval GOLD",
		rules: "-1 Hand size. At the start of your turn, you gain +3 mana;.",
		creature: {
			tags: ["Marketplace"],
			life: 2,
			is_construct: true,
			image_num: 0,

			on_begin_turn: "def(class game game) ->commands
			if(game.current_player = controller,
			   [game.players[controller].gain_mana_with_hint(game, loc)]*3)",

			static_effect: "def(class game game) -> commands
			if(controller >= 0,
			   game.players[controller].apply_static_effect(
				(def(class player p, map info) ->commands add(p.hand_size, -1)),
				(def(class player p, map info) ->commands add(p.hand_size, 1)),
			  {}))",
		}
	},

	"Mine": {
		name: "Mine",
		type: "creature",
		set: "core",
		cost: 3,
		artist: "lucy",
		portrait: "mine.png",
		portrait_focus: [359,560],
		portrait_focus_height: 140,
		school: "@eval GOLD",
		rules: "+1 mana/turn",
		flavor_text: "All the riches on the Earth,
and all the riches beneath it too.",

		creature: {
			tags: ["Mine"],
			portrait_y_offset: 20,
			portrait_scale: 0.15,
			life: 6,
			is_construct: true,
			image_num: 0,

			income: "def(class game game) ->int 1",
		}

	},

	"Stormgard Armory": {
		name: "Stormgard Armory",
		type: "creature",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval GOLD",
		rules: "Creatures you control in this lane have +1 attack and +1 resistance.",
		creature: {
			tags: ["Forge"],
			life: 12,
			is_construct: true,
			image_num: 0,

			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], [target.apply_static_effect('attack', 1), target.apply_static_effect('resistance', 1)])",
		}
	},

	"Dwarf Forge": {
		name: "Dwarf Forge",
		type: "creature",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rules: "Creatures you control in this lane have +1 attack and +1 life.",
		creature: {
			tags: ["Forge"],
			life: 8,
			is_construct: true,
			image_num: 0,

			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], [target.apply_static_effect('attack', 1), target.apply_static_effect('life', 1)])",
		}
	},
	
	"Oldric's Guard": {
		name: "Oldric's Guard",
		type: "creature",
		portrait: "oldrics-guard.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 4,
			life: 4,
			move: 1,
			image_num: 71,
			activated_abilities: [{
				name: 'Sacrifice',
				rules: "Sacrifice Oldric's Guard. Your creatures in this lane are Indestructible this turn.",
				cost: 1,
				is_response: true,
				school: "@eval GOLD",
				on_play: "def(class game game, class message.play_card info) ->commands [
					set(creature.sacrificed, true),
					[friend.add_ability_until_end_of_turn('Indestructible') |
					 friend <- game.creatures,
					 friend.controller = creature.controller,
					 friend != creature, friend.loc[0] = creature.loc[0]]
				]
				  where creature = info.get_creature(game)",
			}],
		}		
	},

	"Shore Up": {
		name: "Shore Up",
		type: "invocation",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		rules: "Target building gains +4 life and +1 resistance.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.summoned, creature.is_valid_target(game, avatar.controller, me)])",
		on_play: "def(class game game, class message.play_card info) ->commands
		  [add(building.life, 4), add(building.resistance, 1)]
		          where building = game.creature_at_loc_or_die(info.targets[0])"
	},
	
	"Armour Up": {
		name: "Armour Up",
		type: "invocation",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 1,
		is_response: true,
		rules: "Target creature gains +1 resistance.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(creature.resistance, 1)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Whites of their Eyes": {
		name: "Whites of their Eyes",
		type: "invocation",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		rules: "Ranged creatures you control gain +1 range, +2 attack, and First Strike this turn.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null null",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures, creature, if(creature.range > 1 and creature.controller = game.current_player, [
			creature.apply_effect_until_end_of_turn('range', 1-creature.range),
			creature.apply_effect_until_end_of_turn('attack', 2),
			creature.add_ability_until_end_of_turn('First Strike')]))",
	},
	
	"Forced March": {
		name: "Forced March",
		type: "invocation",
		portrait: "forced-march.png",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
		rules: "Creatures you control get +2 move and -1 life this turn.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null null",
		on_play: "def(class game game, class message.play_card info) ->commands
			[ [creature.apply_effect_until_end_of_turn('life', -1),
			   creature.apply_effect_until_end_of_turn('move', 2) ] |
			 creature <- game.creatures,
			 creature.controller = game.current_player_index,
			 not creature.is_building]"
	},
	
	"Blessing of Glothorn": {
		name: "Blessing of Glothorn",
		type: "invocation",
		school: "@eval GOLD",
		cost: 0,
		loyalty_cost: 3,
		rules: "All Dwarves gain the ability 'Glothorn\'s Blessing: This creature gets +2 attack and -1 resistance this turn.'",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures,
			if('Dwarf' in creature.tags and find(creature.activated_abilities, value.name = q(Glothorn's Blessing)) != null, 
			add(creature.activated_abilities, [{
				name: q(Glothorn's Blessing),
				cost: 1,
				school: GOLD,
				rules: 'This creature gets +2 attack and -1 resistance this turn.',
				on_play: q(def(class game game, class message.play_card info) ->commands [
					creature.apply_effect_until_end_of_turn('attack', 1),
					creature.apply_effect_until_end_of_turn('resistance', -1)
				] where creature = info.get_creature(game))
			}])) where creature = class creature :: value)",		
	},

	"Rune Cannon": {
		name: "Rune Cannon",
		type: "creature",
		school: "@eval GOLD",
		cost: 3,
		loyalty_cost: 3,
		creature: {
			tags: ["Cannon"],
			is_construct: true,
			image_num: 7,
			attack: 0,
			life: 4,


			on_end_turn: "def(class game game) ->commands
			if(game.current_player_index = controller and has_action,
				add(me.energy, 1)
			)",

			activated_abilities: [{
				name: 'Fire',
				cost: 0,
				school: "@eval GOLD",
				loyalty_cost: 1,
				rules: "Remove all energy from this creature, and target creature or fortification is dealt that much damage.",
				possible_targets: "
				def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
				  if(targets = [], map(game.creatures, value.loc), null)",

				on_play: "def(class game game, class message.play_card info) ->commands [
					add(game.creature_at_loc_or_die(info.targets[0]).life, -creature.energy),
				]
				  where creature = info.get_creature(game)",

				on_pay_cost: "def(class game game, class message.play_card info) ->commands [
					set(creature.energy, 0),
				] where creature = info.get_creature(game)",
			}]
		}
	},
	

	"Training Dummy": {
		name: "Training Dummy",
		type: "creature",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Mechanical'],
			image_num: 77,
			overlays: [ { image_num: 2 }, { image_num: 8 } ],
			attack: 0,
			life: 2,
			move: 0,
		}
	},

	"Onager": {
		name: "Onager",
		set: "core",
		type: "creature",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval GOLD",
		portrait: "loading-a-catapult.png",
		creature: {
			tags: ['Mechanical'],
            abilities: ['Reload'],
			portrait_scale: 0.15,
			portrait_y_offset: -15,
			portrait_x_offset: -15,
			image_num: 78,
			attack: 3,
			range: 2,
			life: 2,
			move: 1,
            passive_abilities: [{
				name: "Siege Engine",
				rules: "When attacking a building, Onager deals double damage.",
				static_effect: "def(class game game, class creature creature) ->commands 
                [if(size(creature.targets_attacking(game))>0 and creature.targets_attacking(game)[0].is_building, creature.apply_static_effect('attack', creature.attack))
                | target <- game.creatures,
				  (creature = target)
                ]"
			}],
		}
	},
	
	"Trebuchet": {
		name: "Trebuchet",
		type: "creature",
		cost: 7,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			tags: ['Mechanical'],
			image_num: 78,
			attack: 4,
			range: 3,
			life: 6,
			move: 1,
		}
	},

	"Agitated Peasant" : {
		name: "Agitated Peasant",
		type: "creature",
		portrait: "agitated_peasant.png",
		school: "@eval GOLD",
		cost: 3,
		creature: {
			tags: ['Human'],
			attack: 3,
			life: 3,
			resistance: 1,
			move: 1,
		}		
	},

	"Rally the People": {
		name: "Rally the People",
		portrait: "rally_the_people.png",
		#artist: "Robert Couse-Baker",
		type: "invocation",
		school: "@eval GOLD",
		set: "core",
		cost: 4,
		loyalty_cost: 2,
		rules: "On each unoccupied tile containing a land that you control (not summoned this turn), you get a 3/3 'Agitated Peasant' with one armor.",

		on_play: "def(class game game, class message.play_card info) -> commands
		map(peasant_hexes, game.summon_creature(
					lib.citadel.create_creature('Agitated Peasant', 
					{
						controller: game.current_player, 
						portrait: 'agitated_peasant.png',
						loc: value,
						is_construct: false,
						school: GOLD,
					})))
		where peasant_hexes = filter(land_locations, 0=size([ creature | creature <- game.creatures, not creature.is_construct, creature.loc = value]))
		where land_locations = [ land.loc | land <- game.constructs, land.controller = game.current_player, not land.summoned_this_turn ]",
	},

	"Bounty": {
		name: "Bounty",
		portrait: "bounty.png",
		type: "invocation",
		school: "@eval GOLD",
		set: "core",
		cost: 2,
		loyalty_cost: 2,
		rules: "Put a price on the head of target creature. If it is later killed in combat, the killer gains 2 attack and 1 armor.",

		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		add(target.triggered_abilities, [{
			name: 'Price on his Head',
			rules: q(If this creature is killed in combat, the killer gains +2 attack and +1 armor.),
			on_die: 'def(class creature died, class game game) -> commands [
				if (died.damage_dealt_killed,
					map(died.hit_by_this_turn(game),
						if (killer is null, [], [ add(killer.attack, 2), add(killer.resistance, 1) ] )
						where killer = game.creature_by_summon_id(int<- value)
					)
				)
			]',
		}])
		where target = game.creature_at_loc_or_die(info.targets[0])
		",
	},

	"Need More Lumber": {
		name: "Need More Lumber",
		type: "invocation",
		cost: 0,
		school: 1,
		rules: "Sacrifice a creature you control, you gain 2 mana.",

		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [], [creature.loc | creature <- game.creatures, creature.controller = game.current_player])
		",
		on_play: "def(class game game, class message.play_card info) ->commands
		 if(game.current_player = creature.controller,[
		     set(creature.destroyed, true),
			 bind_command(fn, game.players[creature.controller]) where fn = def(class player p) add(p.resources, 2)

		]) where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	"Disarmament": {
		name: "Disarmament",
		type: "invocation",
		school: "@eval GOLD",
		cost: 4,
		loyalty_cost: 3,
        is_response: false,
		rules: "All enemy units have 0 attack until end of the turn.",
		on_play: "def(class game game, class message.play_card info) ->commands
            [creature.apply_effect_until_end_of_turn('attack', -creature.attack) | creature <- game.creatures, creature.controller != game.current_player]
        ",
	},
    
	"Cut-Throat": {
		name: "Cut-Throat",
		type: "creature",
        set: "core",
		portrait: "cutthroat.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			attack: 5,
			life: 3,
			move: 1,
            triggered_abilities: [{
                name: "Extort",
                rules: "Draw two cards when this card moves into a land you don't control.",
				on_move_over_construct: "def(class creature creature, class game game, class creature construct) ->commands
            if(construct.controller != creature.controller, [game.players[creature.controller].draw_cards(game, 2)])",
			}],
		}
	},
    
    "Shield Bearer": {
		name: "Shield Bearer",
		type: "creature",
        set: "core",
		portrait: "shield-bearer.png",
		cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
            portrait: "shield-bearer.png",
			attack: 1,
			life: 2,
            resistance: 3,
			move: 1,
		}
	},
	
	"Stoic": {
		name: "Stoic",
		type: "creature",
		set: "core",
		rarity: 0,
		portrait: "stoic.png",
		flavor_text: "Frugality and valor, faith and honor.",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval [FAITH,GOLD]",
		creature: {
			tags: ['Elf'],
			activated_abilities: [
				{
					name: "Call of Valor",
					cost: 1,
					is_response: true,
					school: "@eval [FAITH,GOLD]",				
					rules: "This creature gains +3 attack this turn, the ability doesn't stack.",
					on_play: "def(class game game, class message.play_card info) ->commands
						if (creature.channel > 0, [],						
						[
							creature.apply_effect_until_end_of_turn('channel', 1),	
							creature.apply_effect_until_end_of_turn('attack', 3),
						])
						where creature = info.get_creature(game)",
				}
			],

			abilities: ['Valiant'],
			attack: 3,
			life: 5,
			move: 1,
		}
	},
	
	"Kings Rider": "King's Rider",	
    "Royal Summon": {
		name: "Royal Summon",
		set: "core",
		type: "invocation",
        portrait: "royal-summon.png",
		is_response: false,
		cost: 1,
		loyalty_cost: 3,
		school: "@eval GOLD",
		rarity: 1,
		
		rules: "Put 2 King's Rider into your hand",
		on_play: "def(class game game, class message.play_card info) ->commands
            [
                add(game.players[game.current_player].hand, ['Kings Rider']),
                add(game.players[game.current_player].hand, ['Kings Rider']),
            ]",
	},
}
