{

	"Cleric of the Vanguard": {
		name: "Cleric of the Vanguard",
		type: "creature",
		set: "core",
		portrait: "cleric-of-the-vanguard.png",
		cost: 5,
		school: "@eval FAITH",
		rarity: 0,
		creature: {
			attack: 7,
			life: 6,
		},
	},

	"Devout Priest": {
		name: "Devout Priest",
		type: "creature",
		set: "core",
		portrait: "devout-priest.png",
		cost: 4,
		school: "@eval FAITH",
		rarity: 0,
		help_strings: ['Restore'],
		creature: {
			attack: 4,
			life: 4,
			activated_abilities: [{
				name: "Restore",
				school: "@eval FAITH",
				help_strings: ['Restore'],
				is_response: true,
				rules: "Sacrifice self, target ally is <i>Restored</i>.",
				cost: 1,
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(size(targets) > 0, null,
						[c.loc | c <- game.creatures, c.controller = creature.controller and c != creature]
					)
				",
				on_play: "def(class game game, class message.play_card info) ->commands [
					game.creature_at_loc_or_die(info.targets[0]).restore(game),
					set(creature.destroyed, true),
				] where creature = info.get_creature(game)",
			}],

		},
	},

	"Ardent Defender": {
		name: "Ardent Defender",
		type: "creature",
		set: "core",
		portrait: "ardent-defender.png",
		cost: 4,
		school: "@eval FAITH",
		rarity: 0,
		creature: {
			attack: 4,
			life: 4,
            passive_abilities: [ {
				name: "Righteous Defender",
				rules: "Has +4/+4 when on an &AElig;ther land.",
				static_effect: "def(class game game, class creature creature) ->commands
				if(land and (AETHER in land.school), [
					creature.apply_static_effect('attack', 4),
					creature.apply_static_effect('life', 4),
				]) where land = game.construct_at_loc(creature.loc)",
			}]
		},

	},

	"Liana, the Lost Saint": {
		name: "Liana, the Lost Saint",
		type: "creature",
		set: "core",
		portrait: "liana-the-lost-saint.png",
		cost: 6,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 2,
		hero: true,
		creature: {
			attack: 6,
			life: 6,

			activated_abilities: [{
				name: 'Sacrifice',
				uses_action: false,
				is_response: true,
				school: "@eval FAITH",
				rules: "Sacrifice self, your other creatures are <i>Indestructible</i> this turn.",
				cost: 0,
				//possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null null",
				on_play: "def(class game game, class message.play_card info) ->commands
				[
					set(creature.destroyed, true),
					[c.add_ability_until_end_of_turn('Indestructible') | c <- game.creatures, c.controller = creature.controller, not c.is_building, c != creature],
				] where creature = info.get_creature(game)
				",

			}],
		}
	},


	"Blessed Lance": {
		name: "Blessed Lance",
		type: "spell",
		is_response: true,
		cost: 2,
		loyalty_cost: 2,
		set: "core",
		rarity: 0,
		tags: [],
		school: "@eval FAITH",
		portrait: "blessed-lance.png",
		artist: "eleazzaar",
		help_strings: ["First Strike"],
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_ENEMIES"],
		rules: "Target creature gains <i>First Strike</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['First Strike'])
					asserting size(info.targets) = 1",
	},

	"Oil of Anointing": {
		name: "Oil of Anointing",
		type: "spell",
		is_response: false,
		cost: 2,
		loyalty_cost: 2,
		set: "core",
		rarity: 0,
		school: "@eval FAITH",
		portrait: "oil-of-anointing.png",
		help_strings: ["Cover"],
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_ENEMIES"],
		rules: "Target creature gains +0/+3 and <i>Cover</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
		  add(creature.abilities, ['Cover']),
		  add(creature.life, 3),
		] where creature = game.creature_at_loc_or_die(info.targets[0])",

	},

	"Divine Restoration": {
		name: "Divine Restoration",
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 3,
		set: "core",
		rarity: 0,
		school: "@eval FAITH",
		help_strings: ["Restore"],
		portrait: "divine-restoration.png",
		portrait_focus: [487,484],
		portrait_focus_width: 300,
		artist: "lisanguyen",
		rules: "Target creature is <i>Restored</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			target.restore(game)
		]
			where target = game.creature_at_loc_or_die(info.targets[0])
		",

	},

	"Silence": {
		name: "Silence",
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "silence.png",
		portrait_focus: [387,317],
		portrait_focus_height: 240,
		artist: "lucy",
		set: "core",
		rarity: 1,
		rules: "Target creature is Silenced.",
		help_strings: ["Silence"],

		//Silence can technically be used for benefit on friends,
		//but the AI isn't near smart enough to do this reliably.
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
			[
				set(target.abilities, []),
				set(target.activated_abilities, []),
				set(target.triggered_abilities, []),
				set(target.range, 0),
				set(target.move, 1),
                set(target.max_actions, 1),
				set(target.resistance, 0),
				set(target.passive_abilities, []),
			]
			where target = game.creature_at_loc_or_die(info.targets[0])
		",

	},

	"Hymn to the Goddess": {
		name: "Hymn to the Goddess",
		type: "spell",
		is_response: true,
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		portrait: "hymn-to-the-goddess.png",
		portrait_focus: [200,187],
		portrait_focus_height: 120,
		artist: "stephenwang",
		set: "core",
		rarity: 2,
		rules: "All enemy creatures are <i>Silenced</i>.",
		help_strings: ["Silence"],
		on_play: "def(class game game, class message.play_card info) ->commands
			[
			[
				set(target.abilities, []),
				set(target.activated_abilities, []),
				set(target.triggered_abilities, []),
				set(target.range, 0),
				set(target.move, 1),
				set(target.resistance, 0),
				set(target.passive_abilities, []),
			] |
			target <- game.creatures,
			info.player_index != target.controller,
			target.is_building = false
			]
			where target = game.creature_at_loc_or_die(info.targets[0])
		",

	},

    "Radient Guardian": "Radiant Guardian",
    
    "Radiant Guardian": {
		name: "Radiant Guardian",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "radient-guardian.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval FAITH",
        is_response: true,
		creature: {
			sound_summoned: "creatures/summon-soldier.wav",
			attack: 4,
			life: 4,
            passive_abilities: [{
				name: "Radiant Aura",
				rules: "Adjacent Allies have <i>Cover</i>",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller and game.locs_adjacent(creature.loc, target.loc),
				    [target.add_ability_static_duration('Cover')])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		},
	},
    
    "Orin's Phalanx": {
		name: "Orin's Phalanx",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "orins-phalanx.png",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human', 'Warrior'],
			image_num: 51,
			sound_summoned: "creatures/summon-soldier.wav",
			abilities: ['First Strike'],
			attack: 8,
			life: 4,
		},
	},
    
	"Inquisition": {
		name: "Inquisition",
		set: "core",
		rarity: 1,
		type: "spell",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FAITH",
        is_instant: true,
		portrait: "inquisition.png",
		artist: "eleazzaar",
		rules: "Select a card from your opponent's hand. That card is discarded.",

		on_play: "def(class game game, class message.play_card info) ->commands
		if(info.choices,
		([
			game.opponent_obj.discard_visible(game, game.opponent_obj.hand[info.choices[0]]),
			set(game.opponent_obj.hand, filter(game.opponent_obj.hand, index != info.choices[0])),
		]
			asserting size(info.choices) = 1, info.choices[0] >= 0, info.choices[0] < size(game.opponent_obj.hand) | [info.choices, game.opponent_obj.hand]),

		if(game.opponent_obj.hand, game.set_current_choice({
			card: me,
			info: info,
			text: 'Choose which card your opponent will discard',
			options: map(game.opponent_obj.hand, construct('choice.card', {
				card: value,
				tag: index,
			}))
		}))
		)",
	},
	"Heal": "Blessing of Endurance",

	"Blessing of Endurance": {
		name: "Blessing of Endurance",
		set: "core",
		rarity: 0,
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "blessing-of-endurance.png",
		portrait_focus: [234,133],
		portrait_focus_height: 120,
		artist: "lisanguyen",
		rules: "Target creature gets +0/+3.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).life, 3)
					asserting size(info.targets) = 1",
	},
    
    "Prayer of the Valorous": {
		name: "Prayer of the Valorous",
		set: "core",
		rarity: 0,
		type: "spell",
		cost: 3,
		loyalty_cost: 0,
		portrait: "prayer-of-the-valorous.png",
		school: "@eval FAITH",
		is_response: true,
		rules: "Your creatures gain attack equal to your &AElig;ther level until end of turn.",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures, creature, if(info.player_index = creature.controller and (not creature.is_construct) and (not creature.is_building), 
        [
			creature.apply_effect_until_end_of_turn('attack', game.players[info.player_index].get_resource_level(FAITH))
		]))",
	},
    
	"Rihn, Incarnate": {
		name: "Rihn, Incarnate",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "rihn-incarnate.png",
		portrait_focus: [387,317],
		portrait_focus_height: 240,
		artist: "lucy",
		cost: 8,
		loyalty_cost: 5,
		school: "@eval FAITH",
		hero: true,
		creature: {
			tags: ['Goddess', 'Avatar'],
			abilities: ['Indestructible'],
			sprite_sheet: "creature_large",
			image_num: 1,
			attack: 9,
			life: 9,
			move: 1,
			triggered_abilities: [{
				name: "Obliteration",
                rules: "When Rihn deals damage to a creature, that creature is obliterated.",
				on_deal_damage: "def(class creature creature, class game game, class creature target, int damage) ->commands
					if(damage > 0 and target.is_building = false, set(target.obliterated, true))
				",
			}],
		}
	},

	"Inquisitor": {
		name: "Inquisitor",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "inquisitor.png",
		portrait_focus: [355,213],
		portrait_focus_height: 240,
		artist: "lucy",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval FAITH",
		help_strings: ["Silence"],
		creature: {
			tags: ['Human'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			portrait_y_offset: 20,
			image_num: 25,
			attack: 5,
			life: 6,
			move: 1,
            triggered_abilities: [{
				name: "Silence Heretic",
				rules: "When Inquisitor deals damage to a creature, that creature is Silenced.",
				on_deal_damage: "def(class creature creature, class game game, class creature target, int damage) ->commands
                if(not target.is_building and damage>0,
				    [
				set(target.abilities, []),
				set(target.activated_abilities, []),
				set(target.triggered_abilities, []),
				set(target.range, 0),
				set(target.move, 1),
                set(target.max_actions, 1),
				set(target.resistance, 0),
				set(target.passive_abilities, []),
			])",
			}],
		}
	},
    
    "Rihn's Crusader": {
		name: "Rihn's Crusader",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "rihns-crusader.png",
		portrait_focus: [355,213],
		portrait_focus_height: 240,
		cost: 6,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human', 'Warrior'],
			attack: 8,
			life: 6,
            passive_abilities: [{
				name: "Holyland Zeal",
				rules: "Rihn's Crusader has +1/+1 for each &AElig;ther land in the lane.",
				static_effect: "def(class game game, class creature creature) ->commands
				[  
                    creature.apply_static_effect('attack', count(game.constructs, value.loc[0] = creature.loc[0] and (5 in value.school))),
                    creature.apply_static_effect('life', count(game.constructs, value.loc[0] = creature.loc[0] and (5 in value.school)))
                ]"
			}],
		}
	},

	"Rihn's Anointed": {
		name: "Rihn's Anointed",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "rihns-anointed.png",
		artist: "lucy",
		portrait_focus: [355,462],
		portrait_focus_width: 80,
		portrait_focus_height: 120,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		flavor_text: "For no harm shall befall the
devout followers of Rihn;
naught shall touch her chosen ones.",
		creature: {
			tags: ['Human'],
			abilities: ['Cover'],
			image_num: 38,
			portrait_y_offset: 160,
			portrait_scale: 0.4,
			attack: 4,
			life: 3,
			move: 1,
		}
	},
    
    "Tulnun Friar": {
		name: "Tulnun Friar",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "tulnun-friar.png",
		portrait_focus: [355,462],
		portrait_focus_width: 80,
		portrait_focus_height: 120,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
        creature:{
			tags: ['Human', 'Cleric'],
			image_num: 38,
			portrait_y_offset: 160,
			portrait_scale: 0.4,
			attack: 4,
			life: 3,
			move: 1,
            triggered_abilities: [{
				name: "Recall Prayer",
				rules: "When you summon Tulnun Friar, gain a copy of the topmost &AElig;ther spell in your crypt.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    if(find(game.players[game.current_player_index].discard_pile, value.type = 'spell' and (5 in value.school)), 
                    add(game.players[(creature.controller)].hand, [(find_or_die(reverse(crypt), value.type = 'spell' and (5 in value.school))).name]) where crypt =game.players[game.current_player_index].discard_pile, 
                    null),
                ]",
            }],
		}
	},

	"Rihn's Anointed#premium": {
		name: "Rihn's Anointed",
		_internal_id: "Rihn's Anointed#premium",
		set: "core",
		rarity: 2,

		animation_sequence: [
			{start_focus: [0.447,0.475], end_focus: [0.447,0.475], start_zoom: 0.0, end_zoom: 0.8, cycles: 1600},
			{start_focus: [0.447,0.812], end_focus: [0.447,0.35], start_zoom: 0.75, end_zoom: 0.75, cycles: 1600},
			{start_focus: [0.8,0.3], end_focus: [0.2,0.45], start_zoom: 0.75, end_zoom: 0.75, cycles: 1600},
		],
	},

	"Sul-Dahl Devout": "Disciple",

	"Disciple": {
		name: "Disciple",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "sul-dahl-devout.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human'],
			image_num: 26,
			attack: 5,
			life: 3,
			move: 1,
		}
	},
    
    "Farmlands": "Pasture",
	
	"Pasture": {
		name: "Pasture",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FAITH",
		portrait: "farmlands.png",
		portrait_focus: [436,571],
		portrait_focus_width: 250,
		artist: "stephenwang",
		rules: "&AElig;ther creatures gain +1 life when they enter",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "farmlands.png",

			on_moved_over_by_creature: "def(class game game, class creature other_creature) ->commands
				if(FAITH in other_creature.school, add(other_creature.life, 1))
			",
		},
	},

	"Shrine of Peace": "Dawn Obelisk",
	
	"Dawn Obelisk": {
		name: "Dawn Obelisk",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "dawn-obelisk.png",
		portrait_focus: [381,541],
		portrait_focus_height: 60,
		artist: "lucy",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ["Shrine"],
			life: 8,
			level: 2,
			is_construct: true,
			portrait_y_offset: 80,
			particle_effects: ['light_lane_influence'],
			image_num: 4,
            passive_abilities: [{
				name: "Focused Light",
				rules: "Your creatures in this lane have +3 life.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller and creature.loc[0]=target.loc[0],
				    [target.apply_static_effect('life', 3)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	},
    
    "Active Temple": "Temple of Many Blessings",
	
	"Temple of Many Blessings": {
		name: "Temple of Many Blessings",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "active-temple.png",
		cost: 6,
        loyalty_cost: 2,
		school: "@eval FAITH",
		creature: {
			tags: ["Temple"],
			is_construct: true,
			image_num: 4,
            triggered_abilities: [{
				name: "Constant Devotion",
				rules: "At the start of your turn, you and your creatures gain 1 life.",

                on_begin_turn: "def(class creature creature, class game game) ->commands
			    if(game.current_player = creature.controller, [
					add(game.players[creature.controller].life, 1),
					[add(c.life,1) | c <- game.creatures, c.is_building = false, c.controller = creature.controller],
				])",
			}],
		}
	},

	"High Guard": {
		name: "High Guard",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "high-guard.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human'],
			abilities: ['First Strike'],
			sound_summoned: "creatures/summon-soldier.wav",
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			image_num: 26,
			attack: 4,
			life: 5,
			move: 1
		}
	},

	"Rihn's Martyr": {
		name: "Rihn's Martyr",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "rihns-martyr.png",
		portrait_focus: [563,521],
		portrait_focus_width: 250,
		artist: "stephenwang",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human'],
			image_num: 25,
			attack: 3,
			life: 3,
			move: 1,
                
                triggered_abilities: [{
				name: "Canonization ",
				rules: "When Rihn's Martyr dies, a Monument is summoned in the lane she was in.",

				on_die: "def(class creature creature, class game game) ->commands
				if(game.is_loc_on_board(target_loc),
				game.summon_construct(lib.citadel.create_creature('Monument', { controller: creature.controller, loc: target_loc, card_name: 'Monument' }))
			)
				where target_loc = game.players[creature.controller].construct_loc_in_row(game, creature.loc[0])",
			}],
		}
	},

	"Temple Guard": {
		name: "Temple Guard",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "temple-guard.png",
		artist: "lucy",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human'],
			sound_summoned: "creatures/summon-soldier.wav",
			abilities: ['First Strike'],
			image_num: 26,
			attack: 3,
			life: 4,
			move: 1
		}
	},
	
	"Weakness": {
		name: "Weakness",
		set: "core",
		rarity: 0,
		type: "spell",
        tags: ['Curse'],
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "weakness.png",
		artist: "eleazzaar",
		rules: "Target enemy creature gets -3/-0.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, -3)
					asserting size(info.targets) = 1",

	},
	
	"Rokh": {
		name: "Rokh",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "rokh.png",
		portrait_focus: [405,189],
		portrait_focus_height: 290,
		cost: 5,
		loyalty_cost: 2,
		school: "@eval FAITH",
		artist: "lucy",
		text_color: [0,0,0],
		creature: {
			portrait_y_offset: 20,
			tags: ['Flying'],
			image_num: 44,	// placeholder
			attack: 7,
			life: 5,
			abilities: ['Swift'],
			sound_walk: "creatures/move-wings.wav",
			sound_summoned: "creatures/roc-screech.wav",
		}
	},
    "Rider of the Thorn": {
		name: "Rider of the Thorn",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "rider-of-the-thorn.png",
		cost: 4,
		school: "@eval FAITH",
		creature: {
			tags: ['Mounted'],
			abilities: ['Swift'],
			attack: 5,
			life: 3,
		}
	},

	"Smite the Defilers": {
		name: "Smite the Defilers",
		set: "core",
		rarity: 1,
		type: "spell",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "smite-the-defilers.png",
		portrait_focus: [200,187],
		portrait_focus_height: 120,
		artist: "stephenwang",
		is_response: true,
		rules: "Destroy target enemy creature in the same lane as an Aether land you control.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		 if(size(targets) > 0, null,
		  [target.loc | target <- game.creatures,
		                target.controller != game.current_player_index,
						target.is_building = false,
						target.is_valid_target(game, avatar.controller, me),
						target.loc[0] in lanes]
			where lanes = [construct.loc[0] |
			               construct <- game.constructs,
						   construct.controller = game.current_player_index,
						   5 in construct.school
                           ]
		)",

		_invalid_target_reason: "def(class game game, class creature avatar, [Loc] targets, class creature target) -> null|string
			if(find(game.constructs, value.controller = game.current_player_index and (5 in value.school) and value.loc[0] = target.loc[0]) = null,
				'You must control an &AElig;ther land in this lane to cast this spell here'
			)
		",

		on_play: "def(class game game, class message.play_card info) ->commands
		  set(victim.destroyed, true)
		  where victim = game.creature_at_loc_or_die(info.targets[0])"
	},

	"Tree of Life": {
		name: "Tree of Life",
		type: "creature",
		set: "core",
		rarity: 1,
		cost: 4,
		school: "@eval FAITH",
		portrait: "tree-of-life.png",
		artist: "stephenwang",
		creature: {
			is_construct: true,
			abilities: ['Fragile'],
			triggered_abilities: [{
				name: "Gift of Life",
				rules: "You have +8 life. This life is lost when Tree of Life is destroyed.",

				on_summoned: "def(class creature creature, class game game) ->commands [
					if(creature.controller >= 0, add(game.players[creature.controller].life, 8))
				]",

				on_die: "def(class creature creature, class game game) ->commands [
					if(creature.controller >= 0, add(game.players[creature.controller].life, -8))
				]",
			}],

		},
	},





	"Crusader of Rihn": {
		name: "Crusader of Rihn",
		type: "creature",
		portrait: "crusader-of-rihn.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 0,
			attack: 8,
			life: 10,
			move: 2,
		}
	},

	"Cleric": {
		name: "Cleric",
		type: "creature",
		portrait: "cleric.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 0,
		rules: "At the start of each turn, each creature you control in this lane gains one life.",
		creature: {
			tags: ['Human'],
			image_num: 26,
			attack: 2,
			life: 4,
			move: 1,
			overlays: [ { image_num: 21 } ],
			on_begin_turn: "def(class game game) ->commands
			  [add(creature.life, 1)
			   | creature <- game.creatures,
			     creature.controller = controller,
				 creature.loc[0] = loc[0]]",
		}
	},

	"Temple of the Blessed": {
		name: "Temple of the Blessed",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		portrait: "temple-of-the-blessed.png",
		rarity: 2,
		rules: "Creatures you control have +1 life.",
		creature: {
			tags: ["Temple"],
			life: 6,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building), target.apply_static_effect('life', 1))"
		}
	},
	
	"In the Blink of an Eye": {
		name: "In the Blink of an Eye",
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 1,
		school: "@eval FAITH",
		rarity: 1,
		rules: "Target creature gains +2 life.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).life, 2)
					asserting size(info.targets) = 1",
	},
	
	"Repentance": {
		name: "Repentance",
		type: "spell",
		is_response: true,
		cost: 2,
		loyalty_cost: 1,
		school: "@eval FAITH",
		rarity: 0,
		rules: "All creatures get -2 attack this turn.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  map(game.creatures, creature, if(not creature.is_building, creature.apply_effect_until_end_of_turn('attack', -2)))",
	},
	
	"Shrine of the Blessed": {
		name: "Shrine of the Blessed",
		type: "Shrine",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Creatures you control in this lane have +1 life.",
		creature: {
			tags: ["Shrine"],
			life: 6,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.apply_static_effect('life', 1))",
		}
	},

	"Shrine of Sanctity": {
		name: "Shrine of Sanctity",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Creatures you control in this lane have Cover.",
		creature: {
			tags: ["Shrine"],
			life: 6,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.add_ability_static_duration('Cover'))"
		}
	},

	"Shrine of the Devout": {
		name: "Shrine of the Devout",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Creatures you control in this lane have First Strike.",
		creature: {
			tags: ["Shrine"],
			life: 6,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.add_ability_static_duration('First Strike'))"
		}
	},

	"Sanctuary of the Faithful": {
		name: "Sanctuary of the Faithful",
		type: "creature",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval FAITH",
		rarity: 0,
		rules: "When a creature you control is destroyed, return it to your hand instead",
		creature: {
			tags: ["Sanctuary"],
			life: 8,
			level: 2,
			is_construct: true,
			image_num: 4,
			on_another_creature_died: "def(class game game, class creature victim) ->commands
			  if(victim.controller = me.controller,
				 game.return_from_graveyard_to_hand(victim))"
		}
	},
	
	"Walled Sanctum": {
		name: "Walled Sanctum",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 1,
		creature: {
			resistance: 1,
			life: 8,
			range: 2,
			attack: 4,
			image_num: 0,
			is_building: true,
		}
	},
	
	"Peasant Bowman": {
		name: "Peasant Bowman",
		type: "creature",
		portrait: "peasant-bowman.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 1,
		creature: {
			tags: ['Human'],
            abilities: ['Reload'],
			image_num: 9,
			attack: 4,
			range: 1,
			life: 4,
			move: 1,
		}
	},
	
	"Spirit Punch": {
		//all sorts of deprecated
		name: "Spirit Punch",
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 1,
		is_response: true,
		possible_targets: "all_creatures_as_possible_targets",
	},

	"Grand Lull": {
		//deprecated
		name: "Grand Lull",
		type: "spell",
		cost: 2,
		loyalty_cost: 4,
		school: "@eval FAITH",
		rarity: 1,
		is_response: true,
	},
	
	"Elrohir the Penitent": {
		name: "Elrohir the Penitent",
		type: "creature",
		portrait: "elrohir-the-penitent.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 1,
		hero: true,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 0,
			abilities: ['Charge', 'Cover', 'First Strike'],
			attack: 8,
			life: 8,
			move: 2,
		}
	},

	"Burden of Faith": {
		name: "Burden of Faith",
		type: "spell",
		cost: 1,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Target creature gets -1 move.",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(class game game, class creature target) ->commands [add(target.move, -1)]",
	},
	
	"Wrath of Gord": {
		name: "Wrath of Gord",
		type: "spell",
		is_response: true,
		cost: 1, //Since it only delays the enemy, it seems to me it should be a fairly cheap card.
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 1,
		rules: "Move target enemy creature to the start of its lane.", //Gord was an elementary school principal who had to haul a kid back across a few city blocks, kicking and screaming, after the kid ran away. Could you haul a stranger's screaming child across town without getting the cops called? He could, and, quite frankly, it worried him a bit. "What if I'd been a kidnapper?"
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, 
			not creature.is_building, 
			creature.controller != avatar.controller, 
			game.creature_at_loc([creature.loc[0], if(creature.direction_moving < 0, game.columns-1, 0)]) = null,
			creature.is_valid_target(game, avatar.controller, me)])",
		on_play: "def(class game game, class message.play_card info) ->commands
			set(target.loc, [target.loc[0], if(target.direction_moving < 0, game.columns-1, 0)])
			where target = game.creature_at_loc_or_die(info.targets[0])",
	},

	"Leap of Faith": {
		name: "Leap of Faith",
		type: "spell",
		cost: 1,
		loyalty_cost: 1,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Target creature you control gains Flying this turn.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.creature_at_loc_or_die(info.targets[0])
		      .add_ability_until_end_of_turn('Flying')",

	},

	"Look on my Works": {
		name: "Look on my Works",
		type: "spell",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Target creature gets +2 life, -1 attack, and -1 move for each Aether creature you control.",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(class game game, class creature target) ->commands
			[add(target.life, 2*faiths), add(target.attack, -1*faiths), add(target.move, -1*faiths)]
			where faiths = count(game.creatures, value.controller = game.current_player_index and (FAITH in value.school))
		",
	},

	"Casai, Angel of Vengeance": {
		name: "Casai, Angel of Vengeance",
		hero: true,
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 2,
		rules: "Casai may be summoned only in a lane where you control a faith construct. When Casai is summoned, destroy all creatures in her lane.",

		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 filter(game.players[avatar.controller].summoning_locs(game, creature),
			        find(game.constructs, value.controller = avatar.controller and value.loc[0] = context.value[0] and (FAITH in value.school)))
			 asserting creature
			)",
		
		creature: {
			tags: ['Angel'],
			image_num: 33,
			attack: 8,
			life: 8,
			move: 1,

			on_summoned: "def(class game game) ->commands [
				[set(creature.destroyed, true) | creature <- game.creatures, me != creature, not creature.is_building, creature.loc[0] = me.loc[0]]
			]",
		},
	},
	
	"Shrine of the Pieous": {
		name: "Shrine of the Pieous",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Friendly creatures in this lane gain the ability 'Lesser Heal'",
		creature: {
			tags: ["Shrine"],
			life: 8,
			level: 2,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.add_activated_ability_static_duration({
				name: 'Lesser Heal',
				cost: 1,
				school: FAITH,
				rules: 'Heal creature of +1 wound.',
				on_play: 'def(class game game, class creature creature, class message.play_card info) ->commands
					add(creature.life, 1)'
			}))"
		}
	},

	"Paladin": {
		name: "Paladin",
		type: "creature",
		portrait: "paladin.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FAITH",
		rarity: 0,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 1,
			attack: 6,
			life: 6,
			move: 2,

			activated_abilities: [{
				name: 'Shield of Faith',
				cost: 1,
				school: "@eval FAITH",
				rules: "Paladin gains Cover until end of turn",
				on_play: "def(class game game, class message.play_card info) ->commands [
					creature.add_ability_until_end_of_turn('Cover')
				] where creature = info.get_creature(game)",
				is_response: true,
			}],
        }
    },          

}
