{
	"Crusader of Rihn": {
		name: "Crusader of Rihn",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: 5,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 0,
			abilities: ['Charge'],
			attack: 3,
			life: 3,
			move: 3,
		}
	},

	"Paladin": {
		name: "Paladin",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: 5,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 1,
			abilities: ['Charge'],
			attack: 4,
			life: 5,
			move: 3,
		}
	},

	"Cleric": {
		name: "Cleric",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 5,
		rules: "Start of each turn: each creature you control in this lane heals 1",
		creature: {
			tags: ['Human'],
			image_num: 26,
			attack: 1,
			life: 2,
			move: 2,
			overlays: [ { image_num: 21 } ],
			on_begin_turn: "def(game)
			  [add(creature.wounds, -1)
			   | creature <- game.creatures,
			     creature.controller = controller,
				 creature.loc[0] = loc[0]]",
		}
	},

	"Sul-Dahl Devout": {
		name: "Sul-Dahl Devout",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: 5,
		creature: {
			tags: ['Human'],
			abilities: ['Regeneration'],
			image_num: 26,
			attack: 1,
			life: 3,
			move: 2,
		}
	},

	"Temple Guard": {
		name: "Temple Guard",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: 5,
		creature: {
			tags: ['Human'],
			abilities: ['First Strike'],
			image_num: 26,
			attack: 1,
			life: 3,
			move: 2
		}
	},

	"High Guard": {
		name: "High Guard",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: 5,
		creature: {
			tags: ['Human'],
			abilities: ['First Strike'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			image_num: 26,
			attack: 2,
			life: 3,
			move: 2
		}
	},

	"Inquisitor": {
		name: "Inquisitor",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 5,
		rules: "When Inquisitor kills a creature, return it to its owner's hand.",
		creature: {
			tags: ['Human'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			image_num: 25,
			attack: 3,
			life: 3,
			move: 2,
			on_kill: "def(game, victim) if(not victim.is_building,
				game.return_from_graveyard_to_hand(victim)
			)"
		}
	},

	"Rihn's Martyr": {
		name: "Rihn's Martyr",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 5,
	    rules: "When Rihn's Martyr dies, search your deck for a Shrine of the Martyr and put it in your hand",
		creature: {
			tags: ['Human'],
			image_num: 25,
			attack: 1,
			life: 2,
			move: 2,
			on_die: "def(game)
			            if(card, [
						  add(player.hand, [card]),
						  set(player.deck, filter(player.deck, value != card))
						])
			            where card = find(player.deck, value.name = 'Shrine of the Martyr')
			            where player = game.players[controller]"
		}
	},

	"Rihn's Anointed": {
		name: "Rihn's Anointed",
		type: "creature",
		cost: 3,
		loyalty_cost: 1,
		school: 5,
		creature: {
			tags: ['Human'],
			abilities: ['Cover'],
			image_num: 38,
			attack: 2,
			life: 2,
			move: 2,
		}
	},

	"Shrine of the Martyr": {
		name: "Shrine of the Martyr",
		type: "creature",
		cost: 2,
		loyalty_cost: 3,
		school: 5,
		rules: "+1 mana per turn",
		creature: {
			tags: ["Shrine"],
			life: 2,
			is_construct: true,
			image_num: 4,
			on_begin_turn: "def(game) if(game.current_player = controller,
			    { execute: q(add(player.resources, 1)), arg: {player: game.players[controller]} } )"
		}
	},

	"Temple of the Blessed": {
		name: "Temple of the Blessed",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: 5,
		rules: "Creatures you control have +1 life",
		creature: {
			tags: ["Temple"],
			life: 3,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building), target.apply_static_effect('life', 1))"
		}
	},

	"Smite the Defilers": {
		name: "Smite the Defilers",
		type: "spell",
		cost: 3,
		loyalty_cost: 2,
		school: 5,
		is_response: true,
		rules: "Destroy target enemy creature which is in the same lane as a faith construct you control",
		possible_targets: "def(game, nplayer, targets)
		 if(size(targets) > 0, null,
		  [target.loc | target <- game.creatures,
		                target.controller != game.current_player_index,
						target.loc[0] in lanes]
			where lanes = [construct.loc[0] |
			               construct <- game.constructs,
						   construct.controller = game.current_player_index,
						   5 in construct.school]
		)",

		on_play: "def(game, info)
		  set(victim.destroyed, true)
		  where victim = find(game.creatures, value.loc = info.targets[0])"
	},
	
	"Heal": {
		name: "Heal",
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 1,
		school: 5,
		rules: "Heal target creature to full health",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) set(game.creature_at_loc(info.targets[0]).wounds, 0)
					asserting game.creature_at_loc(info.targets[0]) != null
					asserting size(info.targets) = 1",
	},
	
	"Blessed Lance": {
		name: "Blessed Lance",
		type: "spell",
		is_response: true,
		cost: 2,
		loyalty_cost: 1,
		school: 5,
		rules: "Gives target creature First Strike",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) add(game.creature_at_loc(info.targets[0]).abilities, ['First Strike'])
					asserting game.creature_at_loc(info.targets[0]) != null
					asserting size(info.targets) = 1",
	},
	
	"Weakness": {
		name: "Weakness",
		type: "spell",
		is_response: true,
		cost: 3,
		loyalty_cost: 1,
		school: 5,
		rules: "Gives target enemy creature -2 attack",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(game, info) add(game.creature_at_loc(info.targets[0]).attack, -2)
					asserting game.creature_at_loc(info.targets[0]) != null
					asserting size(info.targets) = 1",
	},
	
	"In the Blink of an Eye": {
		name: "In the Blink of an Eye",
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 1,
		school: 5,
		rules: "Target creature gains +2 life permanently",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info)
		  add(game.creature_at_loc(info.targets[0]).life, 2)
					asserting game.creature_at_loc(info.targets[0]) != null
					asserting size(info.targets) = 1",
	},
	
	"Repentance": {
		name: "Repentance",
		type: "spell",
		is_response: true,
		cost: 2,
		loyalty_cost: 1,
		school: 5,
		rules: "All creatures gain -2 attack until end of turn",
		on_play: "def(game, info) map(game.creatures, creature, if(not creature.is_building, creature.apply_effect_until_end_of_turn('attack', -2)))",
	},
	
	"Saviour": {
		name: "Saviour",
		type: "spell",
		is_response: true,
		cost: 3,
		loyalty_cost: 2,
		school: 5,
		rules: "If the target creature would die this turn it is instead healed to full",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) if(creature.life > 0, creature.add_triggered_ability_until_end_of_turn({
			name: 'Saviour',
			rules: 'If creature would die, It is instead healed to full',
			on_die: q(def(creature, game) [game.return_from_graveyard(creature), set(creature.wounds, 0), set(creature.destroyed, false)])}))
			asserting creature != null
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc(info.targets[0])" 
	},
	
	"Shrine of the Blessed": {
		name: "Shrine of the Blessed",
		type: "Shrine",
		cost: 3,
		loyalty_cost: 2,
		school: 5,
		rules: "Creatures you control in this lane have +1 life",
		creature: {
			tags: ["Shrine"],
			life: 3,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.apply_static_effect('life', 1))",
		}
	},

	"Shrine of Sanctity": {
		name: "Shrine of Sanctity",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: 5,
		rules: "Creatures in this lane gain Cover",
		creature: {
			tags: ["Shrine"],
			life: 3,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.add_ability_static_duration('Cover'))"
		}
	},

	"Shrine of the Devout": {
		name: "Shrine of the Devout",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: 5,
		rules: "Creatures in this lane gain First Strike",
		creature: {
			tags: ["Shrine"],
			life: 3,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.add_ability_static_duration('First Strike'))"
		}
	},

	"Shrine of Peace": {
		name: "Shrine of Peace",
		type: "creature",
		cost: 5,
		loyalty_cost: 2,
		school: 5,
		rules: "Enemy creatures in this lane get -2 attack",
		creature: {
			tags: ["Shrine"],
			life: 4,
			level: 2,
			is_construct: true,
			image_num: 4,
			static_ability_effect: "if(creature.controller != target.controller and (not target.is_building) and creature.loc[0] = target.loc[0], target.apply_static_effect('attack', -2))"
		}
	},
	
	"Walled Sanctum": {
		name: "Walled Sanctum",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: 5,
		creature: {
			abilities: ["Fortification"],
			resistance: 1,
			life: 4,
			range: 3,
			attack: 2,
			image_num: 0,
			is_construct: true,
		}
	},
	
	"Peasant Bowman": {
		name: "Peasant Bowman",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 5,
		creature: {
			tags: ['Human'],
			image_num: 9,
			attack: 2,
			range: 2,
			life: 2,
			move: 2,
			// Bow & Quiver
			overlays: [{
				image_num: 2,
			}, {
				image_num: 11,
			}],
		}
	},
	
	"Seeds of Life": {
		name: "Seeds of Life",
		type: "spell",
		school: 5,
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		rules: "If target creature dies, all other faith creatures are healed",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) add(co.triggered_abilities, [{
			name: 'Seeds of Life',
			rules: 'If creature dies, all other faith creatures are healed',
			on_die: 'def(creature, game) map(game.creatures, if((5 in value.school) and value != creature, set(value.wounds, 0)))'}])
			asserting co != null
			asserting size(info.targets) = 1
			where co = game.creature_at_loc(info.targets[0])",
	},
	
	"Rokh": {
		name: "Rokh",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 5,
		creature: {
			tags: ['Giant Bird', 'Animal'],
			abilities: ['Flying'],
			image_num: 44,	// placeholder
			attack: 2,
			life: 2,
			move: 2,
			overlays: [{
				image_num: 0,
				alpha: 0.5,
			}],
		}
	},
	
	"Spirit Punch": {
		name: "Spirit Punch",
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		school: 5,
		is_response: true,
		rules: "Target unit becomes fatigued. Draw a card.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) add(creature.status_effects, ['Exhausted'] * if(creature.controller = game.current_player_index, 3, 2))
			asserting creature != null
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc(info.targets[0])",
	},

	"Eye for an Eye": {
		name: "Eye for an Eye",
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		school: 5,
		is_response: true,
		rules: "Whenever target creature deals damage this turn, that much damage is dealt to it as well",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) creature.add_triggered_ability_until_end_of_turn({
				name: 'Eye for an Eye',
				rules: 'When creature deals damage that much damage is dealt to it as well',
				on_deal_damage: 'def(creature, game, target, damage) add(creature.wounds, damage)',
			})
			asserting creature != null
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc(info.targets[0])",
	},
	
	"Elrohir the Penitent": {
		name: "Elrohir the Penitent",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: 5,
		hero: true,
		creature: {
			tags: ['Elf', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 0,
			abilities: ['Charge', 'Cover', 'First Strike'],
			attack: 4,
			life: 4,
			move: 3,
		}
	},
	
	"Orin's Phalanx": {
		name: "Orin's Phalanx",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: 5,
		creature: {
			tags: ['Elf'],
			image_num: 51,
			abilities: ['First Strike'],
			attack: 4,
			life: 2,
			move: 2,
			overlays: [{
				image_num: 24
			}, {
				image_num: 8
			}],
		},
	},

	"Burden of Faith": {
		name: "Burden of Faith",
		type: "spell",
		cost: 1,
		loyalty_cost: 3,
		school: 5,
		rules: "Target creature gets -1 movement permanently",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(game, target) [add(target.move, -1), debug('Play Burden')]",
	},
	
	"Wrath of Gord": {
		name: "Wrath of Gord",
		type: "spell",
		is_response: true,
		cost: 1, //Since it only delays the enemy, it seems to me it should be a fairly cheap card.
		loyalty_cost: 2,
		school: 5,
		rules: "Send an enemy back to the starting row.", //Gord was an elementary school principal who had to haul a kid back across a few city blocks, kicking and screaming, after the kid ran away. Could you haul a stranger's screaming child across town without getting the cops called? He could, and, quite frankly, it worried him a bit. "What if I'd been a kidnapper?"
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(game, info) 
			set(target.loc, [target.loc[0], if(target.direction_moving < 0, game.columns-1, 0)])
			where target = game.creature_at_loc(info.targets[0])",
	},

	"Eagle Archer": {
		name: "Eagle Archer",
		cost: 3,
		loyalty_cost: 3,
		school: 5,
		rules: "When Eagle Archer passes over an enemy creature, it deals 2 damage to that creature",
		creature: {
			tags: ["Eagle", "Elf"],
			image_num: 33,		// placeholder
			abilities: ["Flying"],
			attack: 2,
			range: 2,
			life: 2,
			move: 2,
			on_moved_over: "def(game, creature) add(creature.wounds, 2)",
		},
	},

	"Inquisition": {
		name: "Inquisition",
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		school: 5,
		rules: "Select a card from your opponent's hand. That card is discarded.",

		on_play: "def(game, info) if(info.choices,
		([
			add(game.opponent_obj.discard_pile, [game.opponent_obj.hand[info.choices[0]]]),
			set(game.opponent_obj.hand, filter(game.opponent_obj.hand, index != info.choices[0])),
		]
			asserting size(info.choices) = 1, info.choices[0] >= 0, info.choices[0] < size(game.opponent_obj.hand) | [info.choices, game.opponent_obj.hand]),

		if(game.opponent_obj.hand, game.set_current_choice({
			card: me,
			info: info,
			text: 'Choose which card your opponent will discard',
			options: map(game.opponent_obj.hand, {
				type: 'card',
				card: value,
				value: index,
			})
		}))
		)",
	},

	"Leap of Faith": {
		name: "Leap of Faith",
		type: "spell",
		cost: 1,
		loyalty_cost: 1,
		school: 5,
		rules: "Target creature you control gains Flying this turn",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(game, info)
		  game.creature_at_loc(info.targets[0])
		      .add_ability_until_end_of_turn('Flying')",

	},
}