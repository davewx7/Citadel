{

	"Glade of Fury": {
		name: "Glade of Fury",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval GAEA",
		portrait: "dawn-obelisk.png",
		portrait_focus: [385,497],
		portrait_focus_width: 200,
		hue_shift: 0.2,
		creature: {
			is_land: true,
			portrait_y_offset: 80,
			passive_abilities: [{
				name: "Fury",
				rules: "Nearby allies have +3/+0",

				effect: 'radial_influence_effect',
				effect_args: {
					color_dark: [0.2,0.4,0.2],
					color_mid: [0.7,0.8,0.7],
					color_light: [0.9,1.0,0.9],
				},

				static_effect: "def(class game_state game, class creature creature) ->commands
				[[
				  target.apply_static_effect('attack', 3),
				 ]
				  | target <- game.creatures,
				    target.is_building = false,
					target.controller = creature.controller,
					game.locs_adjacent(target.loc, creature.loc) or target.loc = creature.loc
				]
				"
            }],
		}
	},

	"Direwolf": {
		name: "Direwolf",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		artist: "lisanguyen",
		portrait: "direwolf.png",
		school: "@eval FOOD",
		creature: {
			tags: ['Wolf'],
			attack: 6,
			life: 5,
			game_sounds: "direwolf",
		},
	},

	"Guardian Tracker": {
		name: "Guardian Tracker",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		portrait: "guardian-tracker.png",
		school: "@eval FOOD",
		artist: "lisanguyen",
		creature: {
			game_sounds: "guardian",
			tags: ['Guardian'],
			sound_impact: "wood",
			attack: 6,
			life: 3,
			triggered_abilities: [{
				name: "Bloodtrack",
				hidden_on_creature: true,
				rules: "When summoned in a lane where the enemy seal is destroyed, gets +3/+3.",
				on_summoned: "def(class creature creature, class game_state game) ->commands
					if(game.trophies[(creature.controller+1)%2][creature.loc[0]] = 0,
					[
						add(creature.life, 3),
						add(creature.attack, 3),
					]
					)
				"
			}],
		},
	},

	"Greater Wurm": {
		name: "Greater Wurm",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 7,
		loyalty_cost: 0,
		portrait: "greater-wurm.png",
		portrait_focus: [427,210],
		portrait_focus_height: 260,
		artist: "sara",
		school: "@eval FOOD",
		creature: {
			game_sounds: "troll",
			tags: [],
			attack: 9,
			life: 12,
		},
	},


// Heroes
	"Grizzis, Lord of the Hunt": {
		name: "Grizzis, Lord of the Hunt",
		set: "core",
		rarity: 2,
		type: "creature",
		cost: 10,
		loyalty_cost: 4,
		school: "@eval FOOD",
		portrait: "grizzis-lord-of-the-hunt.png",
		artist: "lisanguyen",
		hero: true,
		creature: {
			game_sounds: "guardian",
			tags: ['Guardian', 'Lord'],
			sound_impact: "wood",
			attack: 12,
			life: 12,
			abilities: ['Cover'],
            passive_abilities: [{
				name: "Hunter's Fervor",
				rules: "Creatures you control have +4/+0 and <i>Haste</i>.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   
                    [target.apply_static_effect('attack', 4),
				    target.add_ability_static_duration('Haste'),
				    ]
				  | target <- game.creatures,
				    target.is_building = false,
				    target.controller = creature.controller
				]"
			}],
		}
	},

	"If-Uluk, the Swift": {
		name: "If-Uluk, the Swift",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "if-uluk-the-swift.png",
		artist: "lisanguyen",
		cost: 8,
		loyalty_cost: 3,
		school: "@eval FOOD",
		hero: true,
		help_strings: ["Unblocked"],
		creature: {
			game_sounds: "guardian",
			tags: ['Wolf', 'Mounted', 'Guardian'],
			sound_impact: "wood",
			abilities: ['Swift'],
			attack: 8,
			life: 3,

			triggered_abilities: [{
				name: "Bloodseek",
				hidden_on_creature: true,
				rules: "When summoned, if unblocked gains +2/+2 and <i>Haste</i>.",
				on_summoned: "def(class creature creature, class game_state game) ->commands

				if(find(game.creatures, value.loc[0] = creature.loc[0] and value.controller != creature.controller) = null, [
					add(creature.abilities, ['Haste']),
					add(creature.attack, 2),
					add(creature.life, 2),
				])
				",
			}],

		}
	},

	"Treant": "Elder Treant",
	
	"Elder Treant": {
		name: "Elder Treant",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "treant.png",
		artist: "lisanguyen",
		cost: 8,
		loyalty_cost: 2,
		school: "@eval FOOD",
		hero: false,
		creature: {
			attack_imprint: "effects/sunken-cracks-mask.png",
			game_sounds: "treant",
			tags: ['Tree', 'Lifebound'],
			attack: 14,
			life: 14,
			move: 1,
            passive_abilities: [{
				name: "Slow Strike",
				rules: "Creatures engaged in combat with this creature have <i>First Strike</i>",
				static_effect: "def(class game_state game, class creature creature) ->commands
				  [t.add_ability_static_duration('First Strike') | t <- targets, creature in t.targets_attacking(game)]
					where targets = creature.targets_attacking(game)
				",
			}],
		}
	},

//Basic foot soldiers

	"Wolf Rider": {
		name: "Wolf Rider",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "wolf-rider.png",
		portrait_focus: [305,452],
		portrait_focus_height: 240,
		artist: "lucy",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
		flavor_text: "To the west they raise wolves the size of oxen, able to be mounted by even the largest of men. It is said that their howl alone is enough to turn the tides of battle.",
		creature: {
			game_sounds: "direwolf",
			tags: ['Wolf', 'Mounted', 'Guardian'],
			sound_impact: "wood",
			portrait_y_offset: 10,
			portrait_scale: 0.15,
			attack: 4,
			life: 4,
			move: 1,
		}
	},

	"Goblin Marauder": "Darkwood Denizen",

	"Darkwood Denizen": {
		name: "Darkwood Denizen",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "marauder.png",
		portrait_focus: [216,234],
		portrait_focus_height: 190,
		artist: "lucy",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			game_sounds: "guardian",
			sound_impact: "wood",
			tags: ['Guardian'],
			abilities: ['Feral', 'Haste'],
			portrait_y_offset: 20,
			attack: 3,
			life: 2,
			move: 1,
		}
	},

	"Goblin Sapper": "Guardian Tunneler",

	"Guardian Tunneler": {
		name: "Guardian Tunneler",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "guardian-sapper.png",
		help_strings: ["Cover", "Engaged"],
		artist: "lordbob",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			game_sounds: "guardian",
			sound_impact: "wood",
			tags: ['Guardian'],
			attack: 4,
			life: 4,

			passive_abilities: [{
				name: "Tunneler",
				rules: "+3 armor and <i>Cover</i> when not engaged.",
				static_effect: "def(class game_state game, class creature creature) ->commands
					if(creature.targets_attacking(game) = [], [
						creature.apply_static_effect('armor', 3),
						creature.add_ability_static_duration('Cover'),
					])
				",
			}],
		}
	},

	"Wolf": "Savage Wolf",
	
	"Savage Wolf": {
		name: "Savage Wolf",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "wolf.png",
		artist: "lisanguyen",
		portrait_focus: [340,520],
		portrait_focus_height: 400,
		portrait_focus_width: 400,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			game_sounds: "direwolf",
			tags: ['Wolf'],
            abilities: ['Feral', 'Haste'],
			portrait_y_offset: 30,
			attack: 6,
			life: 3,
		}
	},
	
	"Wolf of the Plains": {
		name: "Wolf of the Plains",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "battlecry.png",
		artist: "wendyyoon",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			game_sounds: "direwolf",
			tags: ['Wolf'],
            abilities: [],
			attack: 5,
			life: 3,

			triggered_abilities: [{
				name: "Roam",
				hidden_on_creature: true,
				rules: "Has <i>Haste</i> when summoned in a lane with no lands.",
				on_summoned: "def(class creature creature, class game_state game) ->commands

				if(find(game.lands, value.loc[0] = creature.loc[0]) = null, [
					add(creature.abilities, ['Haste']),
				])
				",
			}],
		}
	},

    "Purrsan Ambusher": {
		name: "Purrsan Ambusher",
		rarity: 0,
		type: "creature",
        set: "core",
		portrait: "purrsan-ambusher.png",
		portrait_focus: [224,504],
		portrait_focus_height: 160,
		artist: "lisanguyen",
		cost: 4,
		school: "@eval FOOD",
		creature: {
			game_sounds: "direwolf",
			attack: 5,
			life: 4,
            passive_abilities: [{
				name: "Ambusher",
				rules: "While Purrsan Ambusher has <i>Cover</i>, it also has <i>First Strike</i>.",
				deferred: true,
				static_effect: "def(class game_state game, class creature creature) ->commands 
                if('Cover' in creature.abilities, creature.add_ability_static_duration('First Strike'))
                "
			}],
		}
	},

    "Guerilla Fighter": {
		name: "Guerilla Fighter",
		rarity: 0,
		type: "creature",
		portrait: "purrsan-ambusher.png",
		portrait_focus: [224,504],
		portrait_focus_height: 160,
// 		artist: "lisanguyen",
		cost: 3,
		school: "@eval GAEA",
		creature: {
			game_sounds: "direwolf",
			attack: 5,
			life: 3,
            passive_abilities: [{
				name: "Guerilla",
				rules: "While Guerilla Fighter is engaged, it has <i>Cover</i>.",
				deferred: true,
				static_effect: "def(class game_state game, class creature creature) ->commands 
                if(creature.is_engaged(game), creature.add_ability_static_duration('Cover'))
                "
			}],
		}
	},

	"Green Adder": {
		name: "Green Adder",
		set: "core",
		rarity: 0,
		type: "creature",
		artist: "lisanguyen",
		portrait: "green-adder.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			tags: ['Beast', 'Serpent'],
			attack: 7,
			life: 2,
			game_sounds: "green_adder",
		}
	},
    
    "Quillboar": {
		name: "Quillboar",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "quill-boar.png",
		portrait_focus: [207,475],
		portrait_focus_height: 200,
		artist: "lisanguyen",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			tags: ['Beast'],
			attack: 3,
			life: 7,
			game_sounds: "troll",

			activated_abilities: [
			{
				name: "Quillspray",
				cost: 2,
				school: "@eval GAEA",
				is_response: true,
				once_ever: true,

				rules: "Deal 3 damage to all adjacent creatures",
				possible_targets: "no_targets",
				on_play: "def(class game_state game, class message.play_card info) ->commands
					[game.creature_at_loc_or_die(loc).inflict_damage(game, 3)
					| loc <- game.all_locs, game.locs_adjacent(boar.loc, loc), game.creature_not_building_at_loc(loc)]
					where boar = info.get_creature(game)
				",

			}],
		}
	},

    

// Mid-level creatures
    "Relentless Behemeth": "Relentless Behemoth",
    
    "Relentless Behemoth": {
		name: "Relentless Behemoth",
        portrait: "relentless-behemoth.png",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			tags: ['Beast'],
			attack: 5,
			life: 8,
			rules: "Engages in combat twice on your turn",
            armor: 1,
            move: 1,
			max_actions: 2,
			game_sounds: "troll",
		}
	},
    
    
    
    

	"Goblin King": "Guardian King",

	"Guardian King": {
		name: "Guardian King",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "guardian-king.png",
		portrait_focus: [457,474],
		portrait_focus_height: 250,
		artist: "lucy",
		cost: 6,
		loyalty_cost: 2,
		school: "@eval FOOD",

		creature: {
			tags: ['Guardian'],
			game_sounds: "guardian",
			sound_impact: "wood",
            
            passive_abilities: [{
				name: "Lord",
				rules: "Adjacent <i>Guardians</i> get +2/+2.",
				static_effect: "def(class game_state game, class creature creature) ->commands
                [   
                    if(creature.controller = target.controller and game.locs_adjacent(creature.loc, target.loc),
				    [target.apply_static_effect('attack', 2), target.apply_static_effect('life_shield', 2)])
				  | target <- game.creatures,
				    'Guardian' in target.tags
				]",
			}],
            triggered_abilities: [{
				name: "Minions",
				hidden_on_creature: true,
				rules: "When summoned, summon a Feral 2/2 (Gaea)Gaea Guardian in each adjacent lane",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                    map(if(creature.loc[0] > 0, [game.player_obj.summoning_loc_in_row(game, creature.loc[0]-1)], []) +
			      if(creature.loc[0] < size(game.lanes)-1, [game.player_obj.summoning_loc_in_row(game, creature.loc[0]+1)], []),
			               if(game.is_loc_on_board(value) and
						      game.creature_at_loc(value) = null,
							  game.summon_creature(lib.citadel.create_creature('Guardian',
							    {
									name: 'Guardian',
									controller: game.current_player,
									game_sounds: 'guardian',
									loc: value,
									game_sounds: 'troll',
								})
							  
							  )))"
				}],
			attack: 5,
			life: 5,
		}
		, subcard_tips: ['Guardian']
	},
    
    	"Guardian Herald": {
		name: "Guardian Herald",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "guardian-herald.png",
		cost: 5,
		school: "@eval FOOD",
		artist: "lisanguyen",

		creature: {
			game_sounds: "guardian",
			tags: ['Guardian'],
			abilities: ['Haste'],
			sound_impact: "wood",
            life: 5,
            attack: 6,
            energy: 1,
            move: 1,
            
            passive_abilities: [{
				name: "Forerunner",
				rules: "When summoned, <i>Guardians</i> cost one less this turn.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0 and creature.energy > 0,
				   game.players[creature.controller].add_static_cost_filter(
				     construct('cost_filter', {
						filter_cost: q(def(class player p, class card_base card, int cost) ->int
						   if(card.creature_object and (('Guardian' in card.creature_object.tags)),
                           max(0, cost-1), cost)),
					})))",
            }],      
            triggered_abilities: [{
                name: "Dummy Template",
				rules: "This should not be displayed.",
				on_begin_turn: "def(class creature creature, class game_state game) ->commands 
                [
                    if (creature.energy >0, set(creature.energy, 0)),
                ]",
                hidden_on_creature: true,
                hidden_on_card: true,
			}],
		}
	},

	"Stoneclan Berserker": {
		name: "Stoneclan Berserker",
		set: "core",
		rarity: 1,
		type: "creature",
		artist: "ethan",
		portrait_focus: [316,193],
		portrait_focus_height: 300,
		portrait: "stoneclan-berserker.png",
		cost: 5,
		school: "@eval FOOD",
		creature: {
			game_sounds: "soldier_mace",
			tags: ['Human', 'Warrior'],
			attack: 3,
			life: 8,
			move: 1,
            triggered_abilities: [{
				name: "Bloodwrath",
				rules: "Whenever damaged, gain +3/+0.",
                on_damaged: "def(class creature creature, class game_state game, int damage) ->commands
                    if (damage>0, add(creature.attack, 3))",
            }],
		},
	},

	"Troll Whelp": "Treant Sapling",
	
	"Treant Sapling": {
		name: "Treant Sapling",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "treant-sapling.png",
		artist: "lisanguyen",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {

			game_sounds: "treant",

			attack: 3,
			life: 3,
			triggered_abilities: [{
				name: "Growth",
				rules: "Gets +1/+1 at the end of your turn if in your hand.",
				hidden_on_creature: true,
				on_end_turn_in_players_hand: "def(class creature creature, class game_state game, class card_base card) -> commands
					card.modify_creature('life', creature.life + 1);
					card.modify_creature('attack', creature.attack + 1)
				",
			}],
		},
	},

	"Feral Beast": {
		name: "Feral Beast",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "cave-troll.png",
		hue_shift: 0.5,
		cost: 3,
		school: "@eval FOOD",
		creature: {
			abilities: ['Feral'],
			game_sounds: "troll",
			attack: 6,
			life: 5,
			move: 1,
		},
	},

	"Cave Troll": {
		name: "Cave Troll",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "cave-troll.png",
		portrait_focus: [380,380],
		portrait_focus_width: 200,
		portrait_focus_height: 200,
		artist: "lucy",
		cost: 5,
		school: "@eval FOOD",
		help_strings: ["Restore"],
		creature: {
			tags: ['Troll'],
			game_sounds: "troll",
			triggered_abilities: [{
				name: "Regenerates",
				rules: "Is <i>Restored</i> at the end of each turn.",
				on_end_turn: "def(class creature creature, class game_state game) ->commands
					set(creature.restored, true)
				",
			}],
			attack: 5,
			life: 6,
			move: 1,
		},
	},

	"Call of the Pack": {
		name: "Call of the Pack",
		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "call-of-the-pack.png",
		artist: "lucy",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval FOOD",
		subcard_tips: ['Pack Wolf'],
		rules: "Summon three 2/2 Pack Wolves that get +1/+0 for each other <i>Wolf</i> you control.",
		possible_targets: "
		def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		   if(size(targets) = 3, null,
		      filter(game.players[avatar.controller].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD })),
			         not (value in targets)))",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Pack Wolf', {
			name: 'Pack Wolf',
			controller: game.current_player,
			loc: value,
			game_sounds: 'direwolf',
		})))"
	},


// Spells.

	"Nature's Blessing": {
		name: "Nature's Blessing",
		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "natures-blessing.png",
		artist: "lisanguyen",
		cost: 1,
		loyalty_cost: 0,
		school: "@eval FOOD",
		rules: "Restore mana equal to your (Gaea)Gaea Devotion.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		 map(range(player.get_resource_level(GAEA)), player.gain_mana_from_card(game, me))
		   where player = game.players[game.current_player_index]",
	},

	"Battlecry": {
		name: "Battlecry",
		set: "core",
		rarity: 0,
		artist: "wendyyoon",
		type: "spell",
		cost: 0,
		loyalty_cost: 4,
		school: "@eval FOOD",
		portrait: "battlecry.png",
		sound_resolve: "gameplay/spell_bloodlust",
		rules: "Creatures you control have Haste and +2/+0 this turn.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			//Make all existing creatures have +2/+0 and Haste
			[
			  [creature.apply_effect_until_end_of_turn('attack', 2)] |
			  creature <- game.creatures, creature.controller = game.current_player_index, creature.is_building = false
			],

			[
			  [creature.add_ability_until_end_of_turn('Haste'), creature.shake_haste()] |
			  creature <- game.creatures, creature.controller = game.current_player_index, creature.is_building = false, creature.summoned_this_turn
			],

			//Give the player avatar an ability to make it so any further creatures summoned
			//this turn also have +2/+0 and Haste
			game.player_obj.creature_avatar.add_triggered_ability_until_end_of_turn({
				on_another_creature_summoned: q(def(class creature player_avatar, class game_state game, class creature new_creature) ->commands
					if(new_creature.controller = player_avatar.controller,
					[
						new_creature.apply_effect_until_end_of_turn('attack', 2),
						new_creature.add_ability_until_end_of_turn('Haste'),
						new_creature.shake_haste()
					]
					)
				),
			}),
		]
		",

	},

	"Outsmart the Guards": {
		name: "Outsmart the Guards",
		set: "core",
		rarity: 1,
		type: "spell",
		portrait: "outsmart-the-guards.png",
		portrait_focus: [270,576],
		portrait_focus_height: 120,
		artist: "lucy",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval FOOD",
		is_response: true,
		rules: "Swap the positions of two target adjacent creatures in the same lane.",
		auto_target: true,
		possible_targets: "
		def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(targets) = 0,
		    [creature.loc | creature <- game.creatures,
			                not creature.is_building,
							creature.is_valid_target(game, avatar.controller, me)],
			if(size(targets) = 1,
				[creature.loc | creature <- game.creatures,
			                 not creature.is_building,
							 creature.is_valid_target(game, avatar.controller, me),
							 creature.loc[0] = targets[0][0],
							 abs(creature.loc[1] - targets[0][1]) = 1],
			 null))",
		on_play: "def(class game_state game, class message.play_card info) ->commands [
			set(target_a.loc, target_b.loc),
			set(target_b.loc, target_a.loc),
			game.add_animation_hint(construct('animation.move_hint', {
				sounds: ['gameplay/custom/outsmart_the_guards'],
				moves: [{
					creature: target_a,
					source: target_a.loc,
					dest: target_b.loc,
					type: 'swap',
				}, {
					creature: target_b,
					source: target_b.loc,
					dest: target_a.loc,
					type: 'swap',
				}],
			})),

		] where target_a = game.creature_at_loc_or_die(info.targets[0]),
		        target_b = game.creature_at_loc_or_die(info.targets[1])",

		ai_flags: "@eval [AI_CARD_SAVES, AI_CARD_NEVER_TARGET_ONLY_FRIENDS]",
	},

	"Furious Rampage": {
		name: "Furious Rampage",
		set: "core",
		rarity: 0,
		type: "spell",
		cost: 2,
		loyalty_cost: 3,
		portrait: "furious-rampage.png",
		sound_resolve: "gameplay/spell_bloodlust",
		school: "@eval FOOD",
		is_response: true,
		help_strings: ["Swift"],
		rules: "Target creature you control gains <i>Swift</i> and +3/+3. It dies at the end of the turn.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(targets) > 0, null,
		   [creature.loc | creature <- game.creatures, not creature.is_building,
			       creature.is_valid_target(game, avatar.controller, me),
				   creature.controller = avatar.controller])",
		on_play: "def(class game_state game, class message.play_card info) ->commands [
			add(target.attack, 3),
			add(target.life, 3),
			add(target.abilities, ['Swift']),

		  set(target.attack_imprint, 'effects/sunken-cracks-mask.png'),
		  target.add_triggered_ability_until_end_of_turn({
			name: 'Rampage',
			rules: 'This creature will die at the end of the turn',
			duration_hint: 'end of turn',
			on_end_turn: 'def(class creature creature, class game_state game) ->commands
				set(creature.destroyed, true)
			',
		   }),

		   target.add_passive_ability_until_end_of_turn({
				name: 'Rampage',
				rules: '',
				hidden_on_creature: true,
				particle_effects: ['rampage'],
		   })
		  ]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

		ai_flags: "@eval [AI_CARD_SAVES, AI_CARD_NEVER_TARGET_ENEMIES]"

	},

	"Inner Strength": {
		name: "Inner Strength",
		set: "core",
		rarity: 0,
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		portrait: "furious-rampage.png",
		hue_shift: 0.5,
		sound_resolve: "gameplay/spell_bloodlust",
		school: "@eval GAEA",
		is_response: true,
		rules: "Target creature gains +3/+3 until end of turn",

		possible_targets: "all_creatures_as_possible_targets",

		on_play: "def(class game_state game, class message.play_card info) ->commands [
			target.apply_effect_until_end_of_turn('attack', 3),
			target.apply_effect_until_end_of_turn('life_shield', 3, 'fist_creature_effect'),
		]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

		ai_flags: "@eval [AI_CARD_SAVES, AI_CARD_NEVER_TARGET_ENEMIES]"
	},
    
    	"Monsterous Growth": "Monstrous Growth",
    	"Monstrous Growth": {
		name: "Monstrous Growth",
		set: "core",
		rarity: 0,
		type: "spell",
		cost: 4,
		loyalty_cost: 0,
		portrait: "monstrous-growth.png",
		portrait_focus: [562,340],
		portrait_focus_width: 140,
		artist: "lordbob",
		sound_resolve: "gameplay/spell_bloodlust",
		school: "@eval FOOD",
		is_response: true,
		rules: "Target creature gains +X/+X where X is your (Gaea)",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
          [
		    if (info.card, add(target.life, game.players[info.player_index].get_resource_level(FOOD))),
            if (info.card, add(target.attack, game.players[info.player_index].get_resource_level(FOOD))),
		  ]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

		ai_flags: "@eval [AI_CARD_SAVES, AI_CARD_NEVER_TARGET_ENEMIES]"

	},
	
	"Cover": {
		name: "Cover",
		set: "core",
		rarity: 0,
		type: "spell",
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FOOD",
		portrait: "cover.png",
		portrait_focus: [406,526],
		portrait_focus_height: 220,
		help_strings: ["Cover"],
		artist: "lucy",
		rules: "Target friendly creature has <i>Cover</i> this turn.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  creature.add_ability_until_end_of_turn('Cover')
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",

		ai_flags: ["@eval AI_CARD_USE_ONLY_TO_SAVE"],
	},
	
	"Burrow": {
		name: "Burrow",
		set: "core",
		rarity: 0,
		type: "spell",
		portrait: "burrow.png",
		artist: "lisanguyen",
		portrait_focus: [402,373],
		portrait_focus_height: 200,
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FOOD",
		rules: "Target creature you control has <i>Cover</i>, -4/-0, +4 armor until end of turn, and is exhausted.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		  creature.add_ability_until_end_of_turn('Cover'),
		   creature.apply_effect_until_end_of_turn('attack', -4),
		   creature.apply_effect_until_end_of_turn('armor', 4),
		   creature.exhaust(),
		] where creature = game.creature_at_loc_or_die(info.targets[0])",
	},

	"Intense Warfare": {
		name: "Intense Warfare",
		set: "core",
		rarity: 1,
		type: "spell",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FOOD",
		portrait: "intense-warfare.png",
		artist: "lisanguyen",
		rules: "Creatures Refresh and regain their full movement allowance.",
		on_play: "def(class game_state game, class message.play_card info) ->commands [
		  [creature.refresh(), set(creature.spaces_moved_this_turn, 0)]
		  | creature <- game.creatures,
		    not creature.is_building

		]
		",
		
	},

	"Mess Hall": {
		name: "Mess Hall",
		//set: "core",
		rarity: 1,
		type: "creature",
		portrait: "mess-hall.png",
		cost: 5,
		school: "@eval FOOD",
        rules: "DEAPRECIATED CARD",
		//Description: Within mess halls goblin warriors gather to hone their skills and plan raids on nearby settlements.
		creature: {
			is_land: true,
			abilities: ['Cove'],
			triggered_abilities: [{
				name: "Training",
				rules: "Goblins you summon in this lane have +2/+1.",
				on_another_creature_summoned: "def(class creature creature, class game_state game, class creature new_creature) ->commands
				if(new_creature.loc[0] = creature.loc[0] and new_creature.controller = creature.controller and ('Goblin' in new_creature.tags), [
					add(new_creature.life, 1),
					add(new_creature.attack, 2),
				])",
			}],
		},
	},

	"Savage Lands": {
		name: "Savage Lands",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 5,
		school: "@eval FOOD",
		portrait: "savage-lands.png",
		artist: "lisanguyen",
		creature: {
			is_land: true,
			triggered_abilities: [{
				name: "Survival of the Fittest",
				rules: "Creatures you summon in this lane have +1/+1 and <i>Haste</i>",
				on_another_creature_summoned: "def(class creature creature, class game_state game, class creature new_creature) ->commands
				if(new_creature.loc[0] = creature.loc[0] and new_creature.controller = creature.controller, [
					add(new_creature.life, 1),
					add(new_creature.attack, 1),
					add(new_creature.abilities, ['Haste']),
					new_creature.shake_haste(),
				])",
			}],
		},
	},




	"Primal Rage": {
		name: "Primal Rage",
		type: "spell",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FOOD",
		is_response: true,
		rules: "Target creature gains +2/+2 this turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands [
		   target.apply_effect_until_end_of_turn('attack', 2),
		   target.apply_effect_until_end_of_turn('life', 2)
		 ] where target = game.creature_at_loc_or_die(info.targets[0])"
	},

	"Goblin Grenadier": {
		name: "Goblin Grenadier",
		type: "creature",
		portrait: "goblin-grenadier.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval FOOD",
		creature: {
			tags: ['Goblin'],
			abilities: ['Feral'],
			activated_abilities: [{
				name: 'Detonate',
				cost: 0,
				loyalty_cost: 1,
				school: "@eval FOOD",
				rules: "Goblin Grenadier dies, each adjacent creature and construct takes 2 damage.",
				is_response: true,
				on_play: "
				def(class game_state game, class message.play_card info) ->commands
				[
					set(creature.destroyed, true),
					set(creature.death_animation_hint, 'fireball_explosion'),
					[ target.inflict_combat_damage(game, creature, 2)
					  | target <- game.creatures,
					    game.locs_adjacent(creature.loc, target.loc) ]
				] where creature = info.get_creature(game)
				",
			}],
			attack: 4,
			life: 4,
			move: 1,
		}
	},

	"Goblin": "Guardian",

	"Guardian": {
		name: "Guardian",
		type: "creature",
		portrait: "wolf-rider.png",
// 		portrait_focus: [252,269], // XXX
// 		portrait_focus_height: 060, // XXX
// 		artist: "lucy",  //   `wolf-rider.png` is by **lucy**, but the
		                 // card is arguably an _art incomplete_ card?
		cost: 1,
		token: true,
		loyalty_cost: 1,
		school: "@eval FOOD",
		creature: {
			tags: ['Guardian'],
            abilities: ['Feral'],
		portrait: "wolf-rider.png",
// 			portrait_focus: [552,369], // XXX
// 			portrait_focus_height: 260, //XXX
// 			artist: "lucy",  //   `wolf-rider`.png` is by **lucy**,
			                 // but the card is arguably an _art
			                 // incomplete_ card?
			attack: 2,
			life: 2,
			game_sounds: 'guardian',
			move: 1,
		}
	},

        "Pack Wolf": {
                name: "Pack Wolf",
                type: "creature",
                cost: 1,
                loyalty_cost: 3,
                school: "@eval FOOD",
				hue_shift: 0.05,
                rules: "Pack Wolf has +1/+0 for each other 'Wolf' creature you control.",
                portrait: "wolf.png",

                creature: {
                        tags: ['Wolf', 'Beast'],
                        attack: 2,
                        life: 2,
                        move: 1,
                        static_ability_effect: "if(creature = target,creature.apply_static_effect('attack', bonus) where bonus = count(game.creatures, value.controller = creature.controller and value != creature and ('Wolf' in value.tags)))"
                }
        },
	
	"Rampaging Troll": {
		name: "Rampaging Troll",
		type: "creature",
		portrait: "rampaging-troll.png",
		cost: 5,
		loyalty_cost: 4,
		school: "@eval FOOD",
		rules: "At the start of your turn, Rampaging Troll's life becomes 3.",
		creature: {
			tags: ['Troll'],
			abilities: ['Feral', 'Haste'],
			attack: 6,
			life: 6,
			move: 1,
			on_begin_turn: "def(class game_state game) ->commands
			  if(game.current_player = controller, set(me.life, 3))",
		},
	},

	"Lumbering Ogre": {
		name: "Lumbering Ogre",
		type: "creature",
		portrait: "lumbering-ogre.png",
		cost: 3,
		loyalty_cost: 4,
		school: "@eval FOOD",
		rules: "When it is not your turn, Lumbering Ogre has 0 attack.",
		creature: {
			tags: ['Ogre'],
			attack: 0,
			life: 16,
			move: 1,
			on_begin_turn: "def(class game_state game) ->commands
			  if(game.current_player != controller, me.apply_effect_until_end_of_turn('attack', -attack))"
		}
	},

	"Flash Adder": {
		name: "Flash Adder",
		type: "creature",
		portrait: "green-adder.png",
		is_response: true,
		cost: 0,
		loyalty_cost: 3,
		school: "@eval FOOD",
		rules: "At the end of your turn, sacrifice Flash Adder.",
		//flavor: "It strikes its prey faster than one would believe, and then slinks back to its burrow.",
		creature: {
			sound_summoned: "creatures/summon-flesh-golem.wav",
			tags: ['Serpent'],
			abilities: ['Haste'],
			attack: 6,
			life: 2,
			move: 1,
			on_end_turn: "def(class game_state game) ->commands
				if(game.current_player_index = controller, set(me.destroyed, true))"
		}
	},

	"Wose": {
		name: "Wose",
		type: "creature",
		portrait: "wose.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FOOD",
		rules: "At night, Wose is an immovable building",
		creature: {
			tags: ['Wose'],
			static_effect: "def(class game_state game) ->commands
				if(game.is_night, apply_creature_effect(game,
				  def(class game_state game, class creature creature, map info)->commands [set(creature.is_building, true), add(creature.move, -creature.move)],
				  def(class game_state game, class creature creature, map info)->commands [set(creature.is_building, bool<- info.old_building), add(creature.move, int<- info.move)],
				  { old_building: me.is_building, move: me.move }
				 ))
			",

			sound_impact: "wood",

			attack: 16,
			life: 16,
			move: 1,
		}
	},

	"Cavern Wurm": {
		name: "Cavern Wurm",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval FOOD",
		creature: {
			tags: ['Wurm'],
			attack: 10,
			life: 6,
			move: 1,
		}
	},
	
	"Grove of Sanctity": {
		name: "Grove of Sanctity",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FOOD",
		rules: "Creatures you control in this lane have Regeneration.",
		creature: {
			tags: ["Grove"],
			life: 6,
			is_land: true,
			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0] and not target.is_building, target.add_ability_static_duration('Regeneration'))"
		}
	},
	
	"Grove of Vigor": {
		name: "Grove of Vigor",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FOOD",
		rules: "Creatures you control in this lane have +1 move and Haste.",
		creature: {
			tags: ["Grove"],
			life: 6,
			is_land: true,
			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0] and not target.is_building, [target.add_ability_static_duration('Haste'), target.apply_static_effect('move', 1)])"
		}
	},

	"Grove of the Restless": {
		name: "Grove of the Restless",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval FOOD",
		rules: "Creatures you control in this lane have +1/+0.",
		creature: {
			tags: ["Grove"],
			life: 6,
			is_land: true,
			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0] and not target.is_building, target.apply_static_effect('attack', 1))"
		}
	},
	
	"Quick Step": {
		name: "Quick Step",
		type: "spell",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval FOOD",
		rules: "Target creature gains +1 move.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(creature.move, 1)
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Hill Giant": {
		name: "Hill Giant",
		type: "creature",
		portrait: "redhill-giant.png",
		cost: 8,
		loyalty_cost: 3,
		school: "@eval FOOD",
		creature: {
			tags: ['Giant'],
			abilities: ['Haste'],
			attack: 16,
			life: 16,
			move: 1,
		},		
	},
	
	"Hurl": {
		name: "Hurl",
		type: "spell",
		cost: 2,
		school: "@eval FOOD",
		loyalty_cost: 2,
		is_response: true,
		rules: "Sacrifice a goblin, deal 4 damage to target creature in the same lane.",
		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(targets) = 0,
		    [creature.loc | creature <- game.creatures,
			                not creature.is_building,
							'Goblin' in creature.tags,
							creature.is_valid_target(game, avatar.controller, me)],
			if(size(targets) = 1, [creature.loc | creature <- game.creatures, not creature.is_building, creature.loc[0] = targets[0][0], creature.is_valid_target(game, avatar.controller, me)],
			 null))",
		on_play: "def(class game_state game, class message.play_card info) ->commands [
			set(goblin.destroyed, true),
			add(target.life, -4)
		]
			where goblin = game.creature_at_loc_or_die(info.targets[0]),
			      target = game.creature_at_loc_or_die(info.targets[1])",
	},

	"Strip the Carcass": {
		name: "Strip the Carcass",
		type: "spell",
		school: "@eval FOOD",
		cost: 0,
		loyalty_cost: 2,
		is_response: true,
		rules: "When target creature dies this turn, its owner gains mana equal to the creature's life.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  co.add_triggered_ability_until_end_of_turn({
			name: 'Strip the Carcass',
			rules: 'If creature dies this turn, owner gains resources equal to the creatures life',
			duration_hint: 'end of turn',
			on_die: 'def(class creature creature, class game_state game) ->commands
			  add(game.players[creature.controller].resources, creature.life)'})
			asserting size(info.targets) = 1
			where co = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Feral Rampage": {
		name: "Feral Rampage",
		type: "spell",
		school: "@eval FOOD",
		cost: 1,
		loyalty_cost: 2,
		rules: "Target creature gains +3/+3 this turn.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  //TODO: revert this to all_creatures_as_possible_targets.
		  //This is temporary code for bot testing.
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, avatar.controller, me)])
		",
		on_play: "def(class game_state game, class message.play_card info) ->commands [
			creature.apply_effect_until_end_of_turn('attack', 3),
			creature.apply_effect_until_end_of_turn('life', 3),
			]
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
		ai_flags: "@eval [AI_CARD_SAVES, AI_CARD_NEVER_TARGET_ENEMIES]",
	},

	"Slathering Wolf": {
		name: "Slathering Wolf",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval FOOD",
		rules: 'When Slathering Wolf damages an enemy creature, that creature gets -1 move and gains Poisoned.',
		creature: {
			tags: ['Wolf', 'Beast'],
			attack: 4,
			life: 4,
			move: 1,
			triggered_abilities: [{
				name: "Infectious disease",
				rules: "-1 move and poisoned",
				on_deal_damage: "def(class creature creature, class game_state game, class creature target, int damagej, null|class animation.creature_attack_hint hint=null) ->commands
				[add(target.move, -1), 
					if(not ('Poisoned' in target.status_effects), add(target.status_effects, ['Poisoned']))]",
			}],
		}
	},

	"The Great Horde": {
		name: "The Great Horde",
		type: "spell",
		cost: 8,
		loyalty_cost: 2,
		school: "@eval FOOD",
		rules: "Summon a Guardian on every tile where you can summon a creature.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			map(
			game.player_obj.summoning_locs(game, goblin),
			game.summon_creature(goblin + {
				game_sounds: 'guardian',
				name: 'Guardian',
				controller: game.current_player,
				loc: value,
			}))
			where goblin = lib.citadel.create_creature('Guardian')"
	},

	"Vines of the Deep Wood": "Overgrowth",

	"Overgrowth": {
		name: "Overgrowth",
		type: "spell",
        set: "core",
        portrait: "overgrowth.png",
		artist: "stephenwang",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval FOOD",
		is_response: true,
		rules: "Place a neutral <i>Forest</i> land in target tile, destroying any existing land in the tile.",
		possible_targets: "all_tiles_as_possible_targets",

		subcard_tips: ["Forest"],
		target_particles: "@eval (def
// 			() -> [{
// 				assign_to_one_target: null | bool,
// 				delay_end: null | decimal,
// 				delay_start: null | decimal,
// 				effect: string,
// 				end_anim: null | {
// 					attr: {
// 						emission_rate: null | decimal,
// 						scale_time: null | decimal,
// 						time_to_live: null | decimal
// 					},
// 					delay: null | decimal,
// 					duration: decimal
// 				},
// 				fade_time: null | decimal,
// 				hidden_in_opponent_client: null | bool,
// 				hidden_in_player_client: null | bool,
// 				pos: null | [int, int, ],
// 				start_anim: null | {
// 					attr: {
// 						emission_rate: null | decimal,
// 						scale_time: null | decimal,
// 						time_to_live: null | decimal
// 					},
// 					delay: null | decimal,
// 					duration: decimal
// 				},
// 				zorder: null | int
// 			}]
			() -> [map]
			[
				{
					effect:
						(def
							() -> string
							if(spring or summer,
								'og_two_a',
							// else
								'og_zero_a_one'
							)
						)(),
					pos: [
						32,
						(def
							() -> int
							if(spring or summer,
								32,
							// else
								-100
							)
						)(),
					],
					zorder: 2,
					fade_time: 2,
				}, {
					effect:
						(def
							() -> string
							if(spring or summer,
								'og_two_b',
							// else
								'og_zero_b',
							)
						)(),
					pos: [
						32,
						(def
							() -> int
							if(spring or summer,
								32,
							// else
								-100
							)
						)(),
					],
					zorder: 1,
					fade_time: 1.5,
					end_anim: {
						delay: 2,
						duration: 2,
						attr: {
							scale_time: .5,
// 							time_to_live: 20,
						},
					},
				}, {
					effect:
						(def
							() -> string
							if(spring or summer,
								'og_two_d',
							// else
								'og_zero_d'
							)
						)(),
					pos: [
						32,
						(def
							() -> int
							if(spring or summer,
								32,
							// else
								-100
							)
						)(),
					],
					zorder: 1,
					fade_time: 1.5,
					end_anim: {
						delay: 2,
						duration: 2,
						attr: {
							scale_time: .5,
// 							time_to_live: 20,
						},
					},
				}, {
					effect:
						(def
							() -> string
							if(spring or summer,
								'og_two_c',
							// else
								'og_zero_c'
							)
						)(),
					pos: [
						32,
						(def
							() -> int
							if(spring or summer,
								32,
							// else
								-100
							)
						)(),
					],
					zorder: 0,
					fade_time: 1.5,
					end_anim: {
						delay: 2,
						duration: 2,
						attr: {
							scale_time: .333,
// 							time_to_live: 20,
						},
					},
				}, {
					effect:
						(def
							() -> string
							if(spring or summer,
								'no_op',
							// else
								'og_zero_e'
							)
						)(),
					pos: [32, -100, ],
					zorder: 0,
					fade_time: 1.5,
					end_anim: {
						delay: 2,
						duration: 2,
						attr: {
							scale_time: .333,
// 							time_to_live: 20,
						},
					},
				},
			]
			asserting xor4(winter, spring, summer, autumn)
			where winter = true
				and (day_of_year >= day_of_year_on_dec_24th
					or day_of_year < day_of_year_on_march_21st)
				and not force_spring
				and not force_autumn
			where spring = true
				and day_of_year >= day_of_year_on_march_21st
				and day_of_year < day_of_year_on_june_24th
				and not force_autumn
				or force_spring
			where summer = true
				and day_of_year >= day_of_year_on_june_24th
				and day_of_year < day_of_year_on_sept_23rd
				and not force_spring
				and not force_autumn
			where autumn = true
				and day_of_year >= day_of_year_on_sept_23rd
				and day_of_year < day_of_year_on_dec_24th
				and not force_spring
				or force_autumn
			where day_of_year_on_march_21st =
				2 * avg_days_in_a_month + 21
			where day_of_year_on_june_24th =
				5 * avg_days_in_a_month + 24
			where day_of_year_on_sept_23rd =
				8 * avg_days_in_a_month + 23
			where day_of_year_on_dec_24th =
				11 * avg_days_in_a_month + 24
			where day_of_year = (month - 1) * avg_days_in_a_month +
				day_in_month
			where avg_days_in_a_month = 30.25
			where day_in_month = date.day
			where month = date.month
			where date = time()
			asserting not (force_spring and force_autumn)
			where force_spring = false
			where force_autumn = false
			//   TODO Reimplement using a reduction call (e.g.
			// `reduce(list, function)`).
			where xor4 = def
				(bool a, bool b, bool c, bool e) -> bool
				xor3(a, b, xor2(c, e))
			where xor3 = def
				(bool a, bool b, bool c) -> bool
				xor2(a, xor2(b, c))
			where xor2 = def
				(bool a, bool b) -> bool
				if(not a and not b, false,
					not a and b, true,
					a and not b, true,
					a and b, false)
		)()",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			if(target_construct, set(target_construct.destroyed, true)),
			bind_command(game.summon_land,
			             lib.citadel.create_creature('Forest',
			{
				loc: info.targets[0],
			})),
		] where target_construct = game.land_at_loc(info.targets[0])",
	},

	"Terramorph": {
		name: "Terramorph",
		type: "spell",
		school: "@eval [GAEA]",
		set: "core",
		cost: 2,
		loyalty_cost: 2,
		portrait: "overgrowth.png",
		hue_shift: 0.5,
		rarity: 1,
		is_response: true,

		rules: "Place a terrain land found in your deck on target tile, destroying any existing land in the tile.",

		possible_targets: "all_tiles_as_possible_targets",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		if(possible_cards_unique and not info.choices,
		[
			game.set_current_choice({
				card: me,
				info: info,
				text: 'Choose terrain',
				options:
				map(possible_cards_unique, construct('choice.card', {
					card: value,
					tag: index,
				}))
			})
		],

		possible_cards_unique and info.choices and info.choices[0] is int,

		game.summon_land(lib.citadel.create_creature(possible_cards_unique[info.choices[0]].name,
		{
			loc: info.targets[0],
			controller: game.current_player_index,
		}
		)
		)
		)
		where possible_cards_unique = filter(possible_cards, index = 0 or possible_cards[index-1].name != value.name)
		where possible_cards = sort(filter(game.player_obj.deck, 'Terrain' in value.tags), a.name < b.name)
		",
	},

	"Ambush": {
		name: "Ambush",
		type: "spell",
		school: "@eval [GAEA]",
		set: "core",
		cost: 1,
		loyalty_cost: 2,
		portrait: "intense-warfare.png",
		hue_shift: 0.5,
		rarity: 0,
		rules: "Target creature you control with <i>Cover</i> gets +2/+0 and <i>First Strike</i> until end of turn. It fights a random adjacent enemy creature.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			target_creature.apply_effect_until_end_of_turn('attack', 2),
			target_creature.add_ability_until_end_of_turn('First Strike'),

			game.add_delayed_commands(
			;
				if(adjacent_enemies,
					game.force_fight(target_creature, target_enemy)
					where target_enemy = choose(adjacent_enemies)
				)
				where adjacent_enemies = filter(adjacent_creatures, value != null and value.controller != target_creature.controller)
				where adjacent_creatures = map(game.get_adjacent_locs(info.targets[0]), game.creature_at_loc(value))
			),
		]

			where target_creature = game.creature_at_loc_or_die(info.targets[0])
		",

		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, avatar.controller, me), 'Cover' in creature.abilities])
		",

	},

	"Forest": {
		name: "Forest",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "forest.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		help_strings: ["Cover"],
		artist: "sara",
		rules: "Creatures in this tile have <i>Cover</i>.",
		ai_flags: "@eval [AI_CARD_BUILD_DEVOTION]",
		creature: {
			tags: ["Terrain"],
			is_land: true,
            portrait: "forest.png",
			static_ability_effect: "if(creature.loc = target.loc and not target.is_land, target.add_ability_static_duration('Cover'))",
		},
	},
    
    "Hunting Grounds": {
		name: "Hunting Grounds",
		type: "creature",
        set: "core",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "hunting-grounds.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		artist: "lisanguyen",
		creature: {
			is_land: true,
            portrait: "hunting-grounds.png",

			passive_abilities: [{
				name: 'Scent of the Prey',
				rules: "Your creatures in this lane have +1/+1.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[
					 [
					   target.apply_static_effect('attack', 1),
					   target.apply_static_effect('life_shield', 1),
					 ]
					| target <- game.creatures,
					  target.is_building = false,
					  target.loc[0] = creature.loc[0],
					  target.controller = creature.controller
				]
				",
		}],

		},
	},

	"Gaia's Rebirth": {
		name: "Gaia's Rebirth",
		type: "creature",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval FOOD",
		creature: {
			tags: ["Construct"],
			life: 6,
			is_land: true,
			activated_abilities: [{
				name: 'Rebirth',
				cost: 0,
				loyalty_cost: 0,
				school: "@eval FOOD",
                once_per_turn: true,
				rules: "Target tile that is adjacent to Gaia's Rebirth or to a forest becomes a forest.",
                possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
                    if(targets = [], [loc | loc <- game.all_locs, cons <- game.lands, cons.name in ['Forest', q(Gaia's Rebirth)], game.locs_adjacent(loc, cons.loc), not game.land_at_loc(loc)])
                ",
				on_play: "def(class game_state game, class message.play_card info) ->commands
                    bind_command(game.summon_land, lib.citadel.create_creature('Forest', {loc: info.targets[0]}))
				",
			}],
		}
	},

	//version of wolf rider with lots of movement.
	"Debug Wolf Rider": {
		name: "Debug Wolf Rider",
		type: "creature",
		portrait: "wolf-rider.png",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval FOOD",
		rules: "+1 move during night",
		creature: {
			static_effect: "def(class game_state game) ->commands
				if(game.is_night, me.apply_static_effect('move', 1))
			",
			tags: ['Mounted'],
			abilities: ['Feral', 'Haste'],
			portrait_y_offset: 10,
			portrait_scale: 0.15,
			attack: 4,
			life: 4,
			move: 2,
		}
	},
}

