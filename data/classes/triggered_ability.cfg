//Triggered abilities -- abilities that take effect when an event occurs.
// Contrast with static abilities (always in effect) or activated abilities
// (in effect when the controller chooses).
//
// To add a new trigger, e.g. make being passed over by another creature
// trigger something... add to the creature class:
// on_moved_over_by_creature: "def(game, other_creature) null"
// add to the triggered ability class:
// on_moved_over_by_creature: "def(creature, game, other_creature) null"
//
// Note how the triggered_ability class has to take an extra argument which
// is the creature. When we want to trigger this event, do this:
//
// creature.fire_event('on_moved_over_by_creature', [game, creature_passing_over])
//
// Then on_moved_over_by_creature will be called in the creature class and in
// all triggered_abilities for that class.
//
// This is how we'd make the Mausoleum offer lifegain:
//
// add(creature.triggered_abilities, [{
//    name: 'Regeneration',
//    rules: 'Gain 1 life at the start of turn',
//    notes: 'Gained from Mausoleum',
//    on_begin_turn: 'def(creature, game) add(creature.wounds, -1)'
// }])
{
	properties: {
		unique_id: { variable: true, type: 'int', default: 0 },
		
		name: { variable: true, type: 'string', default: 'NO NAME ABLIITY' },
		rules: { variable: true, type: 'string', default: 'NO RULE ABILITY' },
		icon: { variable: true, type: 'string', default: 'triggered.png' },

		tag: { type: "string|null" },

		particle_effects: { type: "[string]", default: [] },

		//   Configures whether tooltips and icons are to show in the
		// creature when on the battlefield.
		hidden_on_creature: { type: "bool", default: false },

		//   Allows for ignoring the `hidden_on_creature` property
		// throughout the turn the creature has been summoned.
		ignore_hidden_on_creature_on_turn_when_summoned:
			{type: "bool", default: false},

		hidden_on_card: { type: "bool", default: false },

		summary: "string :: name",

		//might put notes about how the triggered ability was added here
		//e.g. "Regeneration given by Mausoleum" to tell the player
		//how the ability was given.
		notes: { variable: true, default: null, type: 'string|null' },
		
		// so that we can display in a different color.
		duration_hint: {variable: true, default: ''},

		args: {variable: true, default: {}},

		once: { type: "bool", default: false },

		trigger: "def(class creature creature) ->commands
			if(once, ; set(creature.triggered_abilities, filter(creature.triggered_abilities, value != me)))
		",

		//assume the a triggered ability makes a creature 20% more valuable
		ai_value: { type: "decimal", default: 1.2 },

		on_summoned: "def(class creature creature, class game_state game) ->commands null",

		on_deal_damage: "def(class creature creature, class game_state game, class creature target, int damage, null|class animation.creature_attack_hint hint=null) ->commands null",
		on_attacked: "def(class creature creature, class game_state game, class creature attacker, int damage) ->commands null",
		on_damaged: "def(class creature creature, class game_state game, int damage) ->commands null",

		on_kill: "def(class creature creature, class game_state game, class creature victim) ->commands null",
		on_another_creature_died: "def(class creature creature, class game_state game, class creature victim) ->commands null",
		on_another_creature_summoned: "def(class creature creature, class game_state game, class creature new_creature) ->commands null",
		on_land_summoned: "def(class creature creature, class game_state game, class creature new_creature, null|class creature old_land) ->commands null",
		on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands null",

		on_die: "def(class creature creature, class game_state game) ->commands null",

		on_card_discarded: "def(class creature creature, class game_state game, class player player, class card card) ->commands null",

		on_reach_endzone: "def(class creature creature, class game_state game) ->commands null",

		on_begin_turn: "def(class creature creature, class game_state game) ->commands null",
		on_end_turn: "def(class creature creature, class game_state game) ->commands null",
		on_move_over_creature: "def(class creature creature, class game_state game, class creature other_creature) -> commands null",
		on_moved_over_by_creature: "def(class creature creature, class game_state game, class creature other_creature) ->commands null",
		on_move_over_construct: "def(class creature creature, class game_state game, class creature other_creature) ->commands null",

		on_move: "def(class creature creature, class game_state game) ->commands null",

		on_end_game: "def(class creature creature, class game_state game, int nwinner) ->commands null",

		on_end_turn_in_players_hand: "def(class creature creature, class game_state game, class card_base card) ->commands null",
	}
}
