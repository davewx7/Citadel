{
	bases: ['client_tutorial'],
	properties: {
		inhibit_card_click: "def(obj citadel_controller ctrl, obj card card) ->bool false",
		inhibit_card_right_click: "def(obj citadel_controller ctrl, obj card card) ->bool false",

		inhibit_end_turn: "def(obj citadel_controller ctrl) ->bool false",

		_shown_sequences: { type: "[string]", default: [] },

		game_updated: "def(obj citadel_controller ctrl, class game_state game) ->commands
		[
		if(me._shown_intro = false, [
		  set(ctrl.suppress_animations, true),
		],

		(game.current_player_index = 1 and game.in_response_phase = false and game.creatures != []) and 'end_passive' not in _shown_sequences,
		[
			add(_shown_sequences, ['end_passive']),
			ctrl.transient_opponent_speak(
			  q(Well I wouldn't want your Disciples entering my Citadel.  I wonder how devout they will be when they are chilled to the bone.)
			)
		]
		)
		]",

		draw: "def(obj citadel_controller ctrl) ->commands
		[
			if(_shown_intro = false, [

		   	    if(size(filter(ctrl.level.chars, value is obj card)) >= 6, [
			  		set(me._shown_intro, true),
			  		ctrl.show_intro_sequence('animate_avatars'),
				]),
			]),
		]",

		_shown_intro: { type: "bool", default: false },

		override_tips: "bool :: true",
		generate_tips: "def(obj citadel_controller ctrl, class game_state game) ->[Tip|null]
		if(_shown_intro = false, [],
		[
			if(game.in_response_phase and
			   size(game.stack) = 1 and
			   heal_card != null and
			   (play.card != null and play.card.name = 'Hypothermia'
				where play = class message.play_card <- game.stack[0]
			   ), {
				key: 'hypothermia_response',
				text: 'Quick, cast <b>Blessing of Endurance</b> in response to the <b>Hypothermia</b> on your <b>Disciple</b> to bolster its health enough to survive the Hypothermia!',
				max_shows: 100,
				targets: [find_or_die(level.chars, value is obj card and value.card_type = heal_card), find_or_die(level.chars, value is obj creature and value.creature_object.loc = (class message.play_card<- game.stack[0]).targets[0])],
			   }
			) where heal_card = find(game.players[0].hand, value.name = 'Blessing of Endurance'),

			if(game.in_response_phase = false and game.current_player_index = 0 and heal_card != null and game.creatures != [],
			{
				key: 'have_response_card',
				text: q(<b>Response</b> spells can be played in response to an enemy's spell as long as you have the mana to play them. Try to keep enough mana in your mana pool at the end of the turn so you can play <b>Blessing of Endurance</b> if you need to!),
				max_shows: 100,
				targets: [find_or_die(level.chars, value is obj card and value.card_type = heal_card)],
			}
			) where heal_card = find(game.players[0].hand, value.name = 'Blessing of Endurance'),


			if(disciple != null and lance != null, {
				key: 'blessed_lance',
				text: 'Your Disciple is confronting a Green Adder. They will both strike each other at the same time. If you cast <b>Blessed Lance</b> on your Disciple it will gain <b>First Strike</b>. It will be able to strike the snake first, slaying it and leaving your Disciple unharmed.',
				max_shows: 100,
				targets: [lance, disciple],
			}
			) where lance = find(level.chars, value is obj card and value.card_type.name = 'Blessed Lance' and value.in_hand)
			  where disciple = find(level.chars, value is obj creature and value.creature_object.abilities = [] and value.creature_object.name = 'Disciple' and game.creature_at_loc([value.creature_object.loc[0], value.creature_object.loc[1]+1]) != null and game.creature_at_loc_or_die([value.creature_object.loc[0], value.creature_object.loc[1]+1]).name = 'Green Adder' and value.creature_object.is_engaged(game)),


			if(my_unit != null and their_unit != null,
			{
				key: 'basic_combat',
				text: if('First Strike' in my_unit.creature_object.abilities,
				   'These units are engaged with each other. Since your ' + my_unit.creature_object.name + ' has <b>First Strike</b> it will deal damage first. Only if the enemy survives the attack will it strike in response.',
				   'These units are engaged with each other. Each creature deals damage equal to its attack power. Damage is dealt simultaneously. Creatures that are expected to perish in battle are displayed with a skull icon marking their doom.'),
				max_shows: 100,
				targets: [their_unit, my_unit],
				is_modal: game.current_player_index = 1,
			})
			where their_unit = find(level.chars, value is obj creature and value.creature_object.controller = 1 and my_unit != null and value.creature_object.loc = [my_unit.creature_object.loc[0], my_unit.creature_object.loc[1]+1])
			where my_unit = find(level.chars, value is obj creature and value.creature_object.controller = 0 and value.creature_object.is_engaged(game)),

			if(game.in_response_phase = false,
			  if(playable_creature != null, {
				key: 'play_creature',
				text: 'Summon a <b>' + playable_creature.name + '</b>. Click on the card to summon the creature.',
				max_shows: 100,
				targets: [find_or_die(level.chars, value is obj card and value.in_hand and value.card_type = playable_creature)],
			  })
			where playable_creature = find(player.hand, value.creature_object != null and value.creature_object.is_land = false and value.creature_object.is_building = false and player.can_afford(value))
			),

			if(game.in_response_phase = false and player.has_possible_play(game) = false and end_turn_button != null, {
				key: 'must_end_turn',
				text: q(You don't have any cards you can play. Press the <b>End Turn</b> button to end your turn),
				max_shows: 100,
				targets: [end_turn_button],
			}) where end_turn_button = find(level.chars, value is obj end_turn_button),

			if(game.in_response_phase and player.has_possible_response(game) and game.stack != [] and end_turn_button != null and
			   (play.card != null and play.card.name != 'Hypothermia'
				where play = class message.play_card <- game.stack[0]), {
				key: 'pass_on_response',
				text: q(Anytime you have a response card available you get a chance to respond to spells being cast. Many times you just want to pass.),
				max_shows: 100,
				targets: [end_turn_button]
			}) where end_turn_button = find(level.chars, value is obj end_turn_button),

			if(game.current_player_index = 0 and game.in_response_phase = false and ctrl.avatar_life != [],
			{
				key: 'player_life',
				text: q(Each player starts with 40 life. Damage your opponent by getting creatures to the opponent's side of the board. You win the game by reducing your opponent's life to 0. ),
				targets: ctrl.avatar_life,
				target_offset_y: 20,
			}),

			if(game.current_player_index = 0 and game.in_response_phase = false and ctrl.mana_bar != null,
			{
				key: 'player_mana',
				text: q(Your mana pool contains the mana you have available for casting spells. Your mana pool replenishes and grows each turn.),
				targets: [ctrl.mana_bar],
				target_offset_y: 20,
			}),

			if(game.current_player_index = 0 and game.in_response_phase = false and ctrl.mana_bar != null and game.players[game.current_player_index].calculate_income(game) >= 6,
			{
				key: 'player_mana_max',
				text: q(You now have enough mana to play two Disciples each turn. Your hand will be replenished each turn so it is usually best to cast as many spells as you can.),
				targets: [ctrl.mana_bar],
				target_offset_y: 20,
			}),



		] where player = game.players[0]
		  where level = ctrl.level)",
	}
}
