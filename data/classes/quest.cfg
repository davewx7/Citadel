{
	properties: {
		name: { type: "string", default: "" },
		rules: { type: "string", default: "" },
		type: { type: "string", default: "" },
		assigned_date: { type: "int", default: 0 },
		campaign: { type: "string", default: "" },
		deck_rules: { type: "null|class deck_rules" },

		//if true this quest has been created in an online game.
		is_multiplayer: { type: "bool", default: false },

		requirements: { type: "null|[string]" },

		_reward: { type: "null|int" },

		reward: "int :: if(_reward, _reward, 50)",

		current_value: { type: "int", default: 0 }, 
		max_value: { type: "int", default: 3 },

		get_info: "def() ->Quest { type: type, assigned_date: assigned_date, current_value: current_value }",

		info: { type: "Quest|null" },

		create: "def(Quest m, bool is_multiplayer=false) ->class quest
			construct('quest', (map<- all[m.type]) + m + { is_multiplayer: is_multiplayer })
		",

		increment: "def() ->commands
			if(current_value < max_value, add(current_value, 1))
		",

		all: "{string->map} ::
		query_cache(global_cache(1), 0,
		{string->map}<-
		fold(
		map(data,
			{(key): value + {type: key, assigned_date: 0}}
		), a+b, {})
			where data = {string -> map} <- get_document('data/quests.cfg')
		)",

		is_starter_deck: "def([string] deck) ->bool
		(sort(deck) in map(deck_map, sort(value.cards)))
		where deck_map = DeckMap<- lib.json.get_document_map('data/starting-decks.cfg')
		",
 
		on_summoned: "def(class creature creature, class game_state game) ->commands null",

		on_deal_damage: "def(class creature creature, class game_state game, class creature target, int damage, null|class animation.creature_attack_hint hint=null) ->commands null",
		on_attacked: "def(class creature creature, class game_state game, class creature attacker, int damage) ->commands null",
		on_damaged: "def(class creature creature, class game_state game, int damage) ->commands null",

		on_kill: "def(class creature creature, class game_state game, class creature victim) ->commands null",
		on_another_creature_died: "def(class creature creature, class game_state game, class creature victim) ->commands null",
		on_another_creature_summoned: "def(class creature creature, class game_state game, class creature new_creature) ->commands null",
		on_land_summoned: "def(class creature creature, class game_state game, class creature new_land, null|class creature old_land) ->commands null",
		on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands null",

		on_die: "def(class creature creature, class game_state game) ->commands null",

		on_card_discarded: "def(class creature creature, class game_state game, class player player, class card card) ->commands null",

		on_reach_endzone: "def(class creature creature, class game_state game) ->commands null",

		on_begin_turn: "def(class creature creature, class game_state game) ->commands null",
		on_end_turn: "def(class creature creature, class game_state game) ->commands null",
		on_move_over_creature: "def(class creature creature, class game_state game, class creature other_creature) -> commands null",
		on_moved_over_by_creature: "def(class creature creature, class game_state game, class creature other_creature) ->commands null",
		on_move_over_construct: "def(class creature creature, class game_state game, class creature other_creature) ->commands null",

		on_move: "def(class creature creature, class game_state game) ->commands null",
		on_end_game: "def(class creature creature, class game_state game, int nwinner) ->commands null",
	}
}
