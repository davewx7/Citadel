{
	properties: {

		preload_objects: "[string] ::
			if(resolve_impact != null and resolve_impact['type'] is string,
				[string<- resolve_impact['type']], []
			) +
			if(resolve_launch != null and resolve_launch['type'] is string,
				[string<- resolve_launch['type']], []
			) +
			if(resolve_projectile != null and resolve_projectile['type'] is string,
				[string<- resolve_projectile['type']], []
			) +

			preloads
		",

		preloads: { type: "[string]", default: [] },

		user_info: { type: "map", default: {} },

		//used only for activated abilities.
		unique_id: { variable: true, type: 'int|null' },

		is_usable: "def(class game_state game, class creature creature) ->bool true",

		dirty_count: { type: "int", default: 0 },
		set_dirty: "def() ->commands
			add(dirty_count, 1)
		",

		_internal_id: { type: 'string|null' },
		internal_id: "string :: if(_internal_id != null, _internal_id, name)",
		name: { variable: true, type: 'string' },
		cost: { variable: true, default: 0, type: 'int' },
		loyalty_cost: { variable: true, default: 0, type: 'int' },
		additional_cost: "def(class game_state game, class player player) ->int 0",
		school: { variable: true, default: 0, type: '[int]', set_type: '[int]|int', set: "if(value is int, set(me._data, [value]), set(me._data, value))" },
		first_school: "int :: if(school is int, school, school[0])",
		school_list: "[int] :: if(school is int, [school], school)",
		type: { variable: true, default: 'creature', type: 'string' },

		shadow: { variable: true, default: false },

		stretch_image_edges: { variable: true, default: true },

		is_regular_creature: "bool :: creature_object != null and creature_object.is_regular_creature",
		is_building: "bool :: creature_object != null and creature_object.is_building",
		is_land: "bool :: creature_object != null and creature_object.is_land",

		tags: { type: "[string]", get: "_data + if(creature_object != null, creature_object.tags, [])" },

		plays_on_stack: "true",

		is_player_ability: { variable: true, default: false, type: 'bool' },

		is_channeled: { variable: true, default: false, type: 'bool' },
		default_channeled_mana: { variable: true, default: 0, type: "int" },

		flavor_text: { type: "string|null" },
		flavor_voice: { type: "string|null" },

		settings: { type: "map", default: {} },

		portrait: { type: "string|null", variable: true },
		second_portrait: { type: "string|null", variable: true },
		portrait_focus: { type: "[int,int]|null" },
		portrait_focus_width: { type: "int|null" },
		portrait_focus_height: { type: "int|null" },

		animation_sequence: { type: "[CardAnim]", default: [] },

		//a unique id a card gets when drawn.
		draw_id: { variable: true, default: -1, type: 'int' },

		ai_patterns: "def(class game_state game, [Loc] targets) ->[string|null] []",
		ai_flags: { variable: true, type: '[int]', default: [] },

		//if true then any AI evaluation of this card's candidate moves
		//will involve playing the game state forward until end of turn
		//rather than just cast-and-eval. Is more expensive but is useful
		//for things like spells which might have subtle effects on
		//the game state and influence combat.
		ai_eval_end_of_turn: "bool :: true", //type = 'spell'",

		ai_score: "def(class game_state game, [Loc] targets) ->int 0",

		creature_object: { variable: true, default: null, type: 'class creature|null' },
		creature: { variable: true, default: null, type: 'map|null' },

		//this is null if there is no creature or the creature is the same as for other
		//cards of this type. It's a uuid if the creature is modified in some way.
		unique_creature: { type: "null|string" },

		modify_creature: "def(string attr, any value) ->commands
			if(creature_object and creature,
				if(unique_creature = null,
					set(creature, deep_copy(creature))
				);
				[
					set(creature_object[attr], value),
					set(creature[attr], value),
					set(unique_creature, generate_uuid()),
				]
			)
		",

		card_font: "string :: lib.font.regular_font",

		rules: { variable: true, default: '' },


		rules_text_font_size: 16,

		rules_text: "string :: ''",

		//any cards that are listed in this cards rules for any reason.
		subcard_tips: { type: "[string]", default: [] },

		rules_tips: "[{ title: string, text: string }] ::
		if(creature_object and creature_object.armor > 0, [{
			title: 'Armor',
			text: sprintf('When damage is dealt to this creature it is reduced by <b>%d</b> %s. (Combat or any spell which says &ldquo;damage&rdquo;)', creature_object.armor, if(creature_object.armor = 1, 'point', 'points')),
		}], []) +
		if(creature_object and creature_object.resistance > 0, [{
			title: 'Resistance',
			text: sprintf('When an enemy targets this creature with a spell, they must pay <b>%d</b> additional mana.', creature_object.resistance),
		}], []) +
		if(creature_object and creature_object.conduit > 0, [{
			title: 'Conduit',
			text: sprintf('When a player targets this creature with a spell, they must pay <b>%d</b> less mana than normal.', creature_object.conduit),
		}], []) +
			  map(if(creature_object, if(creature_object.is_building, ['Building'], []) + creature_object.abilities, []) + if(is_channeled, ['Channeled'], []) + help_strings, {
				title: value,
				text: string<- (help[value] asserting value in help | value)
				  where help = lib.json.get_document_map('data/help-abilities.cfg'),
			  }) + tips
		",

		tips: {
			type: "[{ title: string, text: string }]",
			default: [],
		},

		type_text: "string ::
		  if(creature_object != null,
			if(hero, 'Heroic ', '') + if(creature_object.is_land, 'Land', creature_object.is_building, 'Building', 'Creature'),

			if(_class = 'card', 'Spell', 'Ability')
		  )
			+ if(tags_str, '--' + tags_str, '')
			 where tags_str = fold(tags, a + ' ' + b, ''),
			 where tags = tags + if(is_instant, ['Instant'], []) + if(is_response, ['Response'], [])
		",


		help_strings: { type: "[string]", default: [] },

		hero: { variable: true, default: false },

		is_response: { type: "bool", default: false },
		is_instant: { variable: true, default: false },

		resolve_effect: { type: "string", default: "" },
		resolve_delay: { type: "int", default: 0 },
		resolve_animation_delay: { type: "int", default: 0 },
		resolve_impact: { type: "{string -> any}|null" },
		resolve_impact_delay: { type: "int", default: 30 },
		resolve_launch: { type: "{string -> any}|null" },
		resolve_num_particles: { type: "int", default: 0 },
		resolve_particle: { type: "string", default: "" },
		resolve_projectile: { type: "{string -> any}|null" },
		arrow_texture: { type: "null|string" },

		//Sounds
		sound_resolve: { type: "string", default: "gameplay/card_resolve_generic" },
		sound_fizzle: { type: "string", default: "gameplay/card-fizzle" },
		sound_windup: { type: "string|null" },

		windup_sound: "string :: ''",
		
		text_color: { type: "[decimal,decimal,decimal]", default: [1,1,1] },

		background_color_top: "{ red: decimal, green: decimal, blue: decimal }::
		  { red: 0.25, green: 0.32, blue: 0.44 }",

		background_color_bot: "{ red: decimal, green: decimal, blue: decimal }::
		  { red: 0.05, green: 0.05, blue: 0.1 }",

		is_on_cooldown: "bool :: once_per_turn and used_this_turn",

		used_this_turn: { type: "bool", default: false },

		once_per_turn: { type: "bool", default: false },
		once_ever: { type: "bool", default: false },

		uses_attack: { type: "bool", default: false },
		uses_movement: { type: "bool", default: false },

		on_cast: "def(class game_state game, class message.play_card info) ->commands null",

		on_pay_cost: "def(class game_state game, class message.play_card info) ->commands null",

		on_play: "def(class game_state game, class message.play_card info) ->commands null",

		calculate_invalid_target_reason: "def(class game_state game, class creature avatar, [Loc] targets, class creature target) -> null|string
			if(possible = null or (target.loc in possible), null,
				if(reason, reason, _standard_invalid_target_reasons(game, avatar, targets, target)
				)
				where reason = _invalid_target_reason(game, avatar, targets, target)
			)
			where possible = possible_targets(game, avatar, targets)
		",
		
		_invalid_target_reason: "def(class game_state game, class creature avatar, [Loc] targets, class creature target) -> null|string
			null
		",

		_standard_invalid_target_reasons: "def(class game_state game, class creature avatar, [Loc] targets, class creature target) -> null|string

		instrument('invalid_target_reasons',
		if(cover_reason, cover_reason,

		if(building_reason, building_reason,

		if(indestructible_reason, indestructible_reason)
				
		where indestructible_reason =
			if(target.indestructible,
			eval_with_temp_modifications(me,
				if(target.loc in possible_targets(game, avatar, targets),
					'This creature is indestructible and cannot be targeted by this card.'
				),
				set(target.abilities, filter(target.abilities, value != 'Indestructible')),
				set(target.abilities, target.abilities)
			)
			)
		)

		where building_reason =
		   if(target.is_building,
			eval_with_temp_modifications(me,
				if(target.loc in possible_targets(game, avatar, targets),
					'This spell must target creatures, not buildings.'
				),
				set(target.is_building, false),
				set(target.is_building, true)
			)
		   )

		)

		where cover_reason =

			if(target.controller != avatar.controller and target.has_cover(game),
			eval_with_temp_modifications(me,
				if(target.loc in possible_targets(game, avatar, targets),
					'This creature has <i>Cover</i> which protects it from enemy spells'
				),
				set(target.abilities, filter(target.abilities, value != 'Cover')),
				set(target.abilities, target.abilities)
			)
			)
		)
		",

		min_targets: "null|int :: null",

		custom_reason_cannot_cast: "def(class game_state game, class creature avatar) ->null|string
			null
		",
		
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null null",

		targets_valid: "def(class game_state game, class creature avatar, [Loc] targets, [Loc] existing=[]) ->bool true",

		record_animation: "def(class game_state game, int nplayer, class message.play_card info, int stack_id) -> commands null",

		no_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null null",

		my_buildings_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.controller = avatar.controller, creature.is_valid_target(game, avatar.controller, me)])",
          
        all_creatures_and_buildings_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me)])",

		all_buildings_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.is_valid_target(game, avatar.controller, me)])",

		enemy_buildings_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.controller != avatar.controller, creature.is_valid_target(game, avatar.controller, me)])",
		  
		my_creatures_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller = avatar.controller, creature.is_valid_target(game, avatar.controller, me)])",

  		enemy_creatures_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller != avatar.controller, creature.is_valid_target(game, avatar.controller, me)])",

		all_creatures_and_players_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, avatar.controller, me)] +
		                [[-1, player.player_index] | player <- game.players])",

		all_creatures_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, avatar.controller, me)])",

		equipment_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.turn_summoned = game.nturn, not creature.is_building, creature.is_valid_target(game, avatar.controller, me)])",

		equipment_invalid_reason: "def(class game_state game, class creature avatar, [Loc] targets, class creature target) ->null|string
			if(target.turn_summoned != game.nturn, 'This spell may only be cast on creatures that were summoned this turn')
		",

		all_tiles_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], game.all_locs)",

        all_players_as_possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [[-1, player.player_index] | player <- game.players])",
		hue_shift: { type: "decimal", default: 0.0 },
		hue_shift_xdelta: { type: "decimal", default: 0.0 },

		is_play_likely_misclick: "def(class game_state game, class creature avatar, [Loc] targets) ->bool
			if(possible_targets(game, avatar, targets) = null,
				if((AI_CARD_NEVER_TARGET_ONLY_FRIENDS in ai_flags) and find(targets, c = null or c.controller != avatar.controller where c = game.creature_at_loc(value)) = null,
					true,
					false
				),
				false
			)
		",

		//whether to try to auto-target multiple targets with this card.
		auto_target: { type: "bool", default: false },

		//   Targeted particles are associated to a target hex.
		target_particles: { type: "[PlayCardParticles]", default: [] },

		//   Wide particles are meant to apply to the whole
		// _countryside_.
		wide_particles: { type: "[PlayCardParticles]", default: [] },
	}
}
