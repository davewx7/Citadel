{
	bases: ["bot"],

	properties: {
		score_land: "def(class game game, map play_info, class card card, Loc loc) ->int
			get_ai_score_land(card.name).score(game, play_info, card, loc)
		",

		score_summons: "def(class game game, map play_info, class card card, Loc loc) ->int
			get_ai_score_summons(card.name).score(game, play_info, card, loc)
		",

		score_spell: "def(class game game, map play_info, class card card, [Loc] targets) ->int
			get_ai_score_invocation(card.name).score(game, play_info, card, targets)
		",

		choose_to_wait: "def(class game game, class card card) ->bool
			false
		",

		get_ai_score_invocation: "def(string key) -> class ai_score_invocation
			query_cache(global_cache(1024), [key],
				construct('ai_score_invocation', info)
				where info = map<- lib.json.get_document_map('data/bot-scores.cfg')[key] or {}
			)
		",

		get_ai_score_summons: "def(string key) -> class ai_score_summons
			query_cache(global_cache(1024), [key],
				construct('ai_score_summons', info)
				where info = map<- lib.json.get_document_map('data/bot-scores.cfg')[key] or {}
			)
		",

		get_ai_score_land: "def(string key) -> class ai_score_land
			query_cache(global_cache(1024), [key],
				construct('ai_score_land', info)
				where info = map<- lib.json.get_document_map('data/bot-scores.cfg')[key] or {}
			)
		",

		deck: "[string] :: [q(King's Rider), 'Mercenary', 'Thunderer', 'Dwarvish Armourer', 'Market', 'Anthem of Battle']*3 + ['Oldric, Lord of the Hold']*2",
	},
}
