{
	is_library: true,

	app: "def(decimal a) ->decimal
		1.0 + a + 1.0
	",

	f: "def(int n) ->string
	    lib.citadel.get_rarity_name(n)
	",

	g: "def(int n) ->int
		plus(n)
	",

	g2: "def(int n) ->int
		lib.benchmarks.plus(n)
	",

	mark: "def(int n) ->[int]
	map(range(1000), value*1d(x.a) + x.b where x = a)
		where a = { a: (1d(n)), b: (1d(n)) }
	",

	stuff: { type: "int", default: 7 },

	testlambda: "def() ->function(int)->int
		def(int n) ->int n + stuff
	",

	getconst: "def
		() -> {string -> int}
		{
			'max_decks': lib.citadel.max_decks,
			'max_active_decks': lib.citadel.max_active_decks
		}
	",

	four: "int :: 4",

	add4: "def(int a) ->int a + 4",

	plus: "def(int a) ->int a + four",
	plus2: "def(int a) ->int x + y where x = a where y = 4",

	plus_via: "def(int n) ->int
		plus(n)
	",

}
