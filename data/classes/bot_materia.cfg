{
	bases: ["bot"],

	properties: {

	score_land: "def(class game game, map play_info, class card card, Loc loc) ->int
	  if(enemy_creature != null, -50, 100) +
	  if(friendly_creatures_in_lane, 40, 0)

		where friendly_creatures_in_lane = filter(game.creatures, value.controller = game.current_player_index and value.loc[0] = loc[0])
		where enemy_creature = find(game.creatures, value.controller != game.current_player_index and value.loc[0] = loc[0]),
	",

	score_summons: "def(class game game, map play_info, class card card, Loc loc) ->int
		if(lane_empty(game, loc[0]), if(lane_has_enemy_glyphs(game, loc[0]) or lane_has_neutral_glyphs(game, loc[0]), 150, 100), 0) +


		if(enemy_creature = null, 0, outcome*200

		where outcome = lib.bot_utils.fight_outcome(game, creature, enemy_creature)
		)
		+

		if(card.name = 'Oldric, Lord of the Hold', 50, 0) +

		game.trophies[(game.current_player_index+1)%2][loc[0]] +

		if(friendly_creatures_in_lane, -50, 0) +

		100

		where friendly_creatures_in_lane = filter(game.creatures, value.controller = game.current_player_index and value.loc[0] = loc[0])
		where enemy_creature = find(game.creatures, value.controller != game.current_player_index and value.loc[0] = loc[0]),
		where creature = class creature<- card.creature_object
	",

	score_spell: "def(class game game, map play_info, class card card, [Loc] targets) ->int
	if(card.name = 'Anthem of Battle',
	   count(game.creatures, value.controller = game.current_player_index)*100,
	   0)
	",

	choose_to_wait: "def(class game game, class card card) ->bool
		card.name not in ['Anthem of Battle']
	",

	deck: "[string] :: [q(King's Rider), 'Mercenary', 'Thunderer', 'Dwarvish Armourer', 'Market', 'Anthem of Battle']*3 + ['Oldric, Lord of the Hold']*2",
	}
}
