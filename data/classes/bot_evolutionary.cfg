{
	bases: ["bot"],

	constructor: "set(me.rules, file_backed_map(args.rules, def() 1d2000 - 1000,
	   {deck: default_deck})) asserting args.rules",

	properties: {

	score_summons: "def(class game game, map play_info, class card card, Loc loc) ->int
	  rule('summon ' + card.name) +
	  rule('summon ' + if(is_lane_empty, 'lane empty', 'lane not empty')) +

	  rule('summon ' + if('Haste' in creature.abilities, 'haste', 'non-haste') + ' creature in ' + if(is_phase_my_after_combat(game), 'after combat', 'before combat')) +

	  fold(map(friendly_constructs_in_lane(game, lane), rule('summon ' + card.name + ' in lane with friendly construct ' + value.name)), a+b) +
	  fold(map(enemy_constructs_in_lane(game, lane), rule('summon ' + card.name + ' in lane with enemy construct ' + value.name)), a+b) +
	  fold(map(enemy_creatures_in_lane(game, lane),
	        rule('summon ' + card.name + ' vs ' + value.name) +
			if(find(friendly_creatures_in_lane(game, lane), value.loc[1] > context.value.loc[1] = null) = null,
			rule('summon ' + card.name + ' vs unblocked ' + value.name) +
			rule('summon ' + card.name + ' vs unblocked on tile ' + value.tiles_from_start), 0)
		   ), a+b) +
	  fold(map(friendly_creatures_in_lane(game, lane), rule('summon ' + card.name + ' allied with ' + value.name)), a+b) +
	  if(lane_has_neutral_towers(game, lane), rule('summon ' + card.name + ' against neutral') + rule('summon against neutral'), 0) +
	  if(lane_has_neutral_glyphs(game, lane), rule('summon ' + card.name + ' capture glyphs') + rule('summon capture glyphs'), 0) +
	  if(lane_has_enemy_glyphs(game, lane), rule('summon ' + card.name + ' capture enemy glyphs') + rule('summon capture enemy glyphs'), 0)

	  
	where is_lane_empty = lane_empty(game, lane)
	where lane = loc[0]
	where creature = class creature<- card.creature_object",

	spell_targets_loc: "overload(
	  def(class message.play_card msg, Loc loc) ->bool
	    count(msg.targets, loc) > 0,
	  def(class message msg, Loc loc) ->bool false
	)",

	spell_name: "overload(
	  def(class message.play_card msg) ->string|null
	    if(card, card.name) where card = msg.card,
	  def(class message msg) ->string|null null
	)",

	score_spell: "def(class game game, map play_info, class card card, [Loc] targets) ->int
		rule('cast ' + card.name) +
		if(size(targets) = 0, 0, fold([
			if(target_creature = null, 0,
			   if(target_creature.controller = game.current_player_index,
				  rule('cast ' + card.name + ' on friend') +
				  rule('cast ' + card.name + ' on friend ' + target_creature.name) +
				  if(game.stack and spell_targets_loc(game.stack[size(game.stack)-1], target_creature.loc),
				  rule('cast ' + card.name + ' on friend targeted by enemy spell') +
				  rule('cast ' + card.name + ' on friend targeted by ' + spell_name(game.stack[size(game.stack)-1])), 0) ,

				  rule('cast ' + card.name + ' on enemy') +
				  rule('cast ' + card.name + ' on enemy ' + target_creature.name) +
				  if(game.stack and spell_targets_loc(game.stack[size(game.stack)-1], target_creature.loc),
				  rule('cast ' + card.name + ' on enemy targeted by enemy spell') +
				  rule('cast ' + card.name + ' on enemy targeted by ' + spell_name(game.stack[size(game.stack)-1])), 0) +
				  if((AI_CARD_SAVES in card.ai_flags) and play_info.deaths and (target_creature.summon_id in play_info.deaths),
					 if(target_creature.summon_id not in game_state_if_card_is_played.graveyard, rule('spell saves creature') + rule('spell saves ' + target_creature.name), 0) +
					fold(
					 [ rule('combat trick kills enemy') + rule('combat trick kills ' + enemy.name) |
					     enemy <- end_game_state.creatures,
					     enemy.controller = game.next_player_index,
					     enemy.summon_id in game_state_if_card_is_played.graveyard ], a+b) +
					if(game_state_if_card_is_played.opponent_obj.life < end_game_state.opponent_obj.life,
					   rule('combat trick endzones creature'), 0)
				     where game_state_if_card_is_played = forward_game_to_end(simulate_play_card(game, card, targets)), 0)
					 where end_game_state = class game<- play_info.end_game_state
				  )
			   
			)
		], a+b) where target_creature = game.creature_at_loc(targets[0])
		)


		+ fold([rule(card.name + ' ' + pattern) | pattern <- card.ai_patterns(game, targets), pattern], a+b)
	",

	simulate_play_card: "def(class game game, class card card, [Loc] targets) ->class game
		get_modified_object(game, def(class game g) ->commands
		  g.resolve_card(
		    construct('message.play_card', {
				index: 0,
				player_index: g.current_player_index,
				card: card,
				targets: targets,
			})))
	",

	forward_game_to_end: "def(class game game) ->class game
	  if(is_phase_my_after_combat(game), game,
	     forward_game_to_end(get_modified_object(game,
		                         def(class game g) g.end_turn())))
	",

	best_future_score: "def(class game game) ->int
	  if(is_phase_my_after_combat(game), next_score,
		 max(next_score, best_future_score(next_game)))
		where next_score = if(next_game.current_player_index = next_game.nplayer,
		          if(best_play, int<- best_play.score, 0)
						  where best_play = get_best_play(next_game), 0)
		where next_game = get_modified_object(game, def(class game g) g.end_turn())
	",

	future_game_states: "def(class game game) ->[class game]
		if(game.current_player_index = game.nplayer, [game], []) +
		if(is_phase_my_after_combat(game), [],
		   future_game_states(get_modified_object(game, def(class game g) g.end_turn())))
	",

	calculate_play_info: "def([class game] states) -> map
		if(size(states) <= 1, {},
		 {
			end_game_state: last,
			combat_this_turn: fold(map(last.creatures, if(hit_by, [value.summon_id] + hit_by, []) where hit_by = value.hit_by_this_turn(last)), a+b),
			deaths: [creature.summon_id |
			         creature <- first.creatures,
					 creature.summon_id in last.graveyard],
		 }
		   where first = states[0]
		   where last = states[size(states)-1]
		)
	",

	calculate_future_plays: "def([class game] states, [class card] hand) ->{class card -> class bot.CardPlay}|null
		fold(filter(map(states, calculate_plays(value, calculate_play_info(states[index:]), hand)), value != null),
		     {class card -> class bot.CardPlay}<-
			   zip(a, b, if(a.score > b.score, a, b)))
	",

	get_best_play: "def(class game game) -> class bot.CardPlay|null
	 if(plays,
	 if(best_combo and size(best_combo) >= 1,
		if(current_state_play,
		plays[current_state_play] + {discards: filter(map(player.hand, if(value in best_combo, null, index)), value != null)}, null)
		  where current_state_play = find(best_combo, plays[value].game = game),
		  null)
	  where best_combo = choose(combinations, fold(map(value, decimal<- plays[value].score), a+b))
	  where player = game.players[game.nplayer]
	  where combinations = playable_combinations(game, plays)
	 )
	  where plays = calculate_future_plays(future_game_states(game), game.player_obj.hand)",


	should_wait: "def(class game game, class bot.CardPlay best_play) ->bool
	  false",
	
	deck: "[string]<- rules['deck']",

	default_deck: "[string]<-
		  ['Goblin King']*2 +
		  ['Wolf Rider']*3 +
		  ['Goblin Grenadier']*3 +
		  ['Goblin']*3 +
		  ['Goblin Sapper']*2 +
		  ['Wolf']*2 +
		  ['Green Adder']*2 +
		  [q(Nature's Blessing)]*3 +
		  ['Primal Rage']*3
	",

	rule: "def(string name) ->int  int<- rules[name]",

	rules: { variable: true, type: "object" },
	}
}
