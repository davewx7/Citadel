{
	constructor: "[
		set(me.creature_avatar, construct('creature', {
			name: 'Avatar',
			controller: me.player_index,
			summon_id: 1000000+me.player_index,
			life: 1,
			loc: [-1,-1],
			quests: quests,
		}))
	]",

	properties: {
		"@derive": "@include tbs:data/classes/player.cfg",

		quests: { type: "[class quest]", default: [] },

		player_index: { variable: true, default: 0 },
		team_index: "int :: player_index%2",
		deck: { variable: true, default: [], type: '[class card]', set_type: '[class card]|[string]', set: "if(value is [string], set(_data, map(value, lib.citadel.create_card(value))), set(_data, value))" },
		original_deck: { variable: true, default: [], type: "[string]" },
		deck_submitted: { default: false, type: 'bool' },
		game: { type: "class game_state" },
		has_ended_turn: { type: 'bool', default: false },
		player_abilities: { variable: true, default: [], type: '[string]' },
		discard_pile: { variable: true, default: [], type: '[class card]',
		                set: "[set(me._data, value)]" },

		undoable_discards: { type: "int", default: 0 },

		creature_avatar: { variable: true, default: null, type: 'class creature' },
		avatar: { type: "string", default: "nyx.png" },

		next_draw_id: { variable: true, default: 1 },

		can_see_enemy_hand: { variable: true, default: 0 },

		_ability_cost_increase: { default: 0, type: "int" },

		//hand can be set as actual card objects, or as strings, which
		//will result in card objects being built.
		hand: { variable: true, default: [], type: '[class card]',
		        set_type: '[class card|string]', set: "[
		  [add(_ability_cost_increase, 1) | c <- value, c is string, c in player_abilities, c != 'Study'],
		  add(me.next_draw_id, size(value)),
		  set(me._data, sort(map(value, if(value is string,
		   construct('card', (map<- (doc[card_name] asserting doc[card_name] | card_name)) + {draw_id: next_draw_id + index} + if(card_name in player_abilities and card_name != 'Study', {cost: (int<- (map<- doc[card_name])['cost']) + _ability_cost_increase}, {}) where doc = lib.json.get_document_map('data/cards.cfg')) where card_name = lib.citadel.actual_card_name(value),
		   value)), (a.is_player_ability and not b.is_player_ability) or a.is_player_ability and b.is_player_ability and a.name < b.name))
		] asserting value != null"
		},

		life: { variable: true, default: 40 },
		creatures_in_citadel: { type: "[class creature]", default: [] },

		hand_size: { variable: true, default: 3 },
		card_draw: { variable: true, default: 4 },

		gain_mana_hint: "def(class game_state game, Loc src) ->commands [
			add(game.animation_hints, [construct('animation.gain_mana_hint', {type: 'gain_mana', player: player_index, move_from: src})]),
		]",

		gain_mana_with_hint: "def(class game_state game, Loc src) ->commands [
			gain_mana_hint(game, src),
			add(me.resources, 1),
		]",

		gain_mana_from_card: "def(class game_state game, class card_base src) ->commands [
			add(game.animation_hints, [construct('animation.gain_mana_hint', {type: 'gain_mana', player: player_index, card_from: src.draw_id})]),
			add(me.resources, 1),
		]",

		// TODO: Can we use the FFL overload feature here?
		gain_mana_from_card_overload: "def(class game_state game, class card_base src, int amount) ->commands [
			add(game.animation_hints, [construct('animation.gain_mana_hint', {type: 'gain_mana', player: player_index, card_from: src.draw_id})]),
			add(me.resources, amount),
		]",

		mulligan: { type: "bool", default: false },

		base_income: { type: "int", default: 3 },

		calculate_income: "def(class game_state game) -> int base_income + sum(map(game.permanents, if(value.controller = player_index, value.income(game), value.opponent_income(game))))",
		calculate_card_draw: "def(class game_state game) -> int card_draw + sum(map(filter(game.permanents, value.controller = player_index), value.card_draw(game)))",

		begin_turn: "def(class game_state game) ->commands [
			if(game.nturn <= 1, map(hand, set(value.original_hand_card, true))),
			set(has_ended_turn, false),

			//add(me.life, -size(creatures_in_citadel)),
			bind_command(remove_static_effects, DURATION_BEGINNING_NEXT_TURN),

			if(game.nturn != 0 or player_index != 0, bind_command(draw_cards, game, calculate_card_draw(game) - size(hand))),
			bind_command(restore_ability_cards, game),
			bind_command(remove_static_effects, DURATION_END_OF_TURN),
			set(me.resources, 0),

			//gain income.
			add(me.resources, calculate_income(game)),

			map(filter(game.permanents, value.controller = player_index and value.income > 0), gain_mana_hint(game, value.loc)),

			set(resource_level, resource_level_active),
		]",
		end_turn: "def(class game_state game) ->commands [
			add(base_income, if(base_income <= 1, 3, 1)),
		]",

		no_cards_to_draw: "size(deck) = 0",

		restore_ability_cards: "def(class game_state game) ->commands
		[
		if(find(hand, value.name = ability) = null,
		[
			set(hand, [ability] + hand)
		]) | ability <- player_abilities]",

		draw_cards: "def(class game_state game, int ncards) ->commands
			; me._do_draw_cards(game, ncards)
		",

		_tutorial_modify_card_draw: "def(class game_state g, [class card] cards) ->[class card]
		if(modified_names = names, cards, map(modified_names, lib.citadel.create_card(value)))
		where modified_names = g.tutorial.modify_card_draw(g, me, map(cards, value.name))
		where names = map(cards, value.name)
		",

		//actual card drawing is always done serially to avoid
		//drawing the same card multiple times.
		_do_draw_cards: "def(class game_state game, int ncards) ->commands
		if(ncards > 0,
		[
		  if(ncards > size(me.deck),
		  let shadow_cards = ncards - size(me.deck);
		  [
			  add(me.hand, _tutorial_modify_card_draw(game, deck)),
			  set(me.deck, []),

			  if(original_deck,
				set(me.deck, shuffle(original_deck));
				map(me.deck, set(value.shadow, true));
				_do_draw_cards(game, shadow_cards)
			  )
		  ],

		  [
			add(me.hand, _tutorial_modify_card_draw(game, deck[:ncards])),
			set(me.deck, deck[ncards:])
		  ]),
		
		], if(game.tutorial,
		    add(me.hand, _tutorial_modify_card_draw(game, []))
		   )
		)",

		undo_discard: "def() ->commands
		if(me.discard_pile, [
			set(me.discard_pile, discard_pile[:size(discard_pile)-1]),
			add(me.hand, [discard_pile[size(discard_pile)-1]]),
			add(me.undoable_discards, -1),
		])
		",
		
		discard_cards: "def(class game_state game, [int] card_indexes) ->commands
		[
		  map(card_indexes, add(me.discard_pile, [hand[value]])),
		  set(me.hand, filter(me.hand, not (index in card_indexes))),

		  map(card_indexes, gain_mana_from_card(game, hand[value])),
		]",

		discard_visible_no_event: "def(class game_state game, class card card) ->commands
		[
			add(me.discard_pile, [card]),
		]",

		discard_visible: "def(class game_state game, class card card) ->commands
		[
			game.add_animation_hint(construct('animation.discard_card_hint', {
				player: player_index,
				card: card,
			})),
			discard_visible_no_event(game, card),
			game.fire_creature_event('on_card_discarded', [me, card]),
		]",

		force_discard: "def(class game_state game, [class card_base] cards) ->commands
		[
			map(cards, if(value is class card, discard_visible(game, value)));
			set(me.hand, filter(me.hand, value not in cards)),
		]
		",

		add_static_cost_filter: "def(class cost_filter new_filter) ->commands [
			add(me.static_cost_filters, [new_filter])
		]",

		remove_static_effects: "def(int duration=DURATION_STATIC) ->commands [
			[if(effect.revert_fn, effect.revert_fn(me, effect.info)) | effect <- me.static_effects, effect.duration = duration],
			set(me.static_effects, filter(me.static_effects, value.duration != duration)),

			if(duration = DURATION_STATIC, set(me.static_cost_filters, [])),
		]",

		add_static_effect: "def(class static_effect effect) ->commands [
			if(effect.apply_fn, effect.apply_fn(me, effect.info)),
			add(me.static_effects, [effect]),
		]",

		apply_static_effect: "def(function(class player, map) ->commands apply, function(class player, map) ->commands revert, map info, int duration=DURATION_STATIC) ->commands [
			add_static_effect(construct('static_effect', {apply_fn: apply, revert_fn: revert, info: info, duration: duration}))
		]",

		static_effects: { default: [], type: '[class static_effect]' },

		resource_level_active: { default: '@eval {1:0,2:0,3:0,4:0,5:0}', type: '{int -> int}' },
		resource_level: { default: '@eval {1:0,2:0,3:0,4:0,5:0}', type: '{int -> int}' },
		base_resource_level: { variable: true, default: '@eval {1:0,2:0,3:0,4:0,5:0}', type: '{int -> int}' },
		get_resource_level: "def(int nresource) ->int resource_level[nresource] or 0",
		get_active_resource_level: "def(int nresource) ->int resource_level_active[nresource] or 0",
		calculate_resource_levels: "def(class game_state game) ->commands
			set(resource_level_active, fold(map(range(5), {(resource): count(game.permanents, value.controller = player_index and find(value.school, value = resource) != null) +base_resource_level[resource]} where resource = value+1), a+b, {}));
			set(resource_level, fold(map(resource_level_active, {(key): max(value, resource_level[key] or 0) }), a+b, {}))
		",

		resources: { variable: true, default: 0, type: 'int',
		  set: "set(_data, if(value <= _data, value, min(value, calculate_income(game))))" },

		static_cost_filters: { type: "[class cost_filter]", default: [] },

		_run_cost_filters: "def(class card_base card, int cost, [class cost_filter] filters) ->int
		  if(filters = [], cost, _run_cost_filters(card, filters[0].filter_cost(me, card, cost), filters[1:]))",

		_cost_filter_loyalty_costs: "def(class card_base card, int cost, [class cost_filter] filters) ->int
			if(filters = [], cost, _cost_filter_loyalty_costs(card, filters[0].filter_loyalty_cost(me, card, cost), filters[1:]))
		",

		_cost_filter_base_costs: "def(class card_base card, int cost, [class cost_filter] filters) ->int
			if(filters = [], cost, _cost_filter_base_costs(card, filters[0].filter_base_cost(me, card, cost), filters[1:]))
		",

		calculate_card_loyalty_cost: "def(class card_base card) ->int
			_cost_filter_loyalty_costs(card, card.loyalty_cost, static_cost_filters)
		",

		calculate_card_base_cost: "def(class card_base card) ->int
			_cost_filter_base_costs(card, card.cost + card.additional_cost(game, me), static_cost_filters)
		",

		calculate_cost: "def(class card_base card) ->int
		  _run_cost_filters(card,
		  	actual_cost(card.school,
				calculate_card_base_cost(card),
				calculate_card_loyalty_cost(card)),
				static_cost_filters)",

		calculate_cost_with_targets: "def(class game_state game, class card_base card, [Loc]|null targets) ->int
		calculate_cost(card) +
		  if(land, land.modify_card_cost_targeted_at(card, player_index), 0) +
		  if(creature, creature.modify_card_cost_targeted_at(card, player_index), 0)

		where land = if(targets, game.land_at_loc(targets[0]))
		where creature = if(targets, game.creature_at_loc(targets[0]))
		",

		fully_paid_devotion_cost: "def(class card_base card) ->bool
		actual_cost(card.school, 0, calculate_card_loyalty_cost(card)) = 0
		",

		actual_cost: "def([int] resource_types, int cost, int loyalty_cost) ->int
		    cost + (int<- sum(map(resource_types, max(0, loyalty_cost - get_resource_level(value))) + [0]))
			asserting is_list(resource_types), is_int(cost), is_int(loyalty_cost) | [resource_types, cost, loyalty_cost]",

		can_afford: "def(class card_base card) ->bool
		    resources >= calculate_cost(card)",

		can_afford_with_target: "def(class game_state game, class card_base card, Loc|null target) ->bool
		    resources >= calculate_cost_with_targets(game, card, if(target != null, [target]))",

		spend: "def(class game_state game, class card_base card, [Loc] targets, int additional_cost=0) ->commands
		  add(me.resources, -(calculate_cost_with_targets(game, card, targets) + additional_cost))",

		summoning_loc_in_row: "def(class game_state game, int row) -> Loc
			 [row, column]
		  where column = if(team_index = 0, lane.begin, lane.begin + lane.length - 1)
		  where lane = game.lanes[row]
		  ",

		free_construct_loc_in_row: "def(class game game, int row, int nmove=0) ->Loc			// the closest tile in the row that has no land
		  if(creature = null or
		     (not creature.summoned),
			 [row, column],
			 free_construct_loc_in_row(game, row, nmove+1))
		  where creature = game.construct_at_loc([row,column])
		  where column = if(team_index = 0, lane.begin + nmove, lane.begin + lane.length - 1 - nmove)
		  where lane = game.lanes[row]
		  ",		  

		construct_loc_in_row: "def(class game_state game, int row, int nmove=0) ->Loc
		  if(creature = null or creature.controller != team_index or
		     (not creature.summoned),
			 [row, column],
			 construct_loc_in_row(game, row, nmove+1))
		  where creature = game.land_at_loc([row,column])
		  where column = if(team_index = 0, lane.begin + nmove, lane.begin + lane.length - 1 - nmove)
		  where lane = game.lanes[row]
		  ",

		summoning_locs: "def(class game_state game, class creature target) ->[Loc]
		 if(target.hero and count(game.creatures, value.hero and value.controller = player_index and value.name = target.name) > 0, [], //hero duplicate check, not summonable.

		if(target.is_land,
		   if(not q(Staging Ground) in target.abilities,
           filter(game.all_locs, (existing = null or existing.controller = player_index) where existing = game.land_at_loc(value)),

		   //staging grounds summoning locs
           unique(sort(map(range(game.rows), game.players[game.current_player].construct_loc_in_row(game, value)) +
                       map(range(game.rows), game.players[game.current_player].summoning_loc_in_row(game, value))))
		   ),
		 
		 filter(

		  fold([creature.allows_summoning(game, target) |
		        creature <- game.permanents, creature.controller = player_index],
				a+b) +
		  filter(map(range(game.rows), if(target.is_land, construct_loc_in_row(game, value), summoning_loc_in_row(game, value))),
		    if(target.is_land, game.land_at_loc(value),
					                game.creature_at_loc(value)) = null
			and game.is_loc_on_board(value)),

			//filter for the game rule that you can never summon onto
			//a tile that an enemy creature is on.
			(creature_at_loc = null or creature_at_loc.controller = player_index)
			where creature_at_loc = game.creature_at_loc(value))
		))",

		has_possible_play: "def(class game_state game) ->bool
		if(game.in_response_phase, has_possible_response(game),
			//do we have a card in hand we can play?
			find(hand, calculate_cost(value) <= resources) != null or

			//do we have a creature with an activated ability we can use?
			find(game.creatures,
			     value.controller = player_index and
				 find(value.activated_abilities, calculate_cost(value) <= resources) != null) != null
		)
		",

		has_possible_response: "def(class game_state game) ->bool
		  if(game.in_unrespondable_phase, false,

		  //do we have a response card we can play?
		  find(hand, value.is_response and can_afford(value) and value.possible_targets(game, game.players[game.nplayer].creature_avatar, []) != []) != null or

		  //do we have a response ability we can use?
		  find(game.creatures,
		       value.controller = player_index and
		       find(value.activated_abilities,
			        value.is_response and can_afford(value)) != null) != null
		)
		",
	}
}
