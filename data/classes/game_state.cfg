{
	bases: ['game_state_base'],
	constructor: "[
		if(doc, add(me.creatures,
			map(doc, construct('creature', (map<- value) + {summon_id: 10+index})))
		) where doc = get_document('data/starting-creatures.cfg', ['null_on_failure']),

		add(me.lands, filter(starting_creatures, value.is_land)),
		add(me.creatures, filter(starting_creatures, not value.is_land)),

		set(starting_units, null);

		_calculate_resource_levels()

	  ]
	   where starting_creatures =
	     if(starting_units is [class creature], starting_units,
		map(units,
			lib.citadel.create_creature(
				if (value is null,
					'Village',
					string <- value.card_name asserting value is map),
				{ summon_id: 10 + index, controller: -1 } +
				value))
		)
	where units = if (starting_units is [map],
		resolve_random_starting_units(starting_units),
		[
	     { card_name: 'Village', loc: [0, 2] },
	     { card_name: 'Village', loc: [2, 1] },
	     { card_name: 'Village', loc: [2, 3] },
	   ])",

	properties: {
		timer: { type: "int|null", default: 60 },

		puzzle: { type: "bool", default: false },
		no_shuffle: { type: "bool", default: false },

		starting_units: { type: "null|[map]|[class creature]" },
		tutorial: { type: 'class tutorial', initialize: "construct('tutorial')" },

		nteam: "int :: nplayer%2",
		team: "def(class player p) ->[class player]
			filter(players, (n%2) = (index%2)) where n = index(players, p)
		",

		players_on_team: "def(int nteam) ->[class player]
			filter(players, nteam = (index%2))",

		team_index: "def(int n) ->int
			n%num_teams
		",

		num_teams: "int :: 2",

		current_player: "int <- current_player_index", // deprecated due to poor naming
		current_player_index: "int <- if(mulligan_player != null, mulligan_player.player_index, free_ability != null, free_ability.nplayer, if(current_choice != null, current_choice.player_index, (nturn + size(stack) + (if(is_final_response, 1, 0)))%num_teams)) where mulligan_player = find(players, value.mulligan)",
		current_team_index: "team_index(current_player_index)",
		current_player_turn_index: "int :: nturn%2",
		opponent_obj: "class player <- players[next_player_index]",
		next_player_index: "(current_player_index+1)%num_teams",
		next_player: "(current_player_index+1)%num_teams",

		eclipse: { type: "bool", default: false },

		is_day: "bool :: if(eclipse, not result, result) where result = ((nturn/2)%2 = 0)",
		is_night: "bool :: not is_day",

		in_mulligan: "bool :: nturn = 0 and find(players, value.mulligan) != null",

        num_creatures_killed_this_turn: { variable: true, default: 0, type: 'int' },

		villages: "[class creature] :: [village | village <- lands, village.name = 'Village']",

		player_init: "def(class player player) ->commands if(player.player_index = 0, player.begin_turn(me))",

		current_choice: { variable: true, default: null, type: 'class choice|null' },

		_free_abilities: { type: '[ { nplayer: int, creature: class creature, ability: class card_base, mandatory: bool|null} ]', default: [] },

		free_ability: "{ nplayer: int, creature: class creature, ability: class card_base, mandatory: bool|null }|null ::
		  if(_free_abilities != [], _free_abilities[0])",

		trigger_ability_cast_mandatory: "def(class creature creature, class card_base|map ability) ->commands
		  trigger_ability_cast(creature, ability, true)
		",
		
		trigger_ability_cast: "def(class creature creature, class card_base|map ability, bool mandatory=false) ->commands [
			add(_free_abilities, [{ nplayer: creature.controller, creature: creature, ability: real_ability, mandatory: mandatory }])
		] where real_ability = class card_base :: if(ability is map, construct('activated_ability', ability), ability)",


		creature_summon_id: { type: 'int', default: 100, access: 'private' },
		nturn: { type: 'int', default: 0 },

		turn: "int <- nturn",
//		response_played: { variable: true, default: false },
		is_final_response: { variable: true, default: false },

		stack: { variable: true, default: [], type: "[class message.play_card]" },
		stack_id: { variable: true, default: 1 },

		in_unrespondable_phase: "bool :: stack != [] and not stack[size(stack)-1].respondable",
		in_response_phase: "bool :: stack != [] or is_final_response",

		log_message: "def(string msg) ->commands add(me.log, [msg])",
		log: { default: [], type: '[string]' },

		endzoned_creatures: { type: "[int]", default: [] },
		creatures: { variable: true, default: [], type: "[class creature]" },
		non_building_creatures: "[class creature] :: filter(creatures, not value.is_building)",
		creatures_and_avatars: "[class creature] <- creatures + map(players, value.creature_avatar)",
		permanents: { get: "creatures + lands", type: "[class creature]" },
		permanents_and_avatars: { get: "creatures + lands + map(players, value.creature_avatar)", type: "[class creature]" },

		lands: { variable: true, default: [], type: "[class creature]" },

		//dead creatures, keyed by summon_id.
		graveyard: { variable: true, default: {}, type: "{int -> class creature}" },

		exiled_creatures: { variable: true, default: {}, type: "{int -> class creature}" },

		capture: "def(Loc loc, int owner, null|class creature creature=null) ->commands [
		  if(construct and construct.controller != owner,
			if(('Fragile' in construct.abilities) and construct.controller >= 0,
			 set(construct.destroyed, true),
			 [
			 set(construct.controller, owner),
			 construct.add_animation_hint({
				type: 'captured',
				creature: creature,
			 })
			 ]))
		      where construct = land_at_loc(loc)
		]",

		map_dimensions: { type: "[int,int]", default: [5,5] },

		rows: "int :: map_dimensions.x",
		columns: "int :: map_dimensions.y",

		lanes: { type: "[MapLane]", default: [
			{begin: 1, length: 3},
			{begin: 0, length: 4},
			{begin: 0, length: 5},
			{begin: 0, length: 4},
			{begin: 1, length: 3},
		]
		},

		add_animation_hint: "def(class animation hint) ->commands
			add(animation_hints, [hint])
		",

		animation_hints: { variable: true, type: '[class animation]', default: [] },

		winner: "class player | null <-
			if (
				winner_override != null,
					players[int <- winner_override],
				count(players[:num_teams], value.life > 0) = 1,
					find(players, value.life > 0),
				count(players[:num_teams], value.life > 0) = 0
						and size(players) = 2,
					if (
						players[0].life > players[1].life,
							players[0],
						players[1].life > players[0].life,
							players[1],
						// else
							null
					),
				count(players[:num_teams], value.life > 0) = 0
						and size(players) > 2,
					// TODO
					null,
				// else
					null
			)
		",

		winner_index: "int | null <-
//			dump(['winner_index', w_index], w_index)
//			where w_index =
			if (
				winner_override != null,
					winner_override,
				count(players[:num_teams], value.life > 0) = 1,
					if (
						players[0].life > 0, 0,
						players[1].life > 0, 1,
						null
					),
				count(players[:num_teams], value.life > 0) = 0
						and size(players) = 2,
					if (
						players[0].life > players[1].life,
							0,
						players[1].life > players[0].life,
							1,
						// else
							null
					),
				count(players[:num_teams], value.life > 0) = 0
						and size(players) > 2,
					// TODO
					null,
				// else
					null
			)
		",

		winner_override: { type: "null|int" },

		concede: "def(int nplayer) ->commands [
			set(players[team_index(nplayer)].life, 0)
		]",

		clear_transient_state: "def() ->commands [
		]",

		process_moves: "def([class message] moves) ->commands [
		  clear_transient_state(),
		  if(find(moves, not value is class message.discard_card|class message.undo_discard) != null,
			map(players, set(value.undoable_discards, 0))
		  ),
		  map(moves, ; process_game_move(value))
		]
		",

		process_game_move: "overload(
		  def(class message.debug msg)->commands        process_debug(msg),
		  def(class message.make_choice msg)->commands  make_choice(msg),
		  def(class message.discard_card msg)->commands    discard_card(msg) asserting current_choice = null asserting free_ability = null,
		  def(class message.undo_discard msg)->commands    undo_discard(msg) asserting current_choice = null asserting free_ability = null,
		  def(class message.play_card msg)->commands    play_card(msg) asserting current_choice = null,
		  def(class message.end_turn msg)->commands     handle_end_turn_message(msg.player_index) asserting current_choice = null,
		  def(class message.move_creature msg)->commands     handle_move_creature(msg.creature_uuid),
		  def(class message msg)->commands null
		)",

		handle_move_creature: "def(string creature_uuid) ->commands
		if(creature != null,
			do_moves(creature)
		)
		where creature = find(creatures, value._uuid = creature_uuid)
		",

		has_unresolved_combat: "bool ::
		  find(creatures, size(value.targets_attacking(me))) != null",

		_had_unresolved_combat_when_pressed_end: { type: "bool", default: false },

		execute_commands: "def(string exe)->commands [
			if(exe, if(result, (commands<- result); state_based_actions(), log_message('failed to eval debug expression')) where result = eval(exe))
		]",

		process_debug: "def(class message.debug info)->commands [
			log_message('PROCESS DEBUG MESSAGE'),
			if(info.exe, execute_commands(info.exe))
		]",

		set_current_choice: "def(map info) ->commands
			set(me.current_choice, construct('choice', info + if(info.player_index = null, {player_index: current_player}, {})))
		",

		make_choice: "def(class message.make_choice msg) ->commands
		if(current_choice, [

			let last_choice = current_choice;

			map(map(msg.choices, last_choice.options[value.index]), ; [
				if(value is class choice.card, last_choice.on_card_chosen(me, value.card, value.tag)),
				if(value is class card_base, last_choice.on_card_chosen(me, value, index(last_choice.options, value))),
				if(value is class choice.button, last_choice.on_button_chosen(me, value.tag)),
				if(value is Loc, last_choice.on_loc_chosen(me, value)),
			]);


			if(last_choice.card != null and last_choice.info != null, bind_command(last_choice.card.on_play, me, last_choice.info + {choices: (list<- last_choice.info.choices or []) + map(msg.choices, value.choice)}) asserting last_choice.card is class card);

			if(last_choice.ability != null and last_choice.info != null, bind_command(last_choice.ability.on_play, me, last_choice.creature asserting last_choice.creature is class creature, last_choice.info + {choices: (list<- last_choice.info.choices or []) + map(msg.choices, value.choice)}) asserting last_choice.ability is class card_base);

			if(current_choice = last_choice, set(current_choice, null)),

			state_based_actions()

		])",

		resolve_card: "def(class message.play_card info) ->commands [

			if((not card.creature) and (not info.ability),
			   players[info.player_index].discard_visible_no_event(me, class card<- card)),

			//check the targets are still valid, otherwise the spell fizzles.
			if(creature != null and card.targets_valid(me, creature, info.targets) and info.force_fizzle = false,
				[
					if(info.stack_id, add(me.animation_hints, [construct('animation.resolve_hint', {
						type: 'resolve',
						stack_id: info.stack_id,
					})])),

				   bind_command(card.on_play, me, info),
				],
				
				if(info.stack_id, add(me.animation_hints, [construct('animation.fizzle_hint', {
					type: 'fizzle',
					stack_id: info.stack_id,
				})]))
			),

			bind_command(card.on_pay_cost, me, info),

			state_based_actions(),
		] where creature = if(info.ability, find(permanents, value.summon_id = info.creature),
		                      players[info.player_index].creature_avatar)
		  where card = class card_base<- info.ability_obj or info.card",

		mulligan: "def(int nplayer, [string] cards) ->commands
		if(player.mulligan,
		[
			set(player.mulligan, false);
			set(player.hand, filter(player.hand, value not in discarded));
			player.draw_cards(me, size(discarded));
			set(player.deck, if(no_shuffle, player.deck + discarded, shuffle(player.deck + discarded)))
		]
		where discarded = filter(player.hand, value._uuid in cards)
		)
		where player = players[nplayer]
		",

		discard_card: "def(class message.discard_card info) ([
			//player.level_up(player.hand[info.index].school),
			  [
			  player.discard_visible(me, card),
			  add(player.undoable_discards, 1),
			  if(card.shadow, shadow_card_damage(player, card)),
			  ];
			set(player.hand, filter(player.hand, value != card))
		]
		  where card = player.hand[info.index]
		  where player = players[info.player_index]
		)
		  asserting in_response_phase = false
		  ",

		shadow_card_damage: "def(class player player, class card_base card) ->commands
		[
			add(player.life, -1),
			add(animation_hints, [construct('animation.shadow_damage_hint', {
				type: 'shadow_damage_hint',
				target_player: player.player_index,
				source: card,
			})]),
		]
		",

		undo_discard: "def(class message.undo_discard info) ->commands
		  if(player.undoable_discards > 0,
		  [
		 	player.undo_discard()
		  ]
		  )
		  where player = players[info.player_index]
		",

		play_card: "def(class message.play_card info)->commands ((([
		  log_message(player.name + ' plays ' + card.name),

		  //pay for the card
		  if(info.free_ability = false, [
		  	player.spend(me, card, info.targets, info.channel),
		  	if(creature != null and card.once_per_turn, set(card.used_this_turn, true)),
			if(creature != null and card.uses_attack, creature.use_action()),
			if(creature != null and card.once_ever, set(creature.activated_abilities, filter(creature.activated_abilities, value != card))),
		  ], [
		  	set(_free_abilities, _free_abilities[1:])
		  ]),

		  //remove card from the player's hand if that's where it's
		  //being played from
		  if(info.index != -1,
		  [
		     if(player.hand[info.index].shadow, shadow_card_damage(player, player.hand[info.index])),
		     set(player.hand, filter(player.hand, index != info.index))
		  ]
		  ),

		  card.on_cast(me, play_info),

	      add(me.stack, [play_info + {ability_obj: if(info.ability, class card_base<- card), stack_id: stack_id, respondable: not card.is_instant}]);
			card.record_animation(me, info.player_index, stack[size(stack)-1], stack_id),
		  add(me.stack_id, 1),

		  if(not info.ability,
		    map(permanents_and_avatars, value.fire_event('on_card_played', [me, player, play_info]))
		  ),

//		  set(me.response_played, true),
		  ]
		     where play_info = info + {card: if(card is class card, card), player_index: info.player_index})
		  asserting
		            player.can_afford_with_target(me, card, if(info.targets, info.targets[0])) and
					card.is_usable(me, if(creature, creature, players[info.player_index].creature_avatar)) and
					(not in_response_phase) or card.is_response and
					(class card_base :: card).targets_valid(me, if(creature, creature, players[info.player_index].creature_avatar), info.targets)
				| [if(info.card, info.card.name), info.ability, info.free_ability, if(info.creature != -1, info.get_creature(me).name), info.index, info.targets, map(player.hand, value.name), in_response_phase]
		  )

		  where player = players[info.player_index]

		  where card = class card_base<-
		    if(free_ability, free_ability.ability,
			  if(info.ability, find_or_die(creature.activated_abilities, value._uuid = info.ability_uuid) asserting creature != null,
			   players[info.player_index].hand[info.index]))

		  where creature = null|class creature :: if(info.creature != -1, find(permanents, value.summon_id = info.creature))
		)
		asserting info.free_ability and free_ability or
		          info.free_ability = false and ((not free_ability) or free_ability and free_ability.nplayer != info.player_index) |
				  [info.free_ability, info, free_ability]",

		set_creature_summoning_id: "def(class creature new_creature) ->commands [
			set(new_creature.summon_id, creature_summon_id),
			add(me.creature_summon_id, 1),
		]",

		summon_creature: "def(class creature new_creature) ->commands
		[
		  bind_command(set_creature_summoning_id, new_creature),

		  add(me.creatures, [new_creature]),
		  set(new_creature.turn_summoned, nturn),
		  
		  bind_command(new_creature.handle_summoning, me),
		  bind_command(_calculate_resource_levels),
		  state_based_actions(),
		  bind_command(new_creature.exhaust_on_summon, me),

		  bind_command(fire_creature_event, 'on_another_creature_summoned', [new_creature]),

	    ] asserting (not new_creature.is_land)
		",

		summon_land: "def(class creature new_construct) ->commands
		(
		  if(existing != null, [
			set(existing.destroyed, true),
			add(me.graveyard, {existing.summon_id: existing}),
			add_animation_hint(construct('animation.creature_die_hint', {
				creature: existing,
				obliterated: false,
			})),
		  ]);
		[
		  bind_command(set_creature_summoning_id, new_construct),
		  add(me.lands, [new_construct]),

		  bind_command(_calculate_resource_levels),
		  
		  bind_command(new_construct.handle_summoning, me),
		  state_based_actions(),
		  bind_command(new_construct.exhaust_on_summon, me),

		  bind_command(fire_creature_event, 'on_land_summoned', [new_construct, existing]),

		] asserting new_construct.is_land
		)
		where existing = land_at_loc(new_construct.loc)",

		return_from_graveyard: "def(class creature creature) ->commands
		if(me.graveyard[creature.summon_id], [
			set(me.graveyard, remove_from_map(me.graveyard, creature.summon_id)),
			add(me.creatures, [creature]) asserting (not (creature in me.creatures)),
		    bind_command(_calculate_resource_levels),
		])",

		return_from_graveyard_to_hand: "def(class creature creature) ->commands
		if(target and target.card_name and target.controller >= 0 and target.controller < size(players), [
			set(me.graveyard, remove_from_map(me.graveyard, creature.summon_id)),
			add(me.players[creature.controller].hand, [target.card_name])
			
		]) where target = graveyard[creature.summon_id]",

		deferred_passive_abilities: { type: "[{ability: class passive_ability, creature: class creature}]", default: [] },

		//function which evaluates passive abilities that need to be
		//deferred until after other passive abilities have been evaluated.
		//It potentially goes through multiple iterations, with passive
		//abilities that return null being kept for the next iteration.
		//Only when no passive abilities modify anything does it stop.
		evaluate_deferred_passive_abilities: "def() ->commands
			if(deferred_passive_abilities != [],
			   let [{ability: class passive_ability, creature: class creature}] items = [];
			   let found = false;
			   map(deferred_passive_abilities,
			     if(cmd = null, add(items, [value]), [cmd, set(found, true)])
			     where cmd = value.ability.static_effect(me, value.creature));

			   if(found,
			      set(deferred_passive_abilities, items);
				  evaluate_deferred_passive_abilities(),
			      set(deferred_passive_abilities, []))
			)
		",

		remove_static_effects: "def() ->commands map(me.players, value.remove_static_effects()) + map(me.permanents_and_avatars, value.remove_static_effects(me))",
		apply_static_effects: "def() ->commands [
			set(deferred_passive_abilities, []),
			map(me.permanents_and_avatars, value.apply_static_abilities(me) asserting value.apply_static_abilities != null | [value,index]) ;
			evaluate_deferred_passive_abilities();
			map(me.creatures, if(value.life_shield < 0, set(value.life_shield, 0))),
		]",

		state_based_construct_destruction: "def() ->commands [
			[capture(creature.loc, if('Marauder' in creature.abilities and not is_cove, -1, creature.controller), creature)
			where is_cove = if(construct != null, 'Cove' in construct.abilities, false) where construct = land_at_loc([creature.loc.x, creature.loc.y])
			| creature <- me.creatures, 'Feral' not in creature.abilities];
			
			//remove all the destroyed lands
			if(find(lands, value.alive = false),
				[ if(construct.card_name != null, [
				     me.players[construct.controller].discard_visible_no_event(me, lib.citadel.create_card(construct.card_name)),
			  		 bind_command(construct.fire_events_on_death, me),
			  		 bind_command(construct.fire_event, 'on_die', [me])
				  ]) |
				  construct <- lands,
				  construct.controller >= 0,
				  not construct.alive ];
				set(me.lands, filter(lands, value.alive))
			)
		]",

		state_based_free_abilities: "def() ->commands
		if(free_ability,
			if(possible_targets = [],
			[
				set(_free_abilities, _free_abilities[1:])
			]
			)
			where possible_targets = free_ability.ability.possible_targets(me, free_ability.creature, [])
		)
		",

		state_based_haste_checking: "def() ->commands
			[c.exhaust_on_summon(me) | c <- creatures, c.summoned_this_turn, 'Haste' in c.abilities]
		",

		state_based_actions_internal: "def() ->commands [
			bind_command(_calculate_resource_levels),
			set(me.creatures, new_creatures),
			set(me.lands, new_lands),
			map(me.creatures, if((not value.alive), [
				if(not value.obliterated, add(me.graveyard, {value.summon_id: value})),
				add_animation_hint(construct('animation.creature_die_hint', {
					creature: value,
					obliterated: value.obliterated,
				})),
			], [
				if(value.restored, value.restore(me))
			])),
			[ if(construct.card_name != null,
			     me.players[construct.controller].discard_visible_no_event(me, lib.citadel.create_card(construct.card_name))) |
			  construct <- lands,
			  construct.controller >= 0,
			  not construct.alive ],

			map(me.permanents, if((not value.alive) and (not value.obliterated), [
			  bind_command(value.fire_events_on_death, me),
			  bind_command(value.fire_event, 'on_die', [me])
			])),
			if(new_creatures != me.creatures or new_lands != me.lands,
				[
					bind_command(_calculate_resource_levels),
					bind_command(state_based_actions)
				]
			),
		   ]
				 
			where new_creatures = filter(me.creatures, value.alive)
			where new_lands = filter(me.lands, value.alive)
				 ",

		_calculate_resource_levels: "def() ->commands
			map(players, value.calculate_resource_levels(me))
		",

		state_based_actions: "def() ->commands
		  ;
//		  if(find(creatures, value.alive = false) != null or
//		     find(lands, value.alive = false) != null,
//			 state_based_actions_internal()
//		  );
		  state_based_construct_destruction();
		  remove_static_effects();
		  apply_static_effects();
		  state_based_actions_internal();
		  state_based_free_abilities()
		",

		num_moves_made: { type: "int", default: 0 },
		_moves_made_start: { type: "int", default: 0 },

		do_moves: "def(null|class creature c=null) ->commands
		   state_based_haste_checking();
		   set(_moves_made_start, num_moves_made);
		   do_moves_internal(c);
		   do_endzone();
		   if(num_moves_made != _moves_made_start, state_based_actions())
		",

		has_unspent_moves: "bool :: find(creatures, value.controller = current_player_turn_index and value.can_move_not_blocked(me)) != null",

		do_moves_internal: "def(null|class creature c=null) ->commands if(stack = [], [
		   map(filter(if(c, [c], creatures), value.controller = current_player_turn_index and value.being_summoned = false),
		       ; value.do_move(me)),
		 ])",

		do_wake_sleepers: "def() ->commands [
			map(creatures_being_attacked,
				if(value.is_sleeping, ; value.set_awake()))
			where creatures_being_attacked = flatten([map(filter(creatures, value.controller = current_player_turn_index), value.targets_attacking(me))])
		]",

		do_first_strike_attacks: "def()->commands
		   map(filter(creatures, ('First Strike' in value.abilities) and not (value.controller = current_player_turn_index and value.has_action = false)),
		       value.do_attack(me, null, true)
		      )",
		do_attacks: "def() ->commands
		   map(filter(creatures, (not ('First Strike' in value.abilities)) and not (value.controller = current_player_turn_index  and value.has_action = false)),
		       value.do_attack(me)
		      )",

		//rewards for getting to the end of a lane
		trophies: {
			type: "[[int]]",
			default: [
			  [8, 12, 15, 12, 8],
			  [8, 12, 15, 12, 8],
			],
		},
        
        set_trophy_value: "def(int nplayer, int nlane, int new_value) ->commands
        set(trophies, map(trophies, map(value, if(index = nlane and player_index = nplayer, new_value, value)) where player_index = index))",
        
		apply_trophy: "def(int nplayer, int nlane) ->commands [
			add(players[nplayer].life, -trophies[nplayer][nlane]),
			set(trophies, map(trophies, map(value, if(index = nlane and player_index = nplayer, 0, value)) where player_index = index)),
		]",

		do_endzone: "def() ->commands if(find(creatures, is_loc_in_endzone(value.loc, value.controller)) != null, [
		  map(filter(creatures, is_loc_in_endzone(value.loc, value.controller)), [value.fire_event('on_reach_endzone', [me]), add(endzoned_creatures, [value.summon_id])]),
		  set(me.creatures, filter(creatures, not is_loc_in_endzone(value.loc, value.controller))),
		  [add(me.graveyard, {(creature.summon_id): creature}) | creature <- creatures, is_loc_in_endzone(creature.loc, creature.controller)]

		  ;

		  _calculate_resource_levels();
		  state_based_actions()
		])",

		fire_creature_event: "def(string event_name, list args=[]) ->commands
			map(permanents_and_avatars, value.fire_event(event_name, [me] + args))
		",

		do_begin_turn: "def()->commands map(permanents_and_avatars, value.begin_turn(me))",
		do_end_turn: "def()->commands map(permanents_and_avatars, value.end_turn(me))",

		// any creatures in the graveyard have cards dis-assocated with them,
		// and those cards moved to their owner's discard pile.
		do_cleanup_graveyard: "def() [
			map(me.graveyard, if(value.card_name and value.controller >= 0, [
				if(not value.obliterated, players[value.controller].discard_visible_no_event(me, lib.citadel.create_card(value.card_name))),
			])),

			set(graveyard, {}),
			set(exiled_creatures, {}),
		]
		",

		handle_end_turn_message: "def(null|int player_index=null) ->commands
		if(free_ability,
		[
			set(_free_abilities, _free_abilities[1:]),
		],

			set(players[if(player_index = null, current_player_index, player_index)].has_ended_turn, true);

			check_end_turn()
		)
		",

		check_end_turn: "def() ->commands [
			if(find(players_on_team(current_player_index), value.has_ended_turn = false) = null, end_turn())
		]",

		end_turn: "def() ->commands
		[
		  map(players, set(value.has_ended_turn, false)),

		  log(['is_final_response: ', me.is_final_response, me._had_unresolved_combat_when_pressed_end, has_unresolved_combat]),
//		  log(['response_played: ', me.response_played,]),

		  if(stack != [], [
			set(me.stack, stack[0:size(stack)-1]),
			bind_command(me.resolve_card, back(stack)),
		    ],
		    if(
			//if we haven't moved, yet, move now. If there are no moves to be made also automatically end turn.
			has_unspent_moves, do_moves(),
			not is_final_response,
			[
				set(me.is_final_response, true),
				set(_had_unresolved_combat_when_pressed_end, has_unresolved_combat),
			],
			[if(_had_unresolved_combat_when_pressed_end or has_unresolved_combat, combat(); if(has_unspent_moves, do_moves()), go_to_next_turn())]
		    )
		  )
		]",

		go_to_next_turn: "def() -> commands
		[
		   set(me.animation_hints, []),

		   set(_had_unresolved_combat_when_pressed_end, false),

		   state_based_actions(),

		   map(players_on_team(nturn%num_teams), value.end_turn(me));

		   do_end_turn();
		   do_cleanup_graveyard();

		   state_based_actions(),

		   log_message(players[current_player].name + ', Turn ' + ((me.nturn+1)/num_teams+1)),
			   
		   set(me.num_creatures_killed_this_turn, 0),
           add(me.nturn, 1),
		   set(eclipse, false),
//		   set(me.response_played, false),
		   set(me.is_final_response, false),

		   map(players_on_team((nturn+1)%num_teams), value.begin_turn(me)),
		   map(me.permanents, if(value.controller = next_player, value.increment_summoning));
		   do_begin_turn();

		   state_based_actions(),
		]",

		combat: "def() ->commands [

		   //wake sleepers who are under attack
		   if(find(creatures, value.is_sleeping),
			   ;
				do_wake_sleepers();
				state_based_actions() // <-- probably not necessary
			),

		   //first strike combat
		   if(find(creatures, 'First Strike' in value.abilities),
			  ;
			  do_first_strike_attacks();
		      state_based_actions()
			);
		   
		   //regular combat.
		   do_attacks();

		   [[c.use_action(), set(c.has_attacked, [])] | c <- creatures, c.has_attacked],

		   state_based_actions();

		   do_endzone();

		   set(me.is_final_response, false)
		]
		",

		force_fight: "def(class creature a, class creature b) ->commands
		(
		[
			if('First Strike' in a.abilities,
				a.do_attack(me, [b], true, false)
			),

			if(('First Strike' in b.abilities) and b_retaliates,
				b.do_attack(me, [a], true, false)
			)
		];

		state_based_actions();

		if(a.alive and b.alive,
		[
			if('First Strike' not in a.abilities,
				a.do_attack(me, [b], false, false)
			),

			if(('First Strike' not in b.abilities) and b_retaliates,
				b.do_attack(me, [a], false, false)
			)
		]);

		state_based_actions()
		)
		//b gets to retaliate if a is a melee attack or b is ranged.
		where b_retaliates = a.is_melee or b.is_ranged
		",

		shuffle_creatures_along_path: "def([Loc] locs) ->commands
			if(size(locs) <= 1, null,
				is_loc_on_board(locs[0]) and creature_at_loc(locs[0]) = null,
				(
				if(c != null and c.is_building = false, c.set_loc(me, locs[0]));
				shuffle_creatures_along_path(locs[1:])
				)
				where c = creature_at_loc(locs[1]),

				shuffle_creatures_along_path(locs[1:])
			)
		",

		get_adjacent_forward_locs: "def(Loc loc, int nplayer) -> [Loc]
		if(is_loc_on_board(forward_loc), [forward_loc], []) +
		filter(adj, value in adj_forward)
		    where adj = get_adjacent_locs(loc)
			where adj_forward = get_adjacent_locs(forward_loc)
			where forward_loc = [loc.x, loc.y + if(nplayer = 0, 1, -1)]
		",

		get_adjacent_backward_locs: "def(Loc loc, int nplayer) -> [Loc]
		get_adjacent_forward_locs(loc, if(nplayer = 0, 1, 0))
		",

		//gets adjacent on-board locs. Now more efficient!
		get_adjacent_locs: "def(Loc loc) -> [Loc]
		[
			[loc.x, loc.y-1],
			[loc.x+1, loc.y + if(loc.x%2 = 1, 0, -1)],
			[loc.x+1, loc.y + if(loc.x%2 = 1, 1, 0)],
			[loc.x, loc.y+1],
			[loc.x-1, loc.y + if(loc.x%2 = 1, 1, 0)],
			[loc.x-1, loc.y + if(loc.x%2 = 1, 0, -1)],
		]
		",

		locs_adjacent: "def(Loc a, Loc b) ->bool
		  a.x = b.x and abs(a.y - b.y) = 1 or  //same row
		  abs(a.x - b.x) = 1  and (a.y = b.y or //one row apart
		        abs(a.y - b.y) = 1 and
				  ((a.x%2 = 0 and a.y = b.y+1) or 
				   (a.x%2 = 1 and a.y = b.y-1)))",

		all_locs: "[[row,col] | row <- range(rows), col <- range(columns), is_loc_on_board([row,col])]",

		is_loc_on_board: "def(Loc loc) loc.x >= 0 and loc.x < rows and
		                           loc.y >= 0 and loc.y < columns and
								   (loc.y >= lane.begin and loc.y < lane.begin + lane.length
								   where lane = lanes[loc.x])",
		is_loc_in_endzone: "def(Loc loc, int controller) loc.x >= 0 and loc.x < rows and
		                         (controller = 0 and loc.y = lane.begin + lane.length or
								  controller = 1 and loc.y = lane.begin - 1
								 where lane = lanes[loc.x])",
								 
		land_at_loc: "def(Loc loc) -> class creature|null
		   find(lands, value.loc = loc)",
		creature_at_loc: "def(Loc loc) -> class creature|null
		   find(creatures, value.loc = loc)",

		creature_not_building_at_loc: "def(Loc loc) -> class creature|null
		if(c and not c.is_building, c)
			where c = creature_at_loc(loc)
		",

		creature_at_loc_or_die: "def(Loc loc) -> class creature
		   result asserting result | loc
		   where result = creature_at_loc(loc)",
		land_at_loc_or_die: "def(Loc loc) -> class creature
		   result asserting result | loc
		   where result = land_at_loc(loc)",

		creature_by_summon_id: "def(int id) -> class creature|null find(creatures, value.summon_id = id) or graveyard[id]",
		creature_by_summon_id_or_die: "def(int id) -> class creature result asserting result where result = find(creatures, value.summon_id = id) or graveyard[id]",
		permanent_by_summon_id: "def(int id) -> class creature|null find(permanents, value.summon_id = id) or graveyard[id]",
		permanent_by_summon_id_or_die: "def(int id) -> class creature result asserting result where result = find(permanents, value.summon_id = id) or graveyard[id]",

		//convenience function useful for when a card wants to scry for the
		//current player.
		scry: "def(int depth, {ability: class card_base|null, creature: class creature|null, card: class card|null} binding, class message.play_card_base info) ->commands
		if(info.choices,
		 [
		   set(me.player_obj.deck, me.player_obj.deck[depth:] +
		       filter(me.player_obj.deck[:depth], index != info.choices[0])),
		   add(me.player_obj.hand,
		       [class card<- current_choice.card_options[info.choices[0]].card asserting current_choice != null]),
		 ],
		 if(size(me.player_obj.deck) = 0, null,
		 [
			me.set_current_choice(binding + {
				info: info,
				text: 'Choose a card to put in your hand',
				opponent_text: 'choose a card to put in their hand',
				options: map(player_obj.deck[:min(size(player_obj.deck), depth)],
				   construct('choice.card', {
						card: value,
						tag: index,
				   })),
			}),
		 ]
	  ))",

	  delayed_commands: { type: "[commands]", default: [] },

      add_delayed_commands: "def(commands cmd) ->commands
	  	if(cmd,
		   add(delayed_commands, [cmd]),
		)
	  ",

		// Receives a dictionary and a string 's', returns a
		// copy of the dictionary having extracted from it the
		// key value pair where 's' is key, if it was there.
		remove_key_from_dict: "def
			(map dictionary_, string s) -> map
			fold(
				map(
					dictionary_,
					if (key != s, {(key): value})),
				if (b is null,
					if (a is null,
						{},
						a asserting a is map),
					a + b asserting a is map and b is map))
		",

		// Synctactic sugar for chained function call.
		remove_keys_from_dict: "def
			(map dictionary_, string k0, string k1) -> map
//			dump(['remove_keys_from_dict', dictionary_, k0, k1, returning], returning) where returning =
			remove_key_from_dict(
				remove_key_from_dict(dictionary_, k0), k1)
		",

		// Receives a list of dictionaries where those are
		// elements of the 'starting_units' list corresponding
		// either to:
		//
		// * A tutorial.
		//
		// * A map (as in world of hexes where creatures come
		//   and go) present in the maps configuration document
		//   (data/maps.cfg).
		//
		// * A campaign scenario.
		//
		// * A puzzle (data/puzzles.cfg).
		//
		// * ... possibly something else.
		//
		// Returns a list of 'starting_units' dictionaries,
		// after resolving any possible card randomization
		// request that could be presented there.
		resolve_random_starting_unit: "def
			(map starting_unit) -> map
//			dump(['resolve_random_starting_unit', starting_unit, returning], returning) where returning =
			remove_keys_from_dict(
				if (starting_unit.random_card,
					starting_unit + {
						card_name: choose_one_card_name_randomly(
							[string] <- starting_unit.choose_between),
					}, starting_unit
				), 'random_card', 'choose_between')
		",

		// Syntactic sugar for applying function mapping.
		resolve_random_starting_units: "def
			([map] cards) -> [map]
			map(cards, resolve_random_starting_unit(value))
		",

		// This is a simple random index choose for an array,
		// but with a simple fail safe to return a 'Village'
		// card in case an empty list makes it into this
		// function.
		choose_one_card_name_randomly: "def
			([string] card_names) -> string
			if (size(card_names) = 0,
				'Village',
				card_names[1d32993 % size(card_names)])
		",
	},
}
