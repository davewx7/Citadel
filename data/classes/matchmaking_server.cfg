{
	server_only: true,

properties: {
	status_keys: ['level', 'avatar'],

	matchmake: "def([MatchmakingInfo] info) ->[int]|null
	  if(value != null,
		[first_index, second_index]
	    where second_index = index(info[first_index+1:], sorted[index(sorted, value)+1]) + first_index + 1
	    where first_index = index(info, value)
      )
	    where value = find(sorted, index+1 < size(sorted) and sorted[index+1].type = value.type)
		where sorted = sort(info, a.type < b.type)
	",

	new_account_cards: "{string -> int} ::
	fold(map(card_list, {(value): min(3, count(card_list, value = context.value))}), a+b, {}) + { 'Village': 3 }
	where card_list = [string] :: fold(card_sets, a+b, [])
	where card_sets = map(starting_decks, value.cards)
	where starting_decks = {string -> Deck} <- get_document('data/starting-decks.cfg')
	",

	create_account: "def(map msg) ->AccountDetails
	{
		version: 1,

		display_name: regex_replace(regex_replace(username, '^ +', ''), ' +$', '') where username = string<- msg['user'],
		collection:
		fold(map(new_account_cards, map(range(value), {
			id: generate_uuid(),
			name: card_name,
		}) where card_name = key), a+b),

		avatar: 'endless-studies.png',
		unlocks: ['CAMPAIGN'],
		campaign_progress: {},
		campaign_flags: [],
		gold: 0,
		decks: DeckMap<- get_document('data/default-user-decks.cfg'),
		quests: [],
		complete_quests: [],
		chat_channels: {
			'#talk': true,
		},
		games_won: 0,
		games_played: 0,
		level: 1.0,

		puzzles_completed: [],

		packs: {},
	}
	",

	read_account: "def(map info) ->AccountDetails
		lib.citadel.construct_account(info)
	",

	_grant_cards: "def(matchmaking_server server, string user_id, AccountDetails account_info, [string] sets) ->commands [
		[

		map(new_cards,
		   if(current_count < 3,
				map(range(3 - current_count), add(account_info.collection, [lib.citadel.generate_card_instance(context.value)]))
		   )	
		   where current_count = count(account_info.collection, value.name = context.value))
		
		where new_cards = lib.citadel.get_cards_in_set(set) | set <- sets],

		server.write_account(user_id)
	]",

	user_account: "def(matchmaking_server server, string user_id, AccountDetails account_info, map msg) ->commands
	[
	log(['USER MESSAGE', msg]),
	if(type = 'grant',
		_grant_cards(server, user_id, account_info, sets)
		where sets = [string]<- msg['sets'] or ['core']
	)
		where type = string<- msg['type']
	]
	",

	admin_account: "def(matchmaking_server server, string user_id, AccountDetails account_info, map msg) ->commands
	if(type = 'grant',
		_grant_cards(server, user_id, account_info, sets)

		where sets = [string]<- msg['sets']
	)
	where type = string<- msg['type']
	",

	_assign_quests: "def(AccountDetails account_info, [int] dates) ->[Quest]
		map(quests, { type: value, current_value: 0, assigned_date: dates[index] })

		where quests = possible_quests[:size(dates)]
		where possible_quests =
		  shuffle(filter(keys(lib.quest.all),
		     find(account_info.quests, value.type = context.value) = null and
			 find(account_info.complete_quests, value.type = context.value) = null and
			 _met_quest_requirements(account_info, value))
		  )
	",

	_met_quest_requirements: "def(AccountDetails account_info, string quest) ->bool
		if(requirements is [string], find(requirements, find(account_info.complete_quests, value.type = context.value) = null) = null, true)
		where requirements = info.requirements
		where info = map<- lib.quest.all[quest]
	",

	_claim_quest: "def(string user_id, matchmaking_server server, AccountDetails account_info, string quest) ->commands

	if(complete_quests, [
		add(account_info.complete_quests, complete_quests),
		set(account_info.quests, filter(account_info.quests, value not in complete_quests)),
		map(complete_quests,
			server.record_stats({
				table: 'complete_quest',
				user: user_id,
				quest: value,
			})
		),
		map(complete_quests,
			add(account_info.gold, quest_obj.reward)
			where quest_obj = lib.quest.create(value)
		),

		set(server.response, {type: 'complete_quest', quest: quest}),
	]; server.write_account(user_id), [
		set(server.response, {type: 'error', message: 'Quest is not complete'}),
	])
		where complete_quests = filter(account_info.quests, value.type in lib.quest.all and value.current_value >= lib.quest.all[value.type].max_value and value.type = quest)

	",

	process_account: "def(matchmaking_server server, string user_id, AccountDetails account_info) ->commands
	[
		if(new_quests != account_info.quests, [
			set(account_info.quests, new_quests),
			server.write_account(user_id),
		])
	]
	where new_quests = filter(account_info.quests, value.assigned_date + 3 >= current_date) +
	  _assign_quests(account_info, map(filter([2,1,0], find(account_info.quests + account_info.complete_quests, value.assigned_date = current_date - context.value) = null),
	     current_date - value
	     ))
	where current_date = (t.year - 2015)*365 + t.yday
	//where current_date = t.hour*60*60 + t.minute*60 + t.second
	where t = time()
	",

	handle_game_over_message: "def(matchmaking_server server, map msg) ->commands [
		[
			if(winner_quests, set(winner_account.quests, [Quest]<- winner_quests)),
			if(loser_quests, set(loser_account.quests, [Quest]<- loser_quests)),
			set(winner_account.games_played, (int<- winner_account.games_played) + 1),
			set(winner_account.games_won, (int<- winner_account.games_won) + 1),
			set(loser_account.games_played, (int<- loser_account.games_played) + 1),

			if(winner_account.first_match = null, set(winner_account.first_match, time().unix)),
			if(loser_account.first_match = null, set(loser_account.first_match, time().unix)),
		];

		[
			server.write_account(winner),
			server.write_account(loser),
			log(['WRITE ACCOUNTS', winner, loser, winner_account, loser_account]),
		]
	]
	  where winner_account = server.get_account_info(winner)
	  where loser_account = server.get_account_info(loser)
	  where winner_quests = msg.winner_quests
	  where loser_quests = msg.loser_quests
	  where winner = string<- msg.winner
	  where loser = string<- msg.loser",

	handle_anon_request: "def(matchmaking_server server, map msg) ->map|list|null
	if(msg['type'] = 'deck' and msg.user is string,
		if(account_info = null,
		   { type: 'error', msg: 'no such user' },

		  if(decks is map,
		   if(deck is map,
			  list<- deck.cards,
		      { type: 'error', msg: sprintf('no such deck (%s)', deck_name) }
		   )

		   where deck = decks[deck_name]
		   where deck_name = regex_replace(string<- msg['deck'], '%20', ' '),

		   { type: 'error', msg: 'no decks found', info: info }
		  )
		   where decks = info['decks']
		   where info = map<- account_info['info']
		   asserting account_info is map
		)
		where account_info = server.db_client.get('user:' + (string<- msg['user'])),
		msg['type'] = 'userinfo' and msg.user is string,

		if(account_info = null,
		   { type: 'error', msg: 'no such user' },

		   if(decks is map,
			list<- keys(decks),
			[]
		   )

		   where decks = info['decks']
		   where info = map<- account_info['info']
		   asserting account_info is map
		)

		where account_info = server.db_client.get('user:' + (string<- msg['user']))
	)
	",

	handle_request: "def(matchmaking_server server, map msg, string user_id, AccountDetails account_info) ->commands
	  switch(msg.type,
			'set_avatar',
			[
			set(account_info.avatar, string<- msg.avatar),
			server.write_account(user_id),
			],

			'buy_pack',

			if(account_info.gold < price, set(server.response, {type: 'error', message: 'Not enough gold to buy a pack'}),
			[
				add(account_info.gold, -price),
				set(account_info.packs, account_info.packs + {(string<- msg.set): (account_info.packs[string<- msg.set] or 0) + 1}),
				server.write_account(user_id),
				set(server.response, { type: 'packs_awarded' }),
			]
			)
			
			where price = 250,

			'buy_cards',
			if(not lib.citadel.is_known_card(card_name),
			[
				set(server.response, {type: 'error', message: sprintf('Card %s is unknown to the server', card_name)}),
			],

			[

			if(calculated_price != price,
				set(server.response, {type: 'error', message: 'Price on client does not match price on server'}),
					
				account_info.gold = null or account_info.gold < price,
				set(server.response, {type: 'error', message: 'Not enough gold to purchase'}),
			[
				add(account_info.collection, [card_instance]),
				add(account_info.gold, -price),

				server.write_account(user_id, ['silent']),

				set(server.response, {type: 'purchase_complete', cards: [card_instance], cost: price}),
			])
			]
			  where calculated_price = lib.citadel.card_gold_cost(lib.citadel.create_card(card_name))
			  where card_instance = lib.citadel.generate_card_instance(card_name)
			)
			  where card_name = string<- msg.card_name
			  where price = int<- msg.price,

			'award_cards',

			if(msg.uuid and server.has_processed_trx(string<- msg.uuid),
			[
				set(server.response, {type: 'transaction_confirmed', uuid: string<- msg.uuid}),
			],

			[
				add(account_info.collection, map([string]<- msg.cards, lib.citadel.generate_card_instance(value))),
				server.write_account(user_id, []);
				server.mark_trx_processed(string<- msg.uuid),
				set(server.response, {type: 'transaction_confirmed', uuid: string<- msg.uuid}),
			]),

			'award_gold',

			if(msg.uuid and server.has_processed_trx(string<- msg.uuid),
			[
				set(server.response, {type: 'transaction_confirmed', uuid: string<- msg.uuid}),
			],

			[
				add(account_info.gold, int<- max([int<- msg.amount, -account_info.gold])),
				server.write_account(user_id, ['silent']);
				if(msg.uuid, server.mark_trx_processed(string<- msg.uuid)),
				set(server.response, { type: 'gold_awarded', gold: account_info.gold, uuid: msg.uuid }),
			]),

			'award_packs',
			if(msg.uuid and server.has_processed_trx(string<- msg.uuid),
			[
				set(server.response, {type: 'transaction_confirmed', uuid: string<- msg.uuid}),
			],

			[
				set(account_info.packs, account_info.packs + {(string<- msg.set): (account_info.packs[string<- msg.set] or 0) + (int<- msg.num)}),
				server.write_account(user_id, ['silent']),
				server.mark_trx_processed(string<- msg.uuid),
				set(server.response, { type: 'transaction_confirmed', uuid: string<- msg.uuid }),
			]),

			'open_pack',
			if(account_info.packs[set] <= 0,
			[
				set(server.response, {type: 'error', message: 'No packs to open'}),
			],
			[
				add(account_info.packs[set], -1),
				add(account_info.collection, contents),
				server.write_account(user_id),
				set(server.response, {
					type: 'pack_opened',
					set: set,
					contents: contents,
				})
			]

			where contents = map(calculate_pack_contents(account_info, set), lib.citadel.generate_card_instance(value))
			)
			where set = (string<- msg.set),

			'unlock_campaign_location',

			if(loc not in account_info.unlocks, [
				add(account_info.unlocks, [loc]),
				server.write_account(user_id),
				set(server.response, {type: 'ok'}),
			]) where loc = string<- msg.campaign_location,

			'set_campaign_flag',

			if(flag not in account_info.campaign_flags, [
				add(account_info.campaign_flags, [flag]),
				server.write_account(user_id),
				set(server.response, {type: 'ok'}),
			]) where flag = string<- msg.campaign_flag,

			'set_campaign_location',

			[
			set(account_info.campaign_location, string<- msg.campaign_location),
			server.write_account(user_id),
			set(server.response, {type: 'transaction_confirmed', uuid: string<- msg.uuid}),
			],

			'set_decks',

			[
			set(account_info.decks, DeckMap<- msg.decks),
			server.write_account(user_id),
			set(server.response, {type: 'ok'})
			],

			'claim_quest',
			_claim_quest(user_id, server, account_info, string<- msg.quest), 

			'finish_bot_game',
			if(msg.puzzle_name is string and msg.puzzle_name in account_info.puzzles_completed,
			[
			set(server.response, {type: 'new_cards', cards: [], gold: null }),
			],

			[

			add(account_info.collection, reward_cards),
			if(msg.puzzle_name is string, add(account_info.puzzles_completed, [string]<- [msg.puzzle_name])),

			if(msg.quests,
				set(account_info.quests, [Quest]<- msg.quests)
			),

			if(msg.unlock is string and find(account_info.unlocks, value = msg.unlock) = null,
			   add(account_info.unlocks, [string<-  msg.unlock])),

			if(msg.campaign_scenario is int and msg.campaign_scenario >= (account_info.campaign_progress[msg.campaign_location] or 0),
			[
			   set(account_info.campaign_progress[msg.campaign_location], (account_info.campaign_progress[msg.campaign_location] or 0) + 1)
			]
			),

			add(account_info.level,
				if(msg.victory, 0.5, 0.2)/account_info.level
			),

			if(reward_gold is int, add(account_info.gold, reward_gold)),

			server.write_account(user_id),

			set(server.response, {type: 'new_cards', cards: reward_cards, gold: if(msg.victory, reward_gold) }),

			]) where reward_gold = if(msg.victory, if(msg.multiplayer, 200, 50))
			   where reward_cards = [] /*if(msg.victory = true and msg.campaign_sets,
			   map(calculate_card_rewards(account_info, [string]<- msg.campaign_sets), lib.citadel.generate_card_instance(value)), [])*/,

			set(server.response, {type: 'error', message: 'Unknown request type'})
	  )
	",

	calculate_card_rewards: "def(AccountDetails account, [string] sets) ->[string]

	map(card_instances, value.name)
	where card_instances =
		if(candidates_common,
		   candidates_common[:4] + if(1d3 = 1, candidates_uncommon[:1] + candidates_rare[:1], candidates_uncommon[:2]),
		   candidates_uncommon[:2] + candidates_rare[:1])

		where candidates_rare =
		  shuffle(filter(candidates, value.rarity = 2))
		where candidates_uncommon =
		  shuffle(filter(candidates, value.rarity = 1))
		where candidates_common =
		  shuffle(filter(candidates, value.rarity = 0))
		where candidates =
		  fold(map(sets, filter(lib.citadel.get_card_objects_in_set(value), count(account.collection, value.name = context.value.name) < 3)), a+b)
	",

	calculate_pack_contents: "def(AccountDetails account, string set) ->[string]
	map(card_instances, value.name)
		where card_instances = candidates_rare[:1] + candidates_uncommon[:2] + candidates_common[:5]

		where candidates_rare =
		  shuffle(filter(candidates, value.rarity = 2) or filter(all_candidates, value.rarity = 2))
		where candidates_uncommon =
		  shuffle(filter(candidates, value.rarity = 1) or filter(all_candidates, value.rarity = 1))
		where candidates_common =
		  shuffle(filter(candidates, value.rarity = 0) or filter(all_candidates, value.rarity = 0))
		where candidates =
		  filter(all_candidates, count(account.collection, value.name = context.value.name) < 3)
		where all_candidates = lib.citadel.get_card_objects_in_set(set)
	",
}
}
