{
	is_library: true,

	get_rarity_name: "def(int index) ->string ['common', 'uncommon', 'rare', 'legendary'][index]",

	basic_avatars: "[string] :: [
		'acolyte.png', 'ardent-defender.png', 'endless-studies.png',
		'goddess.png', 'hunting-grounds.png',
		'deephelm-explorer.png', 'mercenary.png', 'rihns-anointed.png',
		'soothsayer.png', 'guardian-sapper.png', 'ghost.png',
		'cunningwisp.png', 'cover.png', 'rokh.png', 'green-adder.png',
		'blink-mage.png', 'inquisitor.png', 'kings-rider.png',
		'knife-in-the-dark.png', 'loyal-guard.png', 'mages-apprentice.png',
		//   The aether classic icon was allowed as avatar for some time.
		// Remove it completely once no one is still using it as avatar.
//		'school-faith.png',
		'skeleton.png', 'spell-warden.png',
		'staged-duel.png',
	]",
	card_exists: "def(string name) ->bool|int (name in (map<- get_document('data/cards.cfg')))",
	actual_card_name: "def(string name) ->string if(info is string, lib.citadel.actual_card_name(info), name)
	  where info = string|map<- doc[name]
	  asserting name in doc | ['Could not find card', name]
	  where doc = map<- get_document('data/cards.cfg')",
	base_card_name: "def(string name) ->string regex_replace(name, '#.*', '')",
	is_variation: "def(string name) ->bool strstr(name, '#') != 0",

	construct_account: "def(map info) ->AccountDetails
	{
		version: 1,

		display_name: string|null<- info.display_name,
		email: string|null<- info.email,
		collection: [CardInstance]<- info.collection,
		games_played: int<- (info.games_played or 0),
		games_won: int<- (info.games_won or 0),
		first_match: int|null<- info.first_match,
		level: decimal<- (info.level or 1.0),
		avatar: string<- if(info.avatar is string, info.avatar, lib.citadel.basic_avatars[0]),
		recent_games: if(info.recent_games is [string], [string]<-info.recent_games),

		unlocks: if('unlocks' in info, [string] <- info['unlocks'], ['CAMPAIGN']),
		campaign_scenario: if(info.campaign_scenario is int, int<- info.campaign_scenario, null),
		campaign_location: if(version > 0 and info.campaign_location is string, string<- info.campaign_location, null),
		campaign_progress: if(info.campaign_progress is {string -> int}, {string -> int} <- info.campaign_progress, {}),
		campaign_flags: if(info.campaign_flags is [string], [string] <- info.campaign_flags, []),

		decks: if(info.decks is DeckMap, DeckMap <- info.decks, DeckMap<- get_document('data/default-user-decks.cfg')),
		quests: if(info.quests is list, [Quest]<- filter(info.quests, value is Quest), []),
		complete_quests: [Quest]<- if(info.complete_quests is [Quest], info.complete_quests, []),

		privileged: if(info.privileged is bool, bool <- info.privileged),

		gold: if(info.gold is int, int <- info.gold, 0),

		chat_channels: if(info.chat_channels, { string -> bool }<- info.chat_channels, {}),

		puzzles_completed: if(info.puzzles_completed, [string]<- info.puzzles_completed, []),

		packs: if(info.packs, {string->int}<- info.packs, {}),
	}
	where version = int<- (info.version or 0)
	",

	generate_card_instance: "def(string name) ->CardInstance
	  {
		id: generate_uuid(),
		name: name,
	  }",
	
	is_known_card: "def(string name) ->bool
		name in (map<- get_document('data/cards.cfg'))",
	
	card_alias: "def(string name) ->string
	if(item is string, item, name)
	where item = info[name]
	where info = (map<- get_document('data/cards.cfg'))[name]",
	
	get_card_info: "def(string name) ->map
	(
	if(info is string, lib.citadel.get_card_info(info),
	   if(is_variation(name), lib.citadel.get_card_info(lib.citadel.base_card_name(name)) + info, info)
	)

	asserting (info is string|map) | ['Unknown card', name]
	)
	where info = (map<- get_document('data/cards.cfg'))[name]",

	create_card: "def(string name, map args={}) ->class card
	  construct('card', deep_copy(get_card_info(name) + args))
	",

	create_creature: "def(string name, map options={}) ->class creature construct('creature', (map<- create_card(name).creature) + { card_name: name } + options)",

	card_gold_cost: "def(class card card) ->int
	switch(card.rarity, 0, 25, 1, 80, 2, 200, 200)
	",

	card_sets: {
		type: "[CardSet]",
		default: [{
			id: "core",
			name: "Core",
		}, {
			id: "Reaping_the_Cycle",
			name: "Reaping the Cycle",
		}, {
			id: "Dawn_to_Dusk",
			name: "Dawn to Dusk",
		}, {
			id: "Experimental_1",
			name: "Experimental 1",
		}, {		
			id: "Scum_of_Marlank",
			name: "Scum of Marlank",
		}, {
			id: "Fury_of_Elementals",
			name: "Fury of Elementals",
		}, {
			id: "shatteredAlliances",
			name: "Shattered Alliances",
		},],
	},

	get_card_objects_in_set: "def(string card_set) ->[class card]
	  query_cache(global_cache(32), card_set, map(get_cards_in_set(card_set), create_card(value)))",
	
	get_all_card_objects: "def() ->[class card]
	  query_cache(global_cache(1), null, map(get_cards_matching({}), create_card(value)))",
	  
	get_incomplete_art_cards: "def() ->[string]

	filter(get_cards_in_set('core'), value not in complete)
	
	where complete = get_complete_art_cards()
	",
	
	get_complete_art_cards: "def() ->[string] map(filter(lib.json.get_document_map('data/cards.cfg'), value is map and value.artist is string and value.artist != 'eleazzaar'), string<- key)",

	get_fuzzy_card_name: "def(string name, string set='core') ->null|string
	if(exact_match != null,
	   exact_match,

	   if(match != null,
			cards[index(fixed_cards, match)],

			if(match_front != null,
			   cards[index(fixed_cards, match_front)],
			   if(match_sub != null,
			       cards[index(fixed_cards, match_sub)],
				)
			      where match_sub = find(fixed_cards, strstr(value, fixed_name))
			)

			where match_front = find(fixed_cards, value[:size(fixed_name)] = fixed_name)
	   )

	   where match = find(fixed_cards, value = fixed_name)
	   where fixed_name = regex_replace(lower(name), '[^a-z]', '')
	   where fixed_cards = map(cards, regex_replace(lower(value), '[^a-z]', ''))
	)
	where exact_match = find(cards, lower(value) = lower(name))
	where cards = get_cards_in_set(set)
	",

	get_cards_in_set: "def(string card_set) ->[string] map(filter(lib.json.get_document_map('data/cards.cfg'), value is map and (value['set'] = card_set or card_set = '*' and value['set'] != null or card_set = '')), string<- key)",
	get_cards_matching: "def({string ->any} query) ->[string] map(filter(lib.json.get_document_map('data/cards.cfg'), value is map and find(query_keys, query[value] != card[value]) = null where card = value), string <- key)
	  where query_keys = keys(query)",

	school_info: "query_cache(global_cache(1), null, [SchoolInfo]<- get_document('data/schools.cfg'))",

	preferences: {
		init: "get_document('citadel-preferences.cfg', ['null_on_failure', 'user_preferences_dir']) or {}",
		set: "[set(_data, value), write_document('citadel-preferences.cfg', value)]",
		type: "map",
	},

	get_preference_int: "def(string key, int default_value=0)->int
		if(read_value is int, read_value, default_value)
		where read_value = preferences[key]
	",

	get_preference_bool: "def(string key, bool default_value=false)->bool
		if(read_value is bool, read_value, default_value)
		where read_value = preferences[key]
	",

	set_preference: "def(string key, any v)->commands
		set(preferences, preferences + {(key): v})
	",

	add_preferences: "def({string->any} values) ->commands
		set(preferences, preferences + values)
	",

	num_times_tip_shown: "def(string key) ->int
		if(tips_map is map, if(res is int, res, 0) where res = tips_map[key], 0)
		where tips_map = preferences['tips_shown']",
	
	tip_shown: "def(string key, int increment=1) ->commands [
		set(me.preferences, me.preferences + {tips_shown: if(tips_map is map, tips_map, {}) + {(key): num_times_tip_shown(key)+increment} where tips_map = preferences['tips_shown']})
	]",

	_sound_delays_written: { type: "{string -> decimal}", default: {} },
	_sound_volumes_written: { type: "{string -> decimal}", default: {} },

	set_sound_volume: "def(string fname, decimal value) ->commands
	[
	set(_sound_volumes_written[fname], value);
	write_document('data/sound-volume.cfg', (map<- get_document('data/sound-volume.cfg')) + _sound_volumes_written, [enum game_dir])
	]
	",
	
	sound_volume: "def(string fname) ->decimal
	if(fname in _sound_volumes_written, _sound_volumes_written[fname],
	   fname in volumes, volumes[fname], 1.0)
	  where volumes = {string -> decimal}<- get_document('data/sound-volume.cfg')",

	set_sound_delay_seconds: "def(string fname, decimal value) ->commands
	[
	set(_sound_delays_written[fname], value);
	write_document('data/sound-delay.cfg', (map<- get_document('data/sound-delay.cfg')) + _sound_delays_written, [enum game_dir])
	]
	",

	sound_delay_seconds: "def(string fname) ->decimal
	if(fname in _sound_delays_written, _sound_delays_written[fname],
	   fname in delays, delays[fname], 0.0)
	  where delays = {string -> decimal}<- get_document('data/sound-delay.cfg')",
	
	sound_delay: "def(string fname) ->int
	int(round(sound_delay_seconds(fname)*60.0))
	",

	lookup_icon: "def(string key) -> string|null
	  switch(key,
		'gold', 'school-gold.svg',
		'blood', 'school-blood.svg',
		'food', 'school-food.svg',
		'scrolls', 'school-scrolls.svg',
		'faith', 'school-faith.svg',
		null)
	",
	
	map_markup: "def(string s) ->string
	if(strstr(s, '.svg') != 0, s,
		if(icon != null, '&images/icons/' + icon + ';', key)
		where icon = lookup_icon(key)
		where key = s[1:size(s)-1]
	)",

	process_markup: "def(string s) ->string
	 if(pos = -1, s,
	    if(end_pos = -1, s,
		  s[:pos] + map_markup(tail[:end_pos+1]) + process_markup(tail[end_pos+1:]))
				where end_pos = strstr(s[pos:], ';') - 1
				where tail = s[pos:]
		)
	  where pos = strstr(s, '&') - 1
	",

	zorder: "def(string key) ->int
	  result asserting result is int
	  where result = zorder_map[key]
	  where zorder_map = {
		chat_gui: 20000,
		card_stack_base: 2000,
		debug_labels: 1300,
		status_label: 1200,
		card_highlight: 1100,
		card_play: 3000,
		seals: -20,
		board_shader: -50,
		game_log: 400,
		avatars: 300,
		hud: 200,
		card_in_hand_base: 900,
		card_in_graveyard_base: 800,
		status_icon: 200,
		movement_arrows: 400,
		xp_objects: 600,
		life_labels: 700,
		winner_dialog: 500,
		mana_symbols: 1050,
		card_tips: 2000,
		tooltip: 100000,
	}",

	button_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [46,46,46],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [196,196,196],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },

	library_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [46,46,46],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [196,196,196],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },


	ability_info: "{string -> {text: string, icon: string, scaling: decimal}} ::
	{
		'Haste': { text: 'HASTE', icon: 'haste.svg', scaling: 1.3 },
		'Cover': { text: 'COVER', icon: 'cover.svg', scaling: 1.1 },
	}",

	card_cost_cache: { type: "ffl_cache", initialize: "create_cache(256)" },

	card_animation_cache: { type: "ffl_cache", initialize: "create_cache(1024)" },

	card_cache: { type: "object", initialize: "create_cache(1024)" },
	native_card_sizes: { type: "[decimal]", default: [0.3,0.5,1.0,1.5,2.5,3.0] },
	
	px: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(lib.gui.screen_width))/1440.0)",
	py: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(lib.gui.screen_height))/900.0)",

	py_scale: "decimal(lib.gui.screen_height)/900.0",

	dpx: "def(decimal pixels) ->decimal pixels*lib.gui.screen_width/1440.0",
	dpy: "def(decimal pixels) ->decimal pixels*lib.gui.screen_height/900.0",

	render_frame: "def(cairo_callable c, int w, int h, cairo_commands cmd, map|null m=null, map args={}) ->frame
	build_animation(
	{
		fbo: c.render(ww, hh, cmd, m),
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		frames: 1, scale: 1,
		no_remove_alpha_borders: true,
	} + args
	) where ww = if(round_to_even(w) != w, w+1, w)
	  where hh = if(round_to_even(h) != h, h+1, h)",
	
	get_scaled_image_uncached: "def(cairo_callable c, string image, int w, int h) ->texture_object
		c.render(w, h, [
			c.scale(decimal(w)/decimal(image_dim[0]), decimal(h)/decimal(image_dim[1])),
			c.paint_image(image),
		])
		where image_dim = c.image_dim(image)
	",

	get_card_adjustment: "def(string card_name, string adjustment, decimal default_value) ->decimal
		if(adj, if(adjustment in adj, decimal<- adj[adjustment], default_value), default_value)
		where adj = card_adjustments[card_name]
	",
	
	card_adjustments: {
		type: "{string -> {string -> decimal}}",
		init: "
		fold(
		map(
		get_document('data/cards-adjustments.cfg', ['null_on_failure', 'user_preferences_dir']) or
		       get_document('data/cards-adjustments.cfg'),
		{ (if(alias is string, alias, key)): value }
		where alias = card_db[key]
		),
		a+b, {})
	     where card_db = (map<- get_document('data/cards.cfg'))
		",
		set: "[set(_data, value), write_document('data/cards-adjustments.cfg', value, [enum game_dir])]",
	},

	tutorials: "[class rival] :: query_cache(global_cache(1), null, map([map]<- get_document('data/tutorials.cfg'), construct('rival', value)))",
	rivals: "[class rival] :: query_cache(global_cache(1), null, map([map]<- get_document('data/rivals.cfg'), construct('rival', value)))",
	puzzles: "[class rival] :: query_cache(global_cache(1), null, map([map]<- get_document('data/puzzles.cfg'), construct('rival', value)))",

	maps: "[map] :: query_cache(global_cache(1), null, [map]<- get_document('data/maps.cfg'))",

	is_release: "bool :: MODULE_OPTIONS.universe = 'rel'",
	is_devel: "bool :: MODULE_OPTIONS.universe = 'dev'",

	choose_interface_sound: "def(string sound_name) ->string|null
	if(res is string, 'interface/' + res)
	where res = choose(filter(files, lower(value[:size(sound_name)]) = sound_name))
		where files = query_cache(global_cache(1), 0, get_files_in_dir('sounds/interface'))
	",

	add_main_background_shader: "def(level level) ->commands
		if(find(level.frame_buffer_shaders, value.shader_info = 'citadel_background') = null,
			add(level.frame_buffer_shaders, [{
				begin_zorder: -1000000,
				end_zorder: -10000,
				shader_info: 'citadel_background',
			}])
		)
	",

	_get_next_non_clashing_name: "def(string name) ->string
		if(num, regex_replace(name, '\\(' + str(num) + '\\)$', '(' + str(num+1) + ')'), name + ' (2)')
		where num = if(current_num is [string], int(current_num[0]))
		where current_num = regex_match(name, '.*\\((\\d+)\\)')
	",

	_find_non_clashing_name: "def(string name, DeckMap m) ->string
	if(name not in m, name, _find_non_clashing_name(_get_next_non_clashing_name(name), m))
	",

	get_non_clashing_deck_name: "def(string deck_name, DeckMap decks, null|string original_deck_name=null) ->string
		if(deck_name = original_deck_name, deck_name,
			if(deck_name not in decks, deck_name,
			   _find_non_clashing_name(deck_name, decks)
			)
		)
	",

	sub_school_icon: "def(string text, int nschool) ->string
		regex_replace(text, sprintf('\\(%s\\)', school.name), sprintf(q(<img src='images/icons/%s'/>), school.icon))
		where school = school_info[nschool]
	",

	sub_game_icons: "def(string text) ->string
		sub_school_icon(sub_school_icon(sub_school_icon(sub_school_icon(sub_school_icon(text, 1), 2), 3), 4), 5)
	",

	max_decks: "int :: 9",

	campaign_quest_progress: {
		init: "{string->int}<- get_document('campaign-quest-progress.cfg', ['null_on_failure', 'user_preferences_dir']) or {}",
		set: "[set(_data, value), write_document('campaign-quest-progress.cfg', value)]",
		type: "{string->int}",
	},

	set_campaign_quest_info: "def(string key, any value) ->commands
		add(campaign_quest_info, {(key): value})
	",

	get_campaign_quest_info: "def(string key) ->any
		campaign_quest_info[key]
	",

	campaign_quest_info: {
		init: "{string->any}<- get_document('campaign-quest-info.cfg', ['null_on_failure', 'user_preferences_dir']) or {}",
		set: "[set(_data, value), write_document('campaign-quest-info.cfg', value)]",
		type: "{string->any}",
	},

	get_campaign_quests: "def() ->[class campaign_quest]
		query_cache(global_cache(), null, map([map]<- get_document('data/campaign-quests.cfg'), construct('campaign_quest', value)))
	",

	get_campaign_quest: "def(string id) ->class campaign_quest
		find_or_die(get_campaign_quests(), 'no such quest: ' + id, value.id = id)
	",

	_campaign_encounter_victories: {
		init: "{string->int}<- get_document('campaign-encounter-victories.cfg', ['null_on_failure', 'user_preferences_dir']) or {}",
		set: "[set(_data, value), write_document('campaign-encounter-victories.cfg', value)]",
		type: "{string->int}",
	},

	get_campaign_encounter_victories: "def(string encounter_name) ->int
		_campaign_encounter_victories[encounter_name] or 0
	",

	register_campaign_encounter_victory: "def(string encounter_name) ->commands
		add(_campaign_encounter_victories, {(encounter_name): get_campaign_encounter_victories(encounter_name) + 1})
	",

	get_ai_deck: "def(string name) ->[string]
	(
		([string]<- decks[name])
		asserting name in decks | ['Unknown AI deck: ', name, 'not found in ai-deck.cfg']
	)
	where decks = lib.json.get_document_map('data/ai-deck.cfg')
	",

	campaign_locations: {
		type: "[class campaign_location]",
		init: "[class campaign_location] ::
		
		map(paths, class campaign_location<- get_document(value))
		
		where paths = map(filtered_files, sprintf('data/campaign-locations/%s', value))
		where filtered_files = filter(files, regex_match(value, '[a-zA-Z0-9_-]+\\.cfg') != null)
		where files = get_files_in_dir('data/campaign-locations')
		",
	},

	get_campaign_locations: "def() ->[class campaign_location]
		campaign_locations
	",

	write_campaign_locations: "def() ->commands
		map(campaign_locations, write_document(sprintf('data/campaign-locations/%s.cfg', value.name), value, [enum game_dir]));

		map(remove_files, remove_document(sprintf('data/campaign-locations/%s', value), [enum game_dir]))

		where remove_files = filter(filtered_files, find(campaign_locations, value.name = id) = null where id = value[:size(value)-4])
		where filtered_files = filter(filenames, regex_match(value, '[a-zA-Z0-9_-]+\\.cfg') != null)
		where filenames = get_files_in_dir('data/campaign-locations')
	",

	myadd: "def(int a, int b) ->int
	a + b",

	mytest2: "def(int x) ->[int]
		map(range(1000), myadd(value,x))
	",

	mytest: "def(int x) ->[int]
		map(range(1000), value+x)
	",

}
