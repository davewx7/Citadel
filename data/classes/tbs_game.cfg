{
	_skip_mulligan: { type: "bool", default: false },

	create: "def(map msg) ->commands [
		log(['GGG CREATE', msg]),
		set(game.players, players),
		set(me.setup_commands, string|null<- msg.setup_commands),
		set(_state, game),
		set(_skip_mulligan, if(msg.skip_mulligan, true, false)),
	]
		 where players =		 
			 map(msg.users,
			        construct('player',
			            {
							game: game,
							player_index: index,
							name: string<- val.user,
							avatar: if(val.avatar, val.avatar,
							  if(val.account_info,
								(map<- val.account_info).avatar))

							  or 'goddess.png',

							quests: map([Quest]<- (if(val.account_info, (map<- val.account_info).quests, val.quests) or []), lib.quest.create(value, val.account_info != null)),
						}
						+ if(msg.player_resources is int, {base_income: msg.player_resources}, {})
			          ) where val = map<- msg.users[index]
				) asserting msg.users is list

		  where game =

		      construct('game_state', {
				 starting_units: null|[map]<- msg.starting_units,
				 tutorial: if(msg.tutorial != null, construct(string<- msg.tutorial), construct('tutorial')),
		         players: [],
				 no_shuffle: msg.no_shuffle = true,

				 } + if(msg.map_dimensions is [int,int], {map_dimensions: msg.map_dimensions, lanes: msg.map_lanes}, {})
				   + if(msg.trophies is [[int]], {trophies: msg.trophies}, {}))
	
	",

	restart: "def() ->commands [
		log('START_GAME'),
		set(state.players, players),
		set(_state, game),
		seed_rng();
		log(['PLAYERS', size(_state.players) asserting _state])
	]
	where players = map(state.players, construct('player', {
				game: game,
				player_index: value.player_index,
				name: value.name,
				avatar: value.avatar,
				quests: value.quests,
			}))
	where game = construct('game_state', {
			players: [],

			starting_units: state.creatures + state.lands,
			tutorial: state.tutorial,
			rows: state.rows,
			columns: state.columns,
			lanes: state.lanes,
			trophies: state.trophies,
		})
	",

	process: "def() ->commands
	   if(delayed_commands, [
		  add(_game.state_id, 1),
		  set(delayed_commands, delayed_commands[1:]),
		  delayed_commands[0],
	   ])",

	_start_game: "def() ->commands
		debug('_START_GAME');
		if(setup_commands, set(state.puzzle, _skip_mulligan); state.execute_commands(setup_commands));
		state.do_begin_turn();
		state.state_based_actions()
	",

	_set_winner: "def(int nplayer) ->commands
	state.fire_creature_event('on_end_game', [nplayer]);
	set(_game.winner, { winner: state.players[winner].name, loser: state.players[loser].name, winner_quests: map(state.players[winner].quests, value.get_info()), loser_quests: map(state.players[loser].quests, value.get_info()) })
	where winner = nplayer
	where loser = (nplayer+1)%2
	",

	message: "def(map message, int player) ->commands

		 handle_errors(
		 switch(message.type,
		  'mulligan',

		  [
		  state.mulligan(player, [string]<- message.cards),
		  add(_game.state_id, 1),
		  ],

		  'submit_deck',
		  if(message.force or not state.players[player].deck,
		  [
		  log('SERVER GOT submit_deck: ' + str(player)),
		  _game.set_player_info(player, message.player_info),
		  add(_game.state_id, 1),
		  set(state.players, state.players[:player] + [ new_player ] + state.players[player+1:]),
		  state.player_init(new_player);

		  if(find(state.players, value.deck_submitted = false) = null,
		  if(_skip_mulligan,
			  [
			  	_start_game()
			  ],
			  [
			    if(setup_commands, state.execute_commands(setup_commands))
			  ]
		  )
		  )
		  ] where new_player =
		    construct('player',
			  {
				 game: state,
				 player_index: player,
				 deck: shuffled_deck[4:],
				 hand: shuffled_deck[0:4],
				 original_deck: if(state.puzzle, [], base_deck),
				 deck_submitted: true,
				 base_income: state.players[player].base_income + if(player%2 = 0, 0, 1),
				 resources: 0,
				 name: state.players[player].name,
				 avatar: state.players[player].avatar,
				 life: state.players[player].life,

				 mulligan: not _skip_mulligan,

				 quests: state.players[player].quests,

			  } where shuffled_deck = state.tutorial.get_deck(player, if(state.no_shuffle, map(base_deck, value), shuffle(map(base_deck, value))))
			    where base_deck = [string]<- message.deck
			)),
		  'concede', [
			add(_game.state_id, 1),
		  	state.concede(player),
			_set_winner((player+1)%2),
		  ],
		  'moves', [


		  if(state.team_index(player) = state.current_player and message.state_id = _game.state_id and state.in_mulligan = false or message.force, 
			[
			 add(_game.state_id, 1),
		     state.process_moves(map([map]<- message.moves, class message<- construct('message.' + (string<- value.type), map<- value)));
			 	if(state.delayed_commands, [
			 		add(delayed_commands, [state.delayed_commands]),
					set(state.delayed_commands, []),
				]),

			 bind_command(def(class tbs_game g) if(g.state.winner_index != null, _set_winner(g.state.winner_index)), me),
			],
			 log('REJECTING MESSAGE FROM PLAYER ' + str(player) + '/' + str(state.team_index(player)) + ' STATE ID ' + str(message.state_id) + ' BECAUSE WE ARE PLAYER ' + state.current_player + ' WITH STATE ID ' + str(_game.state_id))
			)
		  ]
		)
		 //error handling
		 , [
		   log(sprintf('ERROR WHILE PROCESSING MESSAGE: %s: %s', message.type, get_error_message())),
		   state.log_message('Server encountered error when processing ' + (string<- message.type))
		 ]
		)
	",

	add_bot: "def(int session_id, string bot_type, any args, any bot_args) ->commands [
		debug(['ADD_BOT', args, bot_args]),
		add(_game.state_id, 1),
		add(_game.bots, [{
			session_id: session_id,
			script: [{
				session_id: session_id,
				send: {
					type: 'request_updates',
					allow_deltas: false,
					state_id: -1,
				}
			}],

			on_create: 'set(data, construct(q(bot_' + bot_type + '), {session_id: ' + str(session_id) + ', args: ' + str(args) + ' or {}} + ( ' + str(bot_args) + ' or {})))',
			on_message: q(data.handle_message(message, me)),
		}])
	]",
	
	player_disconnected: "def() ->commands
	[
		add(_game.state_id, 1),
		state.concede(_game.players_disconnected[0]),
		if(_game.players_disconnected[0] = 0, _set_winner(1), _game.players_disconnected[0] = 1, _set_winner(0)),
	]",
	transform: "def(object doc, int nplayer) ->commands [
		set(doc.nplayer, nplayer),
		set(doc.delayed_commands, []),
	]",

	restore_state: "def(object new_state) ->commands
		set(_state, new_state) asserting new_state is class game_state
	",

	get_state: "def() ->class game_state state",

	player_waiting_on: "def() ->int|null
	if(_state, _state.current_player_index)
	",

	setup_commands: { type: "null|string" },

	state: "class game_state<- _state",
	_state: { type: "null|class game_state" },

	_game: { type: "game" },

	delayed_commands: { type: "[commands]", default: [] },
}
