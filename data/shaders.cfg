{
   instances: [
   {
		name: "hurt_flash",
		vertex: "
            uniform mat4 u_mvp_matrix;
            attribute vec4 a_position;
            attribute vec2 a_texcoord;
            varying vec2 v_texcoord;
            void main() {
                v_texcoord = a_texcoord;
                gl_Position = u_mvp_matrix * a_position;
			}
		",
		fragment: "
            #version 120
            uniform sampler2D u_tex_map;
			uniform vec4 u_color;
			varying vec2 v_texcoord;
			uniform int start_cycle;
			uniform int end_cycle;
			uniform int cycle;
			uniform bool is_poisoned;
            void main() {
				vec4 col = u_color;
				float cf = mod(cycle - start_cycle, 5) / 5.0;
				if(is_poisoned) {
					col *= vec4(0.0, 0.8, 0.0, 0.5);
				}
				if(cycle >= start_cycle && cycle < end_cycle && cf > 0.5) {
					col *= vec4(1.0, 0.0, 0.0, 0.8);
				}
                gl_FragColor = texture2D(u_tex_map, v_texcoord) * col;
			}
		",
        attributes: {
            position: "a_position",
            texcoord: "a_texcoord",
        },
		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
		},
   },

   {
		name: "card",
		vertex: "
                uniform mat4 u_mvp_matrix;
                attribute vec4 a_position;
                attribute vec2 a_texcoord;
				uniform int resolve_cycle;
				uniform int fizzle_cycle;
                varying vec2 v_texcoord;
                void main()
                {
                    v_texcoord = a_texcoord;
                    gl_Position = u_mvp_matrix * a_position;
					if(resolve_cycle > 0) {
						if(v_texcoord[0] > 0.05) {
							gl_Position[0] += float(resolve_cycle)/400.0;
						} else {
							gl_Position[0] -= float(resolve_cycle)/400.0;
						}

						if(v_texcoord[1] > 0.05) {
							gl_Position[1] -= float(resolve_cycle)/200.0;
						} else {
							gl_Position[1] += float(resolve_cycle)/200.0;
						}
					}
				}
		",
		fragment: "
                uniform sampler2D u_tex_map;
                uniform sampler2D u_tex_noise;
				uniform vec4 u_color;
				varying vec2 v_texcoord;
				uniform int resolve_cycle;
				uniform int fizzle_cycle;
                void main()
                {
					vec4 col = u_color;
					if(resolve_cycle > 0) {
						col[3] = 1.0;
                    	gl_FragColor = texture2D(u_tex_map, v_texcoord)*col;
						if(resolve_cycle < 10) {
							float ratio = sin(float(resolve_cycle)*3.14/10.0)*0.5;
							gl_FragColor[0] += (1.0 - gl_FragColor[0])*ratio;
							gl_FragColor[1] += (1.0 - gl_FragColor[1])*ratio;
							gl_FragColor[2] += (1.0 - gl_FragColor[2])*ratio;
						}

						gl_FragColor[3] = 1.0 - float(resolve_cycle)/50.0;
					} else if(fizzle_cycle > 0) {
                    	gl_FragColor = texture2D(u_tex_map, v_texcoord) * col;

						if(float(fizzle_cycle)/25.0 > texture2D(u_tex_noise, v_texcoord)[0]) {
							gl_FragColor[3] = 0.0;
						}
					} else {
                    	gl_FragColor = texture2D(u_tex_map, v_texcoord) * col;
					}
				}
		",
        attributes: {
			position: "a_position",
			texcoord: "a_texcoord",
        },
		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
		}
   },

   {
		name: "particle1",
		vertex: "
			#version 120
            uniform mat4 u_mvp_matrix;
			uniform int u_cycle;
			uniform int u_start_cycle;
			uniform int u_end_cycle;
			uniform vec2 u_centre_position;
            attribute vec2 a_position;
			attribute float a_start_cycle;
			varying float v_lifetime;
            void main() {
				float cycle = float(u_cycle - u_start_cycle);
				if(u_cycle >= u_start_cycle && u_cycle < u_end_cycle && cycle >= a_start_cycle) {
					vec4 v = vec4(a_position.x + u_centre_position.x, a_position.y + u_centre_position.y - cycle, 0.0, 1.0);
					gl_Position = u_mvp_matrix * v;
					v_lifetime = clamp(100.0 / cycle, 0.0, 1.0);
				} else {
					gl_Position = vec4(-3000, -3000, 0, 0);
					v_lifetime = 0.0;
				}
				gl_PointSize = 10.0;
            }
			",
		fragment: "
			#version 120
			uniform sampler2D u_tex_map;
			uniform vec4 u_color;
			varying float v_lifetime;
            void main() {
				vec4 texColor = texture2D(u_tex_map, gl_PointCoord);
				gl_FragColor = u_color * texColor;
				gl_FragColor.a *= v_lifetime;
			}
		",
		"uniforms": {
			"mvp_matrix": "u_mvp_matrix",
		},
   },

   {
		name: "yuv12",
		new: true,
		vertex: "
			#version 120
			attribute vec2 a_position;
			attribute vec2 a_texcoord;
			uniform mat4 u_mvp_matrix;
			varying vec2 v_texcoord;
			void main() {			
				gl_Position = u_mvp_matrix * vec4(a_position, 0.0, 1.0);
				v_texcoord = a_texcoord;
			}
		",
		// Sam Lantinga YUV12 -> RGB conversion shader.
		fragment: "
			#version 120
			uniform vec4 u_color;
			uniform sampler2D u_tex0;
			uniform sampler2D u_tex1;
			uniform sampler2D u_tex2;
			varying vec2 v_texcoord;
			
			// YUV offset 
			const vec3 offset = vec3(-0.0625, -0.5, -0.5);

			// RGB coefficients 
			const vec3 Rcoeff = vec3(1.164,  0.000,  1.596);
			const vec3 Gcoeff = vec3(1.164, -0.391, -0.813);
			const vec3 Bcoeff = vec3(1.164,  2.018,  0.000);
			
			void main() {				
				vec3 yuv;

				// Get the Y value
				yuv.x = texture2D(u_tex0, v_texcoord).r;

				// Get the U and V values
				yuv.y = texture2D(u_tex1, v_texcoord).r;
				yuv.z = texture2D(u_tex2, v_texcoord).r;

				// Do the color transform
				yuv += offset;
				vec3 rgb = vec3(dot(yuv, Rcoeff), dot(yuv, Gcoeff), dot(yuv, Bcoeff));

                rgb = clamp(rgb, vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0));
                
				// That was easy. :)
				gl_FragColor = vec4(rgb, 1.0) * u_color;
			}
		",
		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
			tex0: "u_tex0",
			tex1: "u_tex1",
			tex2: "u_tex2",
		},
		attributes: {
			vertex: "a_position",
			texcoord: "a_texcoord",
		},
   },

   {
		name: "seals_light_shader",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_sprite_area;
			//uniform vec4 u_anura_draw_area;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",

		fragment: "
			#version 120
			uniform sampler2D u_anura_tex_map;
			uniform sampler2D u_playmat_tex;
			uniform sampler2D u_gradient_tex;
			uniform float u_level_width;
			uniform float u_level_height;
			uniform float u_playmat_alpha;
			uniform vec4 u_draw_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			uniform vec4 u_playmat_area;
			void main()
			{
				vec4 col = vec4(0.086, 0.137, 0.180, 0.0);
				float xpos = (v_vertex[0] - u_draw_area[0]) / (u_draw_area[2] - u_draw_area[0]);
				float ypos = (v_vertex[1] - u_draw_area[1]) / (u_draw_area[3] - u_draw_area[1]);

				if(xpos > u_playmat_area[0] && xpos < u_playmat_area[2] &&
				   ypos > u_playmat_area[1] && ypos < u_playmat_area[3]) {
					xpos = (xpos - u_playmat_area[0]) / (u_playmat_area[2] - u_playmat_area[0]);
					ypos = (ypos - u_playmat_area[1]) / (u_playmat_area[3] - u_playmat_area[1]);
					vec4 mat_col = texture2D(u_playmat_tex, vec2(xpos,ypos));
					mat_col[0] *= 1.0/mat_col[3];
					mat_col[1] *= 1.0/mat_col[3];
					mat_col[2] *= 1.0/mat_col[3];

					col = mat_col; //mix(col, mat_col, mat_col[3]*u_playmat_alpha);
					//col[3] = 1.0;
				}
				
				vec4 light_col = texture2D(u_anura_tex_map, v_texcoord);

				vec4 mapped_col = texture2D(u_gradient_tex, vec2(light_col[3], 0.25));

				if(light_col[1] < light_col[0]) {
					vec4 threatened_mapped_col = texture2D(u_gradient_tex, vec2(light_col[3], 0.75));
					mapped_col = mix(threatened_mapped_col, mapped_col, light_col[1]/light_col[0]);
				}

				vec4 dodge_col = vec4(col[0]/max(0.01, 1.0-mapped_col[0]), col[1]/max(0.01, 1.0-mapped_col[1]), col[2]/max(0.01, 1.0-mapped_col[2]), 1.0);

				gl_FragColor = mix(col, dodge_col, light_col[3]);
				gl_FragColor[3] = max(light_col[3], col[3]);
				if(col[3] > 0.2) {
					gl_FragColor[3] = 1.0;
				}
			}

		",

		create: "[
			set(textures, [playmat_tex, light_tex]),
			bind_texture(playmat_tex, 1),
			bind_texture(light_tex, 2),
		] where light_tex = load_texture('effects/seal/light_gradient.png', {address_mode: ['wrap']})
		  where playmat_tex = controller.playmat_tex
		  where controller = find_or_die(level.chars, value is obj citadel_controller)
		  ",

		draw: "[
			set(uniform_commands.u_playmat_tex, 1),
			set(uniform_commands.u_gradient_tex, 2),
			if(controller, [
				set(uniform_commands.u_playmat_area, controller.playmat_area),
				set(uniform_commands.u_playmat_alpha, controller.playmat_alpha),
				set(uniform_commands.u_draw_area, controller.screen_area),
			]),

		] where controller = find(level.chars, value is obj citadel_controller)",
   },

   {
		name: "citadel_board_shader",
		new: true,
		vertex: "

			uniform mat4 u_anura_mvp_matrix;
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_sprite_area;
			//uniform vec4 u_anura_draw_area;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}

		",

		fragment: "
			#version 120
			uniform sampler2D u_anura_tex_map;
			uniform sampler2D u_hex_tex;
			uniform float u_hex_intensity[84];
			uniform float u_level_width;
			uniform float u_level_height;
			uniform float u_cycle;
			//uniform sampler2D u_hex_tex2;
			//uniform float u_intensity;
			//uniform vec4 u_water_area[2];
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);

				vec2 hex_coord = vec2(v_texcoord[0]*u_level_width/1024.0 + sin(u_cycle/1000.0), v_texcoord[1]*u_level_height/512.0 + 2.0*cos(u_cycle/1824.0));

				vec4 hex_color = texture2D(u_hex_tex, hex_coord);
				int xindex = int(hex_color[0]*12.0);
				int yindex = int(hex_color[1]*7.0);
				int index = xindex*6 + yindex;

				//calculate intensity_mul which multiplies the intensity based
				//on x position to make it fade out at the edges
				float intensity_mul = 0.0;
				if(hex_color[3] == 1.0 && u_cycle >= 1) {
					if(v_texcoord[0] <= 0.3 || v_texcoord[0] >= 0.7) {
						intensity_mul = 1.0;
					} else if(v_texcoord[0] >= 0.3 && v_texcoord[0] <= 0.7) {
						intensity_mul = abs(v_texcoord[0] - 0.5)*5.0;
					}

					float dodge_ratio = 0.4;
					float inv_dodge_ratio = 1.0 - dodge_ratio;

					vec3 base_color;
					if(mod(xindex,2) == 0) {
						if(mod(yindex,2) == 0) {
							//base_color = vec3(1,0,0);
							base_color = vec3(0.110, 0.149, 0.141);
						} else {
							//base_color = vec3(0,1,0);
							base_color = vec3(0.106, 0.145, 0.145);
						}
					} else {
						if(mod(yindex,2) == 0) {
							//base_color = vec3(1,1,1);
							base_color = vec3(0.11, 0.12, 0.12);
						} else {
							//base_color = vec3(1,1,0);
							base_color = vec3(0.1333, 0.1412, 0.137);
						}
					}

					vec3 dodge_color = base_color * (0.5 + u_hex_intensity[index]*0.5) * intensity_mul;

					gl_FragColor[0] = gl_FragColor[0]*inv_dodge_ratio + dodge_ratio*gl_FragColor[0]/(1 - dodge_color[0]);
					gl_FragColor[1] = gl_FragColor[1]*inv_dodge_ratio + dodge_ratio*gl_FragColor[1]/(1 - dodge_color[1]);
					gl_FragColor[2] = gl_FragColor[2]*inv_dodge_ratio + dodge_ratio*gl_FragColor[2]/(1 - dodge_color[2]);
				}
			}
		",

		create: "[
			set(textures, [tex]),
			bind_texture(tex, 1),
		] where tex = load_texture('hex_2.png', {address_mode: ['wrap']})",

		draw: "[			
			set(uniform_commands.u_hex_tex, 1),
			set(uniform_commands.u_hex_intensity, controller.background_hex_intensity),
			set(uniform_commands.u_level_width, level.dimensions[2]),
			set(uniform_commands.u_level_height, level.dimensions[3]),
			set(uniform_commands.u_cycle, level.cycle),
			//set(uniform_commands.u_hex_tex2, 2),
		] where controller = find_or_die(level.chars, value is obj hex_effect_controller)",
	},

	{
		name: "citadel_area_blur",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			//uniform float u_anura_cycle;
			//uniform vec4 u_anura_sprite_area;
			//uniform vec4 u_anura_draw_area;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			uniform sampler2D u_anura_tex_map;
			//uniform float u_intensity;
			uniform vec4 u_blur_area;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				vec2 texcoord = v_texcoord;

				float left = max(u_anura_draw_area[0], u_blur_area[0]);
				float top = max(u_anura_draw_area[1], u_blur_area[1]);
				float right = min(u_anura_draw_area[2], u_blur_area[2]);
				float bottom = min(u_anura_draw_area[3], u_blur_area[3]);
				if(v_vertex.x > left
				   && v_vertex.y > top
				   && v_vertex.x < right 
				   && v_vertex.y < bottom){
					gl_FragColor = vec4(0, 0, 0, 0);
					for(float x = -4.0; x <= 4.0; x += 1.0) {
						for(float y = -4.0; y <= 4.0; y += 1.0) {
							gl_FragColor = gl_FragColor + texture2D(u_anura_tex_map, texcoord + vec2(x/u_anura_draw_area[2], y/u_anura_draw_area[3])) / 81.0;
						}
					}

				} else {

					gl_FragColor = texture2D(u_anura_tex_map, texcoord);
				}
			}
		",

		draw: "[
			set(uniform_commands.u_blur_area, controller.blur_area)
			 where controller = find_or_die(level.chars, value is obj library_controller),
		]",
	},

	{
		name: "citadel_story_blur",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
           	#version 120
			uniform sampler2D u_anura_tex_map;
			uniform float u_blend_factor;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			uniform float u_bottom;
			uniform float u_left;
			void main()
			{
				float xpos = (v_vertex[0] - u_anura_draw_area[0]) / (u_anura_draw_area[2] - u_anura_draw_area[0]);
				float ypos = (v_vertex[1] - u_anura_draw_area[1]) / (u_anura_draw_area[3] - u_anura_draw_area[1]);
				if(xpos > u_left || ypos < u_bottom) {
					float gaussian[9] = float[](0.05, 0.09, 0.12, 0.15, 0.16, 0.15, 0.12, 0.09, 0.05);
					float area_width = u_anura_draw_area[2] - u_anura_draw_area[0];
					gl_FragColor = vec4(0, 0, 0, 0);
					int index = 0;
					for(float x = -4.0; x <= 4.0; x += 1.0) {
						gl_FragColor = gl_FragColor + texture2D(u_anura_tex_map, v_texcoord + vec2((x*u_blend_factor)/area_width, 0))*gaussian[index];
						++index;
					}

					gl_FragColor[0] *= 0.5;
					gl_FragColor[1] *= 0.5;
					gl_FragColor[2] *= 0.5;
				} else {
					gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
				}
			}
		",

		draw: "[
			if(story_controller, [
			  set(uniform_commands.u_blend_factor, 1),
			  set(uniform_commands.u_bottom, story_controller.background_blur_bottom),
			  set(uniform_commands.u_left, story_controller.background_blur_left),
			], [
			  set(uniform_commands.u_bottom, 0.0),
			  set(uniform_commands.u_left, 1.0),
			  set(uniform_commands.u_blend_factor, 1)
			]) where story_controller = find(level.chars, value is obj story_campaign_controller)
		]",
	},

	{
		name: "citadel_settings_background",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
           	#version 120
			uniform sampler2D u_anura_tex_map;
			uniform float u_blend_factor;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				gl_FragColor = vec4(0.2, 0.2, 0.2, 1.0);
				//gl_FragColor + texture2D(u_anura_tex_map, v_texcoord + vec2((x*u_blend_factor)/area_width, 0))*gaussian[index];
			}
		",

		draw: "[
		]",
	},

/*
	{
		name: "citadel_playmat",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			#version 120
			uniform sampler2D u_anura_tex_map;
			uniform sampler2D u_playmat_tex;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			uniform vec4 u_playmat_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);

				float xpos = (v_vertex[0] - u_anura_draw_area[0]) / (u_anura_draw_area[2] - u_anura_draw_area[0]);
				float ypos = (v_vertex[1] - u_anura_draw_area[1]) / (u_anura_draw_area[3] - u_anura_draw_area[1]);

				if(xpos > u_playmat_area[0] && xpos < u_playmat_area[2] &&
				   ypos > u_playmat_area[1] && ypos < u_playmat_area[3]) {
					xpos = (xpos - u_playmat_area[0]) / (u_playmat_area[2] - u_playmat_area[0]);
					ypos = (ypos - u_playmat_area[1]) / (u_playmat_area[3] - u_playmat_area[1]);
					vec4 col = texture2D(u_playmat_tex, vec2(xpos,ypos));
					gl_FragColor = mix(gl_FragColor, col, col[3]);
					gl_FragColor[3] = 1.0;
				}
			}
		",

		draw: "[
			set(uniform_commands.u_playmat_tex, 1),
			if(controller,
				set(uniform_commands.u_playmat_area, controller.playmat_area)
			)
		] where controller = find(level.chars, value is obj citadel_controller)",

		create: "[
			set(textures, [tex]),
			bind_texture(tex, 1),
		] where tex = load_texture('playmat.png', {address_mode: ['wrap']})",
	},
	*/

	{
		name: "citadel_background",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			#version 120
			uniform sampler2D u_anura_tex_map;
			uniform sampler2D u_bg_tex;
//			uniform sampler2D u_clouds_tex;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				float xpos = v_texcoord[0];
				float ypos = v_texcoord[1];
				vec4 bg_col = texture2D(u_bg_tex, vec2(xpos, -ypos));
				gl_FragColor = bg_col;
/*
				float cloud_x = xpos*1.0 - u_anura_cycle*0.0003;

				vec4 cloud_col = texture2D(u_clouds_tex, vec2(cloud_x, ypos));

				bg_col = mix(bg_col, cloud_col, cloud_col[3]*0.34);

				cloud_x = xpos*1.0 + u_anura_cycle*0.0004;

				cloud_col = texture2D(u_clouds_tex, vec2(-cloud_x, ypos));
				bg_col = mix(bg_col, cloud_col, cloud_col[3]*0.24);

				bg_col[3] = 1.0;

				gl_FragColor = mix(vec4(0.086, 0.137, 0.180, 1.0), bg_col, 1.0);
				*/
			}
		",

		draw: "[
			set(uniform_commands.u_bg_tex, 1),
//			set(uniform_commands.u_clouds_tex, 2),
		]",

		create: "[
			set(textures, [tex, /*clouds*/]),
			bind_texture(tex, 1),
//			bind_texture(clouds, 2),
		] where tex = load_texture('castle-bg.png', {address_mode: ['wrap']})
//		  where clouds = load_texture('clouds-1.png', {address_mode: ['wrap']})",
	},

	{
		name: "citadel_storyline_fade",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			#version 120
			uniform sampler2D u_anura_tex_map;
			uniform float u_anura_cycle;
			uniform vec4 u_anura_draw_area;
			uniform float u_distance;
			uniform float u_fade;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);

				float dist = max(abs(v_texcoord[0] - 0.5), abs(v_texcoord[1] - 0.5))*2.0;
				if(dist > u_distance) {
					gl_FragColor[3] *= max(0, (1.0 - (dist - u_distance)*10.0));
				}

				gl_FragColor[3] *= u_fade;
			}
		",

		draw: "[
		set(uniform_commands.u_distance, story_controller.fade_distance),
		set(uniform_commands.u_fade, story_controller.alpha_blend)
		] where story_controller = find_or_die(level.chars, value is obj story_presentation_controller)",
	},

	{
		name: "citadel_arrow",
		new: true,
		vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec2 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
				v_vertex = a_anura_vertex;
				gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
				v_texcoord = a_anura_texcoord;
			}
		",
		fragment: "
			#version 120
			uniform sampler2D u_anura_tex_map;
			uniform float u_cycle;
			uniform vec4 u_anura_draw_area;
			//uniform vec4 u_anura_sprite_area;
			varying vec2 v_texcoord;
			varying vec2 v_vertex;
			void main()
			{
			//	gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			//	gl_FragColor = mix(gl_FragColor, vec4(0,0,1,1), 0.9);
				
				float x_pos = v_texcoord[0] + u_cycle/10.0 + abs(0.5 - v_texcoord[1]);
				x_pos = x_pos - floor(x_pos);
				if(x_pos > 0.5) {
					gl_FragColor = vec4(1, 0, 0, 1);
				} else {
					gl_FragColor = vec4(1, 0, 0, 0);
				}
			}
		",

		draw: "[
			log('DRAW:', level.cycle),
			set(uniform_commands.u_cycle, level.cycle)
		]",
	},

	],
}
